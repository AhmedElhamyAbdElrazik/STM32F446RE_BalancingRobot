
BalancingRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08008ba0  08008ba0  00018ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009018  08009018  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  08009018  08009018  00019018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009020  08009020  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009020  08009020  00019020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009024  08009024  00019024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08009028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000022c  08009254  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08009254  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151d2  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000269d  00000000  00000000  0003542e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00037ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00038ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024015  00000000  00000000  000399d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fdb  00000000  00000000  0005d9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5aee  00000000  00000000  000719c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001474ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055a0  00000000  00000000  00147504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000022c 	.word	0x2000022c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b84 	.word	0x08008b84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000230 	.word	0x20000230
 800020c:	08008b84 	.word	0x08008b84

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <MPU_Init>:
	GYRO_Z_H,
	GYRO_Z_L,
};

void MPU_Init()
{   
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af04      	add	r7, sp, #16
    //power on delay
	HAL_Delay(1000);
 8000f86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f8a:	f001 fbf9 	bl	8002780 <HAL_Delay>
	MX_I2C1_Init();
 8000f8e:	f000 ffa9 	bl	8001ee4 <MX_I2C1_Init>
	uint8_t DLPF=0x00;                             //bandwidth digital low pass filter
 8000f92:	2300      	movs	r3, #0
 8000f94:	71fb      	strb	r3, [r7, #7]
	uint8_t SampleRate=0x07;                      //sampling frequency =GyroFreq/(7+1)   =8KHz/8 =1KHz
 8000f96:	2307      	movs	r3, #7
 8000f98:	71bb      	strb	r3, [r7, #6]
    uint8_t ClkSource=MPU_CLK_PLL_X_REF_VALUE;   //MPU_CLK_PLL_X_REF_VALUE;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	717b      	strb	r3, [r7, #5]
    uint8_t AccelRange=MPU_ACCEL_FS_SEL_2g_VALUE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	713b      	strb	r3, [r7, #4]
	uint8_t GyroRange=MPU_GYRO_FS_SEL_500_VALUE;
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	70fb      	strb	r3, [r7, #3]
	uint8_t EnableInterrupt=0x01;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	70bb      	strb	r3, [r7, #2]
	
	//set DLPF
	HAL_I2C_Mem_Write(&hi2c1,MPU_WRITE_REG(MPU_ADDRESS),MPU_CONFIG_REG,MPU_REGISTER_SIZE,&DLPF,MPU_REGISTER_SIZE,HAL_MAX_DELAY);
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	1dfb      	adds	r3, r7, #7
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	221a      	movs	r2, #26
 8000fbc:	21d0      	movs	r1, #208	; 0xd0
 8000fbe:	4824      	ldr	r0, [pc, #144]	; (8001050 <MPU_Init+0xd0>)
 8000fc0:	f001 ffda 	bl	8002f78 <HAL_I2C_Mem_Write>
	//set clk source
	HAL_I2C_Mem_Write(&hi2c1,MPU_WRITE_REG(MPU_ADDRESS),MPU_PWR_MGMT_1_REG,MPU_REGISTER_SIZE,&ClkSource,MPU_REGISTER_SIZE,HAL_MAX_DELAY);
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	9302      	str	r3, [sp, #8]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	1d7b      	adds	r3, r7, #5
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	226b      	movs	r2, #107	; 0x6b
 8000fd6:	21d0      	movs	r1, #208	; 0xd0
 8000fd8:	481d      	ldr	r0, [pc, #116]	; (8001050 <MPU_Init+0xd0>)
 8000fda:	f001 ffcd 	bl	8002f78 <HAL_I2C_Mem_Write>
	//set sample data rate
	HAL_I2C_Mem_Write(&hi2c1,MPU_WRITE_REG(MPU_ADDRESS),MPU_SMPLRT_DIV_REG,MPU_REGISTER_SIZE,&SampleRate,MPU_REGISTER_SIZE,HAL_MAX_DELAY);
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	1dbb      	adds	r3, r7, #6
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	2219      	movs	r2, #25
 8000ff0:	21d0      	movs	r1, #208	; 0xd0
 8000ff2:	4817      	ldr	r0, [pc, #92]	; (8001050 <MPU_Init+0xd0>)
 8000ff4:	f001 ffc0 	bl	8002f78 <HAL_I2C_Mem_Write>
	//set gyro full scale
	HAL_I2C_Mem_Write(&hi2c1,MPU_WRITE_REG(MPU_ADDRESS),MPU_GYROCONFIG_REG,MPU_REGISTER_SIZE,&GyroRange,MPU_REGISTER_SIZE,HAL_MAX_DELAY);
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2301      	movs	r3, #1
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	1cfb      	adds	r3, r7, #3
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	221b      	movs	r2, #27
 800100a:	21d0      	movs	r1, #208	; 0xd0
 800100c:	4810      	ldr	r0, [pc, #64]	; (8001050 <MPU_Init+0xd0>)
 800100e:	f001 ffb3 	bl	8002f78 <HAL_I2C_Mem_Write>
	//set accel full scale
	HAL_I2C_Mem_Write(&hi2c1,MPU_WRITE_REG(MPU_ADDRESS),MPU_ACCELCONFIG_REG,MPU_REGISTER_SIZE,&AccelRange,MPU_REGISTER_SIZE,HAL_MAX_DELAY);
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	2301      	movs	r3, #1
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	221c      	movs	r2, #28
 8001024:	21d0      	movs	r1, #208	; 0xd0
 8001026:	480a      	ldr	r0, [pc, #40]	; (8001050 <MPU_Init+0xd0>)
 8001028:	f001 ffa6 	bl	8002f78 <HAL_I2C_Mem_Write>
	//set interrupt
	HAL_I2C_Mem_Write(&hi2c1,MPU_WRITE_REG(MPU_ADDRESS),MPU_INT_ENABLE_REG,MPU_REGISTER_SIZE,&EnableInterrupt,MPU_REGISTER_SIZE,HAL_MAX_DELAY);
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	2301      	movs	r3, #1
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	1cbb      	adds	r3, r7, #2
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2301      	movs	r3, #1
 800103c:	2238      	movs	r2, #56	; 0x38
 800103e:	21d0      	movs	r1, #208	; 0xd0
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <MPU_Init+0xd0>)
 8001042:	f001 ff99 	bl	8002f78 <HAL_I2C_Mem_Write>

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200002c8 	.word	0x200002c8

08001054 <MPU_Read>:

void MPU_Read()
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af04      	add	r7, sp, #16

	uint8_t InterruptStatus=0;
 800105a:	2300      	movs	r3, #0
 800105c:	71fb      	strb	r3, [r7, #7]
	while(InterruptStatus!=1)
 800105e:	e00c      	b.n	800107a <MPU_Read+0x26>
	{
		HAL_I2C_Mem_Read(&hi2c1,MPU_READ_REG(MPU_ADDRESS),MPU_INT_STATUS_REG,MPU_REGISTER_SIZE,&InterruptStatus,1,HAL_MAX_DELAY);
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2301      	movs	r3, #1
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	223a      	movs	r2, #58	; 0x3a
 8001072:	21d1      	movs	r1, #209	; 0xd1
 8001074:	480b      	ldr	r0, [pc, #44]	; (80010a4 <MPU_Read+0x50>)
 8001076:	f002 f879 	bl	800316c <HAL_I2C_Mem_Read>
	while(InterruptStatus!=1)
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d1ef      	bne.n	8001060 <MPU_Read+0xc>
	}
	HAL_I2C_Mem_Read(&hi2c1,MPU_READ_REG(MPU_ADDRESS),MPU_ACCEL_XOUT_H_REG,MPU_REGISTER_SIZE,(uint8_t*)&Buffer,sizeof(Buffer),HAL_MAX_DELAY);
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	9302      	str	r3, [sp, #8]
 8001086:	230e      	movs	r3, #14
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MPU_Read+0x54>)
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2301      	movs	r3, #1
 8001090:	223b      	movs	r2, #59	; 0x3b
 8001092:	21d1      	movs	r1, #209	; 0xd1
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <MPU_Read+0x50>)
 8001096:	f002 f869 	bl	800316c <HAL_I2C_Mem_Read>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200002c8 	.word	0x200002c8
 80010a8:	20000248 	.word	0x20000248

080010ac <MPU_GetGYROValue>:
	}
	printf("%f,%f,%f,%f,%f,%f\r\n",GyroXCal,GyroYCal,GyroZCal,AccelXCal,AccelYCal,AccelZCal);
}
 
void MPU_GetGYROValue(float* Gyro,MPU_Axis_t Axis)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	70fb      	strb	r3, [r7, #3]
	switch(Axis)
 80010b8:	78fb      	ldrb	r3, [r7, #3]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d03a      	beq.n	8001134 <MPU_GetGYROValue+0x88>
 80010be:	2b02      	cmp	r3, #2
 80010c0:	dc52      	bgt.n	8001168 <MPU_GetGYROValue+0xbc>
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <MPU_GetGYROValue+0x20>
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d01a      	beq.n	8001100 <MPU_GetGYROValue+0x54>
		case MPU_Z:
			*Gyro=((int16_t)(((uint16_t)Buffer[GYRO_Z_H]<<8)|Buffer[GYRO_Z_L])-GyroZCal)/MPU_GYRO_FS_500_SENSITIVITY_VALUE;
		break;
	}

}
 80010ca:	e04d      	b.n	8001168 <MPU_GetGYROValue+0xbc>
			*Gyro=((int16_t)(((uint16_t)Buffer[GYRO_X_H]<<8)|Buffer[GYRO_X_L])-GyroXCal)/MPU_GYRO_FS_500_SENSITIVITY_VALUE;
 80010cc:	4b29      	ldr	r3, [pc, #164]	; (8001174 <MPU_GetGYROValue+0xc8>)
 80010ce:	7a1b      	ldrb	r3, [r3, #8]
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <MPU_GetGYROValue+0xc8>)
 80010d6:	7a5b      	ldrb	r3, [r3, #9]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	b21b      	sxth	r3, r3
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e6:	4b24      	ldr	r3, [pc, #144]	; (8001178 <MPU_GetGYROValue+0xcc>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010f0:	eddf 6a22 	vldr	s13, [pc, #136]	; 800117c <MPU_GetGYROValue+0xd0>
 80010f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	edc3 7a00 	vstr	s15, [r3]
		break;
 80010fe:	e033      	b.n	8001168 <MPU_GetGYROValue+0xbc>
			*Gyro=((int16_t)(((uint16_t)Buffer[GYRO_Y_H]<<8)|Buffer[GYRO_Y_L])-GyroYCal)/MPU_GYRO_FS_500_SENSITIVITY_VALUE;
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <MPU_GetGYROValue+0xc8>)
 8001102:	7a9b      	ldrb	r3, [r3, #10]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MPU_GetGYROValue+0xc8>)
 800110a:	7adb      	ldrb	r3, [r3, #11]
 800110c:	b21b      	sxth	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b21b      	sxth	r3, r3
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <MPU_GetGYROValue+0xd4>)
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001124:	eddf 6a15 	vldr	s13, [pc, #84]	; 800117c <MPU_GetGYROValue+0xd0>
 8001128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	edc3 7a00 	vstr	s15, [r3]
		break;
 8001132:	e019      	b.n	8001168 <MPU_GetGYROValue+0xbc>
			*Gyro=((int16_t)(((uint16_t)Buffer[GYRO_Z_H]<<8)|Buffer[GYRO_Z_L])-GyroZCal)/MPU_GYRO_FS_500_SENSITIVITY_VALUE;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MPU_GetGYROValue+0xc8>)
 8001136:	7b1b      	ldrb	r3, [r3, #12]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <MPU_GetGYROValue+0xc8>)
 800113e:	7b5b      	ldrb	r3, [r3, #13]
 8001140:	b21b      	sxth	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	b21b      	sxth	r3, r3
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <MPU_GetGYROValue+0xd8>)
 8001150:	edd3 7a00 	vldr	s15, [r3]
 8001154:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001158:	eddf 6a08 	vldr	s13, [pc, #32]	; 800117c <MPU_GetGYROValue+0xd0>
 800115c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	edc3 7a00 	vstr	s15, [r3]
		break;
 8001166:	bf00      	nop
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	20000248 	.word	0x20000248
 8001178:	20000000 	.word	0x20000000
 800117c:	42830000 	.word	0x42830000
 8001180:	20000004 	.word	0x20000004
 8001184:	20000008 	.word	0x20000008

08001188 <MPU_GetACCELValue>:

void MPU_GetACCELValue(float* Accel,MPU_Axis_t Axis)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
	switch(Axis)
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d03a      	beq.n	8001210 <MPU_GetACCELValue+0x88>
 800119a:	2b02      	cmp	r3, #2
 800119c:	dc52      	bgt.n	8001244 <MPU_GetACCELValue+0xbc>
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <MPU_GetACCELValue+0x20>
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d01a      	beq.n	80011dc <MPU_GetACCELValue+0x54>
		case MPU_Z:
			*Accel=((int16_t)(((uint16_t)Buffer[ACCEL_Z_H]<<8)|Buffer[ACCEL_Z_L])-AccelZCal)/MPU_ACCEL_FS_2g_SENSITIVITY_VALUE;
		break;
	}

}
 80011a6:	e04d      	b.n	8001244 <MPU_GetACCELValue+0xbc>
			*Accel=((int16_t)(((uint16_t)Buffer[ACCEL_X_H]<<8)|Buffer[ACCEL_X_L])-AccelXCal)/MPU_ACCEL_FS_2g_SENSITIVITY_VALUE;
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <MPU_GetACCELValue+0xc8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <MPU_GetACCELValue+0xc8>)
 80011b2:	785b      	ldrb	r3, [r3, #1]
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c2:	4b24      	ldr	r3, [pc, #144]	; (8001254 <MPU_GetACCELValue+0xcc>)
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011cc:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001258 <MPU_GetACCELValue+0xd0>
 80011d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	edc3 7a00 	vstr	s15, [r3]
		break;
 80011da:	e033      	b.n	8001244 <MPU_GetACCELValue+0xbc>
			*Accel=((int16_t)(((uint16_t)Buffer[ACCEL_Y_H]<<8)|Buffer[ACCEL_Y_L])-AccelYCal)/MPU_ACCEL_FS_2g_SENSITIVITY_VALUE;
 80011dc:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MPU_GetACCELValue+0xc8>)
 80011de:	789b      	ldrb	r3, [r3, #2]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MPU_GetACCELValue+0xc8>)
 80011e6:	78db      	ldrb	r3, [r3, #3]
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <MPU_GetACCELValue+0xd4>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001200:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001258 <MPU_GetACCELValue+0xd0>
 8001204:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	edc3 7a00 	vstr	s15, [r3]
		break;
 800120e:	e019      	b.n	8001244 <MPU_GetACCELValue+0xbc>
			*Accel=((int16_t)(((uint16_t)Buffer[ACCEL_Z_H]<<8)|Buffer[ACCEL_Z_L])-AccelZCal)/MPU_ACCEL_FS_2g_SENSITIVITY_VALUE;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MPU_GetACCELValue+0xc8>)
 8001212:	791b      	ldrb	r3, [r3, #4]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <MPU_GetACCELValue+0xc8>)
 800121a:	795b      	ldrb	r3, [r3, #5]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21b      	sxth	r3, r3
 8001222:	ee07 3a90 	vmov	s15, r3
 8001226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <MPU_GetACCELValue+0xd8>)
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001234:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001258 <MPU_GetACCELValue+0xd0>
 8001238:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	edc3 7a00 	vstr	s15, [r3]
		break;
 8001242:	bf00      	nop
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	20000248 	.word	0x20000248
 8001254:	2000000c 	.word	0x2000000c
 8001258:	46800000 	.word	0x46800000
 800125c:	20000010 	.word	0x20000010
 8001260:	20000014 	.word	0x20000014
 8001264:	00000000 	.word	0x00000000

08001268 <MPU_GetAngle>:

void MPU_GetAngle(float* Angle,MPU_Axis_t Axis)
{
 8001268:	b5b0      	push	{r4, r5, r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	70fb      	strb	r3, [r7, #3]
	float GyroX=0,GyroY=0;
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	61bb      	str	r3, [r7, #24]
	float AccelX=0,AccelY=0,AccelZ=0;
 8001280:	f04f 0300 	mov.w	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	f04f 0300 	mov.w	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
	float RollAngle=0,PitchAngle=0;
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	623b      	str	r3, [r7, #32]

	switch(Axis)
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	f000 80c1 	beq.w	8001428 <MPU_GetAngle+0x1c0>
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	f300 80c3 	bgt.w	8001432 <MPU_GetAngle+0x1ca>
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <MPU_GetAngle+0x4e>
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d04b      	beq.n	800134c <MPU_GetAngle+0xe4>
		case MPU_Z:
			*Angle=0;
		break;
	}

}
 80012b4:	e0bd      	b.n	8001432 <MPU_GetAngle+0x1ca>
			 MPU_GetGYROValue (&GyroX, Axis);
 80012b6:	78fa      	ldrb	r2, [r7, #3]
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fef4 	bl	80010ac <MPU_GetGYROValue>
			 MPU_GetACCELValue(&AccelY,MPU_Y);
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	2101      	movs	r1, #1
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff5c 	bl	8001188 <MPU_GetACCELValue>
			 MPU_GetACCELValue(&AccelZ,MPU_Z);
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2102      	movs	r1, #2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff56 	bl	8001188 <MPU_GetACCELValue>
			 RollAngle=atan2(AccelY,AccelZ)*180.0/PI;
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f952 	bl	8000588 <__aeabi_f2d>
 80012e4:	4604      	mov	r4, r0
 80012e6:	460d      	mov	r5, r1
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f94c 	bl	8000588 <__aeabi_f2d>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	ec43 2b11 	vmov	d1, r2, r3
 80012f8:	ec45 4b10 	vmov	d0, r4, r5
 80012fc:	f007 f8e2 	bl	80084c4 <atan2>
 8001300:	ec51 0b10 	vmov	r0, r1, d0
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b4f      	ldr	r3, [pc, #316]	; (8001448 <MPU_GetAngle+0x1e0>)
 800130a:	f7ff f995 	bl	8000638 <__aeabi_dmul>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	a34a      	add	r3, pc, #296	; (adr r3, 8001440 <MPU_GetAngle+0x1d8>)
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	f7ff fab6 	bl	800088c <__aeabi_ddiv>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff fc5e 	bl	8000be8 <__aeabi_d2f>
 800132c:	4603      	mov	r3, r0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
			 *Angle=XKalmanFilter(RollAngle, GyroX);
 8001330:	edd7 7a07 	vldr	s15, [r7, #28]
 8001334:	eef0 0a67 	vmov.f32	s1, s15
 8001338:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800133c:	f000 f886 	bl	800144c <XKalmanFilter>
 8001340:	eef0 7a40 	vmov.f32	s15, s0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	edc3 7a00 	vstr	s15, [r3]
		break;
 800134a:	e072      	b.n	8001432 <MPU_GetAngle+0x1ca>
			 MPU_GetGYROValue (&GyroY, Axis);
 800134c:	78fa      	ldrb	r2, [r7, #3]
 800134e:	f107 0318 	add.w	r3, r7, #24
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fea9 	bl	80010ac <MPU_GetGYROValue>
			 MPU_GetACCELValue(&AccelX,MPU_X);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff11 	bl	8001188 <MPU_GetACCELValue>
			 MPU_GetACCELValue(&AccelY,MPU_Y);
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	2101      	movs	r1, #1
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff0b 	bl	8001188 <MPU_GetACCELValue>
			 MPU_GetACCELValue(&AccelZ,MPU_Z);
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	2102      	movs	r1, #2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff05 	bl	8001188 <MPU_GetACCELValue>
			 PitchAngle=atan2(-AccelX,sqrt(AccelZ*AccelZ+AccelY*AccelY))*180.0/PI;
 800137e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001382:	eef1 7a67 	vneg.f32	s15, s15
 8001386:	ee17 3a90 	vmov	r3, s15
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f8fc 	bl	8000588 <__aeabi_f2d>
 8001390:	4604      	mov	r4, r0
 8001392:	460d      	mov	r5, r1
 8001394:	ed97 7a03 	vldr	s14, [r7, #12]
 8001398:	edd7 7a03 	vldr	s15, [r7, #12]
 800139c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a0:	edd7 6a04 	vldr	s13, [r7, #16]
 80013a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80013a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b0:	ee17 0a90 	vmov	r0, s15
 80013b4:	f7ff f8e8 	bl	8000588 <__aeabi_f2d>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	ec43 2b10 	vmov	d0, r2, r3
 80013c0:	f007 f882 	bl	80084c8 <sqrt>
 80013c4:	eeb0 7a40 	vmov.f32	s14, s0
 80013c8:	eef0 7a60 	vmov.f32	s15, s1
 80013cc:	eeb0 1a47 	vmov.f32	s2, s14
 80013d0:	eef0 1a67 	vmov.f32	s3, s15
 80013d4:	ec45 4b10 	vmov	d0, r4, r5
 80013d8:	f007 f874 	bl	80084c4 <atan2>
 80013dc:	ec51 0b10 	vmov	r0, r1, d0
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MPU_GetAngle+0x1e0>)
 80013e6:	f7ff f927 	bl	8000638 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	a313      	add	r3, pc, #76	; (adr r3, 8001440 <MPU_GetAngle+0x1d8>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	f7ff fa48 	bl	800088c <__aeabi_ddiv>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fbf0 	bl	8000be8 <__aeabi_d2f>
 8001408:	4603      	mov	r3, r0
 800140a:	623b      	str	r3, [r7, #32]
			 *Angle=YKalmanFilter(PitchAngle,GyroY);
 800140c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001410:	eef0 0a67 	vmov.f32	s1, s15
 8001414:	ed97 0a08 	vldr	s0, [r7, #32]
 8001418:	f000 f998 	bl	800174c <YKalmanFilter>
 800141c:	eef0 7a40 	vmov.f32	s15, s0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	edc3 7a00 	vstr	s15, [r3]
		break;
 8001426:	e004      	b.n	8001432 <MPU_GetAngle+0x1ca>
			*Angle=0;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
		break;
 8001430:	bf00      	nop
}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	; 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bdb0      	pop	{r4, r5, r7, pc}
 800143a:	bf00      	nop
 800143c:	f3af 8000 	nop.w
 8001440:	54524550 	.word	0x54524550
 8001444:	400921fb 	.word	0x400921fb
 8001448:	40668000 	.word	0x40668000

0800144c <XKalmanFilter>:


static float XKalmanFilter(float AccelAngle,float GyroAngleRate)
{
 800144c:	b5b0      	push	{r4, r5, r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	ed87 0a01 	vstr	s0, [r7, #4]
 8001456:	edc7 0a00 	vstr	s1, [r7]
				  R_K=0.09,
				  K[2][1]={{0},{0}},
				  H[2]={1,0},
				  dt_K=-1;
	//not enter in the first time just update dt_K
	if(dt_K!=-1)
 800145a:	4bb1      	ldr	r3, [pc, #708]	; (8001720 <XKalmanFilter+0x2d4>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001464:	eef4 7a47 	vcmp.f32	s15, s14
 8001468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146c:	f000 8146 	beq.w	80016fc <XKalmanFilter+0x2b0>
	{
	  dt_K=(HAL_GetTick()-(uint32_t)dt_K)/1000.0;
 8001470:	f001 f97a 	bl	8002768 <HAL_GetTick>
 8001474:	4603      	mov	r3, r0
 8001476:	4aaa      	ldr	r2, [pc, #680]	; (8001720 <XKalmanFilter+0x2d4>)
 8001478:	edd2 7a00 	vldr	s15, [r2]
 800147c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001480:	ee17 2a90 	vmov	r2, s15
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f85c 	bl	8000544 <__aeabi_ui2d>
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	4ba4      	ldr	r3, [pc, #656]	; (8001724 <XKalmanFilter+0x2d8>)
 8001492:	f7ff f9fb 	bl	800088c <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff fba3 	bl	8000be8 <__aeabi_d2f>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4a9e      	ldr	r2, [pc, #632]	; (8001720 <XKalmanFilter+0x2d4>)
 80014a6:	6013      	str	r3, [r2, #0]
	  //prediction
	  PredictedAngle+=dt_K*(GyroAngleRate-PreditedBias);
 80014a8:	4b9f      	ldr	r3, [pc, #636]	; (8001728 <XKalmanFilter+0x2dc>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ed97 7a00 	vldr	s14, [r7]
 80014b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014b6:	4b9a      	ldr	r3, [pc, #616]	; (8001720 <XKalmanFilter+0x2d4>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c0:	4b9a      	ldr	r3, [pc, #616]	; (800172c <XKalmanFilter+0x2e0>)
 80014c2:	edd3 7a00 	vldr	s15, [r3]
 80014c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ca:	4b98      	ldr	r3, [pc, #608]	; (800172c <XKalmanFilter+0x2e0>)
 80014cc:	edc3 7a00 	vstr	s15, [r3]

	  P[0][0]=P[0][0]+dt_K*(dt_K*P[1][1]-P[1][0]-P[0][1]+QAngle);
 80014d0:	4b97      	ldr	r3, [pc, #604]	; (8001730 <XKalmanFilter+0x2e4>)
 80014d2:	ed93 7a00 	vldr	s14, [r3]
 80014d6:	4b96      	ldr	r3, [pc, #600]	; (8001730 <XKalmanFilter+0x2e4>)
 80014d8:	edd3 6a03 	vldr	s13, [r3, #12]
 80014dc:	4b90      	ldr	r3, [pc, #576]	; (8001720 <XKalmanFilter+0x2d4>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014e6:	4b92      	ldr	r3, [pc, #584]	; (8001730 <XKalmanFilter+0x2e4>)
 80014e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80014ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014f0:	4b8f      	ldr	r3, [pc, #572]	; (8001730 <XKalmanFilter+0x2e4>)
 80014f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80014f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014fa:	4b8e      	ldr	r3, [pc, #568]	; (8001734 <XKalmanFilter+0x2e8>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001504:	4b86      	ldr	r3, [pc, #536]	; (8001720 <XKalmanFilter+0x2d4>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800150e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001512:	4b87      	ldr	r3, [pc, #540]	; (8001730 <XKalmanFilter+0x2e4>)
 8001514:	edc3 7a00 	vstr	s15, [r3]
	  P[0][1]=P[0][1]-dt_K*P[1][1];
 8001518:	4b85      	ldr	r3, [pc, #532]	; (8001730 <XKalmanFilter+0x2e4>)
 800151a:	ed93 7a01 	vldr	s14, [r3, #4]
 800151e:	4b84      	ldr	r3, [pc, #528]	; (8001730 <XKalmanFilter+0x2e4>)
 8001520:	edd3 6a03 	vldr	s13, [r3, #12]
 8001524:	4b7e      	ldr	r3, [pc, #504]	; (8001720 <XKalmanFilter+0x2d4>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001532:	4b7f      	ldr	r3, [pc, #508]	; (8001730 <XKalmanFilter+0x2e4>)
 8001534:	edc3 7a01 	vstr	s15, [r3, #4]
	  P[1][0]=P[1][0]-dt_K*P[1][1];
 8001538:	4b7d      	ldr	r3, [pc, #500]	; (8001730 <XKalmanFilter+0x2e4>)
 800153a:	ed93 7a02 	vldr	s14, [r3, #8]
 800153e:	4b7c      	ldr	r3, [pc, #496]	; (8001730 <XKalmanFilter+0x2e4>)
 8001540:	edd3 6a03 	vldr	s13, [r3, #12]
 8001544:	4b76      	ldr	r3, [pc, #472]	; (8001720 <XKalmanFilter+0x2d4>)
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800154e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001552:	4b77      	ldr	r3, [pc, #476]	; (8001730 <XKalmanFilter+0x2e4>)
 8001554:	edc3 7a02 	vstr	s15, [r3, #8]
	  P[1][1]=P[1][1]+dt_K*QBias;
 8001558:	4b75      	ldr	r3, [pc, #468]	; (8001730 <XKalmanFilter+0x2e4>)
 800155a:	ed93 7a03 	vldr	s14, [r3, #12]
 800155e:	4b70      	ldr	r3, [pc, #448]	; (8001720 <XKalmanFilter+0x2d4>)
 8001560:	edd3 6a00 	vldr	s13, [r3]
 8001564:	4b74      	ldr	r3, [pc, #464]	; (8001738 <XKalmanFilter+0x2ec>)
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800156e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001572:	4b6f      	ldr	r3, [pc, #444]	; (8001730 <XKalmanFilter+0x2e4>)
 8001574:	edc3 7a03 	vstr	s15, [r3, #12]

	 //measured
	  MeasuredAngle=H[0]*AccelAngle;
 8001578:	4b70      	ldr	r3, [pc, #448]	; (800173c <XKalmanFilter+0x2f0>)
 800157a:	ed93 7a00 	vldr	s14, [r3]
 800157e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001586:	4b6e      	ldr	r3, [pc, #440]	; (8001740 <XKalmanFilter+0x2f4>)
 8001588:	edc3 7a00 	vstr	s15, [r3]

	  //kalman filter gain
	  K[0][0]=P[0][0]/(P[0][0]+R_K);
 800158c:	4b68      	ldr	r3, [pc, #416]	; (8001730 <XKalmanFilter+0x2e4>)
 800158e:	edd3 6a00 	vldr	s13, [r3]
 8001592:	4b67      	ldr	r3, [pc, #412]	; (8001730 <XKalmanFilter+0x2e4>)
 8001594:	ed93 7a00 	vldr	s14, [r3]
 8001598:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <XKalmanFilter+0x2f8>)
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a6:	4b68      	ldr	r3, [pc, #416]	; (8001748 <XKalmanFilter+0x2fc>)
 80015a8:	edc3 7a00 	vstr	s15, [r3]
	  K[1][0]=P[1][0]/(P[0][0]+R_K);
 80015ac:	4b60      	ldr	r3, [pc, #384]	; (8001730 <XKalmanFilter+0x2e4>)
 80015ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80015b2:	4b5f      	ldr	r3, [pc, #380]	; (8001730 <XKalmanFilter+0x2e4>)
 80015b4:	ed93 7a00 	vldr	s14, [r3]
 80015b8:	4b62      	ldr	r3, [pc, #392]	; (8001744 <XKalmanFilter+0x2f8>)
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c6:	4b60      	ldr	r3, [pc, #384]	; (8001748 <XKalmanFilter+0x2fc>)
 80015c8:	edc3 7a01 	vstr	s15, [r3, #4]

	  //estimated result
	  PredictedAngle=PredictedAngle+K[0][0]*(MeasuredAngle-PredictedAngle);
 80015cc:	4b5e      	ldr	r3, [pc, #376]	; (8001748 <XKalmanFilter+0x2fc>)
 80015ce:	ed93 7a00 	vldr	s14, [r3]
 80015d2:	4b5b      	ldr	r3, [pc, #364]	; (8001740 <XKalmanFilter+0x2f4>)
 80015d4:	edd3 6a00 	vldr	s13, [r3]
 80015d8:	4b54      	ldr	r3, [pc, #336]	; (800172c <XKalmanFilter+0x2e0>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015e6:	4b51      	ldr	r3, [pc, #324]	; (800172c <XKalmanFilter+0x2e0>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f0:	4b4e      	ldr	r3, [pc, #312]	; (800172c <XKalmanFilter+0x2e0>)
 80015f2:	edc3 7a00 	vstr	s15, [r3]
	  PreditedBias=PreditedBias+K[1][0]*(MeasuredAngle-PredictedAngle);
 80015f6:	4b54      	ldr	r3, [pc, #336]	; (8001748 <XKalmanFilter+0x2fc>)
 80015f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80015fc:	4b50      	ldr	r3, [pc, #320]	; (8001740 <XKalmanFilter+0x2f4>)
 80015fe:	edd3 6a00 	vldr	s13, [r3]
 8001602:	4b4a      	ldr	r3, [pc, #296]	; (800172c <XKalmanFilter+0x2e0>)
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800160c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001610:	4b45      	ldr	r3, [pc, #276]	; (8001728 <XKalmanFilter+0x2dc>)
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161a:	4b43      	ldr	r3, [pc, #268]	; (8001728 <XKalmanFilter+0x2dc>)
 800161c:	edc3 7a00 	vstr	s15, [r3]

	  double PrevP00=P[0][0],PrevP01=P[0][1];
 8001620:	4b43      	ldr	r3, [pc, #268]	; (8001730 <XKalmanFilter+0x2e4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ffaf 	bl	8000588 <__aeabi_f2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001632:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <XKalmanFilter+0x2e4>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ffa6 	bl	8000588 <__aeabi_f2d>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  P[0][0]=P[0][0]*(1-K[0][0]);
 8001644:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <XKalmanFilter+0x2e4>)
 8001646:	ed93 7a00 	vldr	s14, [r3]
 800164a:	4b3f      	ldr	r3, [pc, #252]	; (8001748 <XKalmanFilter+0x2fc>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001654:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165c:	4b34      	ldr	r3, [pc, #208]	; (8001730 <XKalmanFilter+0x2e4>)
 800165e:	edc3 7a00 	vstr	s15, [r3]
	  P[0][1]=P[0][1]*(1-K[0][0]);
 8001662:	4b33      	ldr	r3, [pc, #204]	; (8001730 <XKalmanFilter+0x2e4>)
 8001664:	ed93 7a01 	vldr	s14, [r3, #4]
 8001668:	4b37      	ldr	r3, [pc, #220]	; (8001748 <XKalmanFilter+0x2fc>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001672:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167a:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <XKalmanFilter+0x2e4>)
 800167c:	edc3 7a01 	vstr	s15, [r3, #4]
	  P[1][0]=P[1][0]-K[1][0]*PrevP00;
 8001680:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <XKalmanFilter+0x2e4>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff7f 	bl	8000588 <__aeabi_f2d>
 800168a:	4604      	mov	r4, r0
 800168c:	460d      	mov	r5, r1
 800168e:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <XKalmanFilter+0x2fc>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe ff78 	bl	8000588 <__aeabi_f2d>
 8001698:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800169c:	f7fe ffcc 	bl	8000638 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4620      	mov	r0, r4
 80016a6:	4629      	mov	r1, r5
 80016a8:	f7fe fe0e 	bl	80002c8 <__aeabi_dsub>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff fa98 	bl	8000be8 <__aeabi_d2f>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <XKalmanFilter+0x2e4>)
 80016bc:	6093      	str	r3, [r2, #8]
	  P[1][1]=P[1][1]-K[1][0]*PrevP01;
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <XKalmanFilter+0x2e4>)
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff60 	bl	8000588 <__aeabi_f2d>
 80016c8:	4604      	mov	r4, r0
 80016ca:	460d      	mov	r5, r1
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <XKalmanFilter+0x2fc>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe ff59 	bl	8000588 <__aeabi_f2d>
 80016d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016da:	f7fe ffad 	bl	8000638 <__aeabi_dmul>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4620      	mov	r0, r4
 80016e4:	4629      	mov	r1, r5
 80016e6:	f7fe fdef 	bl	80002c8 <__aeabi_dsub>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	f7ff fa79 	bl	8000be8 <__aeabi_d2f>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <XKalmanFilter+0x2e4>)
 80016fa:	60d3      	str	r3, [r2, #12]
	}
    dt_K=HAL_GetTick();
 80016fc:	f001 f834 	bl	8002768 <HAL_GetTick>
 8001700:	ee07 0a90 	vmov	s15, r0
 8001704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <XKalmanFilter+0x2d4>)
 800170a:	edc3 7a00 	vstr	s15, [r3]
    return PredictedAngle;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <XKalmanFilter+0x2e0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	ee07 3a90 	vmov	s15, r3
}
 8001716:	eeb0 0a67 	vmov.f32	s0, s15
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bdb0      	pop	{r4, r5, r7, pc}
 8001720:	20000018 	.word	0x20000018
 8001724:	408f4000 	.word	0x408f4000
 8001728:	20000258 	.word	0x20000258
 800172c:	2000025c 	.word	0x2000025c
 8001730:	20000260 	.word	0x20000260
 8001734:	2000001c 	.word	0x2000001c
 8001738:	20000020 	.word	0x20000020
 800173c:	20000024 	.word	0x20000024
 8001740:	20000270 	.word	0x20000270
 8001744:	2000002c 	.word	0x2000002c
 8001748:	20000274 	.word	0x20000274

0800174c <YKalmanFilter>:


static float YKalmanFilter(float AccelAngle,float GyroAngleRate)
{
 800174c:	b5b0      	push	{r4, r5, r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	ed87 0a01 	vstr	s0, [r7, #4]
 8001756:	edc7 0a00 	vstr	s1, [r7]
				  R_K=0.09,
				  K[2][1]={{0},{0}},
				  H[2]={1,0},
				  dt_K=-1;
	//not enter in the first time just update dt_K
	if(dt_K!=-1)
 800175a:	4bb1      	ldr	r3, [pc, #708]	; (8001a20 <YKalmanFilter+0x2d4>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001764:	eef4 7a47 	vcmp.f32	s15, s14
 8001768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176c:	f000 8146 	beq.w	80019fc <YKalmanFilter+0x2b0>
	{
	  dt_K=(HAL_GetTick()-(uint32_t)dt_K)/1000.0;
 8001770:	f000 fffa 	bl	8002768 <HAL_GetTick>
 8001774:	4603      	mov	r3, r0
 8001776:	4aaa      	ldr	r2, [pc, #680]	; (8001a20 <YKalmanFilter+0x2d4>)
 8001778:	edd2 7a00 	vldr	s15, [r2]
 800177c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001780:	ee17 2a90 	vmov	r2, s15
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fedc 	bl	8000544 <__aeabi_ui2d>
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	4ba4      	ldr	r3, [pc, #656]	; (8001a24 <YKalmanFilter+0x2d8>)
 8001792:	f7ff f87b 	bl	800088c <__aeabi_ddiv>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	f7ff fa23 	bl	8000be8 <__aeabi_d2f>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a9e      	ldr	r2, [pc, #632]	; (8001a20 <YKalmanFilter+0x2d4>)
 80017a6:	6013      	str	r3, [r2, #0]
	  //prediction
	  PredictedAngle+=dt_K*(GyroAngleRate-PreditedBias);
 80017a8:	4b9f      	ldr	r3, [pc, #636]	; (8001a28 <YKalmanFilter+0x2dc>)
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	ed97 7a00 	vldr	s14, [r7]
 80017b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017b6:	4b9a      	ldr	r3, [pc, #616]	; (8001a20 <YKalmanFilter+0x2d4>)
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017c0:	4b9a      	ldr	r3, [pc, #616]	; (8001a2c <YKalmanFilter+0x2e0>)
 80017c2:	edd3 7a00 	vldr	s15, [r3]
 80017c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ca:	4b98      	ldr	r3, [pc, #608]	; (8001a2c <YKalmanFilter+0x2e0>)
 80017cc:	edc3 7a00 	vstr	s15, [r3]

	  P[0][0]=P[0][0]+dt_K*(dt_K*P[1][1]-P[1][0]-P[0][1]+QAngle);
 80017d0:	4b97      	ldr	r3, [pc, #604]	; (8001a30 <YKalmanFilter+0x2e4>)
 80017d2:	ed93 7a00 	vldr	s14, [r3]
 80017d6:	4b96      	ldr	r3, [pc, #600]	; (8001a30 <YKalmanFilter+0x2e4>)
 80017d8:	edd3 6a03 	vldr	s13, [r3, #12]
 80017dc:	4b90      	ldr	r3, [pc, #576]	; (8001a20 <YKalmanFilter+0x2d4>)
 80017de:	edd3 7a00 	vldr	s15, [r3]
 80017e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017e6:	4b92      	ldr	r3, [pc, #584]	; (8001a30 <YKalmanFilter+0x2e4>)
 80017e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80017ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017f0:	4b8f      	ldr	r3, [pc, #572]	; (8001a30 <YKalmanFilter+0x2e4>)
 80017f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80017f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017fa:	4b8e      	ldr	r3, [pc, #568]	; (8001a34 <YKalmanFilter+0x2e8>)
 80017fc:	edd3 7a00 	vldr	s15, [r3]
 8001800:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001804:	4b86      	ldr	r3, [pc, #536]	; (8001a20 <YKalmanFilter+0x2d4>)
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001812:	4b87      	ldr	r3, [pc, #540]	; (8001a30 <YKalmanFilter+0x2e4>)
 8001814:	edc3 7a00 	vstr	s15, [r3]
	  P[0][1]=P[0][1]-dt_K*P[1][1];
 8001818:	4b85      	ldr	r3, [pc, #532]	; (8001a30 <YKalmanFilter+0x2e4>)
 800181a:	ed93 7a01 	vldr	s14, [r3, #4]
 800181e:	4b84      	ldr	r3, [pc, #528]	; (8001a30 <YKalmanFilter+0x2e4>)
 8001820:	edd3 6a03 	vldr	s13, [r3, #12]
 8001824:	4b7e      	ldr	r3, [pc, #504]	; (8001a20 <YKalmanFilter+0x2d4>)
 8001826:	edd3 7a00 	vldr	s15, [r3]
 800182a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800182e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001832:	4b7f      	ldr	r3, [pc, #508]	; (8001a30 <YKalmanFilter+0x2e4>)
 8001834:	edc3 7a01 	vstr	s15, [r3, #4]
	  P[1][0]=P[1][0]-dt_K*P[1][1];
 8001838:	4b7d      	ldr	r3, [pc, #500]	; (8001a30 <YKalmanFilter+0x2e4>)
 800183a:	ed93 7a02 	vldr	s14, [r3, #8]
 800183e:	4b7c      	ldr	r3, [pc, #496]	; (8001a30 <YKalmanFilter+0x2e4>)
 8001840:	edd3 6a03 	vldr	s13, [r3, #12]
 8001844:	4b76      	ldr	r3, [pc, #472]	; (8001a20 <YKalmanFilter+0x2d4>)
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800184e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001852:	4b77      	ldr	r3, [pc, #476]	; (8001a30 <YKalmanFilter+0x2e4>)
 8001854:	edc3 7a02 	vstr	s15, [r3, #8]
	  P[1][1]=P[1][1]+dt_K*QBias;
 8001858:	4b75      	ldr	r3, [pc, #468]	; (8001a30 <YKalmanFilter+0x2e4>)
 800185a:	ed93 7a03 	vldr	s14, [r3, #12]
 800185e:	4b70      	ldr	r3, [pc, #448]	; (8001a20 <YKalmanFilter+0x2d4>)
 8001860:	edd3 6a00 	vldr	s13, [r3]
 8001864:	4b74      	ldr	r3, [pc, #464]	; (8001a38 <YKalmanFilter+0x2ec>)
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800186e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001872:	4b6f      	ldr	r3, [pc, #444]	; (8001a30 <YKalmanFilter+0x2e4>)
 8001874:	edc3 7a03 	vstr	s15, [r3, #12]

	 //measured
	  MeasuredAngle=H[0]*AccelAngle;
 8001878:	4b70      	ldr	r3, [pc, #448]	; (8001a3c <YKalmanFilter+0x2f0>)
 800187a:	ed93 7a00 	vldr	s14, [r3]
 800187e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001886:	4b6e      	ldr	r3, [pc, #440]	; (8001a40 <YKalmanFilter+0x2f4>)
 8001888:	edc3 7a00 	vstr	s15, [r3]

	  //kalman filter gain
	  K[0][0]=P[0][0]/(P[0][0]+R_K);
 800188c:	4b68      	ldr	r3, [pc, #416]	; (8001a30 <YKalmanFilter+0x2e4>)
 800188e:	edd3 6a00 	vldr	s13, [r3]
 8001892:	4b67      	ldr	r3, [pc, #412]	; (8001a30 <YKalmanFilter+0x2e4>)
 8001894:	ed93 7a00 	vldr	s14, [r3]
 8001898:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <YKalmanFilter+0x2f8>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018a6:	4b68      	ldr	r3, [pc, #416]	; (8001a48 <YKalmanFilter+0x2fc>)
 80018a8:	edc3 7a00 	vstr	s15, [r3]
	  K[1][0]=P[1][0]/(P[0][0]+R_K);
 80018ac:	4b60      	ldr	r3, [pc, #384]	; (8001a30 <YKalmanFilter+0x2e4>)
 80018ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80018b2:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <YKalmanFilter+0x2e4>)
 80018b4:	ed93 7a00 	vldr	s14, [r3]
 80018b8:	4b62      	ldr	r3, [pc, #392]	; (8001a44 <YKalmanFilter+0x2f8>)
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018c6:	4b60      	ldr	r3, [pc, #384]	; (8001a48 <YKalmanFilter+0x2fc>)
 80018c8:	edc3 7a01 	vstr	s15, [r3, #4]

	  //estimated result
	  PredictedAngle=PredictedAngle+K[0][0]*(MeasuredAngle-PredictedAngle);
 80018cc:	4b5e      	ldr	r3, [pc, #376]	; (8001a48 <YKalmanFilter+0x2fc>)
 80018ce:	ed93 7a00 	vldr	s14, [r3]
 80018d2:	4b5b      	ldr	r3, [pc, #364]	; (8001a40 <YKalmanFilter+0x2f4>)
 80018d4:	edd3 6a00 	vldr	s13, [r3]
 80018d8:	4b54      	ldr	r3, [pc, #336]	; (8001a2c <YKalmanFilter+0x2e0>)
 80018da:	edd3 7a00 	vldr	s15, [r3]
 80018de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e6:	4b51      	ldr	r3, [pc, #324]	; (8001a2c <YKalmanFilter+0x2e0>)
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f0:	4b4e      	ldr	r3, [pc, #312]	; (8001a2c <YKalmanFilter+0x2e0>)
 80018f2:	edc3 7a00 	vstr	s15, [r3]
	  PreditedBias=PreditedBias+K[1][0]*(MeasuredAngle-PredictedAngle);
 80018f6:	4b54      	ldr	r3, [pc, #336]	; (8001a48 <YKalmanFilter+0x2fc>)
 80018f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80018fc:	4b50      	ldr	r3, [pc, #320]	; (8001a40 <YKalmanFilter+0x2f4>)
 80018fe:	edd3 6a00 	vldr	s13, [r3]
 8001902:	4b4a      	ldr	r3, [pc, #296]	; (8001a2c <YKalmanFilter+0x2e0>)
 8001904:	edd3 7a00 	vldr	s15, [r3]
 8001908:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800190c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001910:	4b45      	ldr	r3, [pc, #276]	; (8001a28 <YKalmanFilter+0x2dc>)
 8001912:	edd3 7a00 	vldr	s15, [r3]
 8001916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191a:	4b43      	ldr	r3, [pc, #268]	; (8001a28 <YKalmanFilter+0x2dc>)
 800191c:	edc3 7a00 	vstr	s15, [r3]

	  double PrevP00=P[0][0],PrevP01=P[0][1];
 8001920:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <YKalmanFilter+0x2e4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fe2f 	bl	8000588 <__aeabi_f2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001932:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <YKalmanFilter+0x2e4>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fe26 	bl	8000588 <__aeabi_f2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  P[0][0]=P[0][0]*(1-K[0][0]);
 8001944:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <YKalmanFilter+0x2e4>)
 8001946:	ed93 7a00 	vldr	s14, [r3]
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <YKalmanFilter+0x2fc>)
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001954:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800195c:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <YKalmanFilter+0x2e4>)
 800195e:	edc3 7a00 	vstr	s15, [r3]
	  P[0][1]=P[0][1]*(1-K[0][0]);
 8001962:	4b33      	ldr	r3, [pc, #204]	; (8001a30 <YKalmanFilter+0x2e4>)
 8001964:	ed93 7a01 	vldr	s14, [r3, #4]
 8001968:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <YKalmanFilter+0x2fc>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001972:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197a:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <YKalmanFilter+0x2e4>)
 800197c:	edc3 7a01 	vstr	s15, [r3, #4]
	  P[1][0]=P[1][0]-K[1][0]*PrevP00;
 8001980:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <YKalmanFilter+0x2e4>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fdff 	bl	8000588 <__aeabi_f2d>
 800198a:	4604      	mov	r4, r0
 800198c:	460d      	mov	r5, r1
 800198e:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <YKalmanFilter+0x2fc>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdf8 	bl	8000588 <__aeabi_f2d>
 8001998:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800199c:	f7fe fe4c 	bl	8000638 <__aeabi_dmul>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4620      	mov	r0, r4
 80019a6:	4629      	mov	r1, r5
 80019a8:	f7fe fc8e 	bl	80002c8 <__aeabi_dsub>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff f918 	bl	8000be8 <__aeabi_d2f>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4a1d      	ldr	r2, [pc, #116]	; (8001a30 <YKalmanFilter+0x2e4>)
 80019bc:	6093      	str	r3, [r2, #8]
	  P[1][1]=P[1][1]-K[1][0]*PrevP01;
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <YKalmanFilter+0x2e4>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fde0 	bl	8000588 <__aeabi_f2d>
 80019c8:	4604      	mov	r4, r0
 80019ca:	460d      	mov	r5, r1
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <YKalmanFilter+0x2fc>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fdd9 	bl	8000588 <__aeabi_f2d>
 80019d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019da:	f7fe fe2d 	bl	8000638 <__aeabi_dmul>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4620      	mov	r0, r4
 80019e4:	4629      	mov	r1, r5
 80019e6:	f7fe fc6f 	bl	80002c8 <__aeabi_dsub>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	f7ff f8f9 	bl	8000be8 <__aeabi_d2f>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <YKalmanFilter+0x2e4>)
 80019fa:	60d3      	str	r3, [r2, #12]
	}
  dt_K=HAL_GetTick();
 80019fc:	f000 feb4 	bl	8002768 <HAL_GetTick>
 8001a00:	ee07 0a90 	vmov	s15, r0
 8001a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <YKalmanFilter+0x2d4>)
 8001a0a:	edc3 7a00 	vstr	s15, [r3]
  return PredictedAngle;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <YKalmanFilter+0x2e0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	ee07 3a90 	vmov	s15, r3

}
 8001a16:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a20:	20000030 	.word	0x20000030
 8001a24:	408f4000 	.word	0x408f4000
 8001a28:	2000027c 	.word	0x2000027c
 8001a2c:	20000280 	.word	0x20000280
 8001a30:	20000284 	.word	0x20000284
 8001a34:	20000034 	.word	0x20000034
 8001a38:	20000038 	.word	0x20000038
 8001a3c:	2000003c 	.word	0x2000003c
 8001a40:	20000294 	.word	0x20000294
 8001a44:	20000044 	.word	0x20000044
 8001a48:	20000298 	.word	0x20000298

08001a4c <PID_Init>:

static float KP=0,KD=0,KI=0;
static int32_t MinOutput,MaxOutput;

void PID_Init(float kp,float kd,float ki,int32_t MinOutputValue,int32_t MaxOutputValue)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	ed87 0a05 	vstr	s0, [r7, #20]
 8001a56:	edc7 0a04 	vstr	s1, [r7, #16]
 8001a5a:	ed87 1a03 	vstr	s2, [r7, #12]
 8001a5e:	60b8      	str	r0, [r7, #8]
 8001a60:	6079      	str	r1, [r7, #4]
	KP=kp;
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <PID_Init+0x40>)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	6013      	str	r3, [r2, #0]
	KD=kd;
 8001a68:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <PID_Init+0x44>)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	6013      	str	r3, [r2, #0]
	KI=ki;
 8001a6e:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <PID_Init+0x48>)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6013      	str	r3, [r2, #0]
	MinOutput=MinOutputValue;
 8001a74:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <PID_Init+0x4c>)
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	6013      	str	r3, [r2, #0]
	MaxOutput=MaxOutputValue;
 8001a7a:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <PID_Init+0x50>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	371c      	adds	r7, #28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	200002a0 	.word	0x200002a0
 8001a90:	200002a4 	.word	0x200002a4
 8001a94:	200002a8 	.word	0x200002a8
 8001a98:	200002ac 	.word	0x200002ac
 8001a9c:	200002b0 	.word	0x200002b0

08001aa0 <PID_Calc>:
*the Gyro value for the same axis is treated as if it is the rate of change of the error
	since it is equal to the rate of change of the angle
*Clamping method is used as an anti wind-up method
 ********************************************************************************************/
int32_t PID_Calc(float Angle,float GyroValue,uint32_t SampleTime_msec)
{
 8001aa0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	ed87 0a03 	vstr	s0, [r7, #12]
 8001aac:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ab0:	6078      	str	r0, [r7, #4]
	static uint8_t IntegrateFlag=1,ClampingSaturationFlag=0,ClampingSameSignFlag=0;
	static float IntegrationValue=0;

	float Output=0;
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

	if(IntegrateFlag)
 8001ab8:	4b5d      	ldr	r3, [pc, #372]	; (8001c30 <PID_Calc+0x190>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d02a      	beq.n	8001b16 <PID_Calc+0x76>
	{
		IntegrationValue+=(SampleTime_msec/1000.0)*Angle;
 8001ac0:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <PID_Calc+0x194>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fd5f 	bl	8000588 <__aeabi_f2d>
 8001aca:	4604      	mov	r4, r0
 8001acc:	460d      	mov	r5, r1
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7fe fd38 	bl	8000544 <__aeabi_ui2d>
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <PID_Calc+0x198>)
 8001ada:	f7fe fed7 	bl	800088c <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4690      	mov	r8, r2
 8001ae4:	4699      	mov	r9, r3
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f7fe fd4e 	bl	8000588 <__aeabi_f2d>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4640      	mov	r0, r8
 8001af2:	4649      	mov	r1, r9
 8001af4:	f7fe fda0 	bl	8000638 <__aeabi_dmul>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4620      	mov	r0, r4
 8001afe:	4629      	mov	r1, r5
 8001b00:	f7fe fbe4 	bl	80002cc <__adddf3>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7ff f86c 	bl	8000be8 <__aeabi_d2f>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4a48      	ldr	r2, [pc, #288]	; (8001c34 <PID_Calc+0x194>)
 8001b14:	6013      	str	r3, [r2, #0]
	}

	Output=KP*Angle+KD*GyroValue+KI*IntegrationValue;
 8001b16:	4b49      	ldr	r3, [pc, #292]	; (8001c3c <PID_Calc+0x19c>)
 8001b18:	ed93 7a00 	vldr	s14, [r3]
 8001b1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b24:	4b46      	ldr	r3, [pc, #280]	; (8001c40 <PID_Calc+0x1a0>)
 8001b26:	edd3 6a00 	vldr	s13, [r3]
 8001b2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b36:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <PID_Calc+0x1a4>)
 8001b38:	edd3 6a00 	vldr	s13, [r3]
 8001b3c:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <PID_Calc+0x194>)
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4a:	edc7 7a05 	vstr	s15, [r7, #20]

	if(Output>MaxOutput)
 8001b4e:	4b3e      	ldr	r3, [pc, #248]	; (8001c48 <PID_Calc+0x1a8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b66:	dd0b      	ble.n	8001b80 <PID_Calc+0xe0>
	{
		Output=MaxOutput;
 8001b68:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <PID_Calc+0x1a8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	ee07 3a90 	vmov	s15, r3
 8001b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b74:	edc7 7a05 	vstr	s15, [r7, #20]
		ClampingSaturationFlag=1;
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <PID_Calc+0x1ac>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
 8001b7e:	e01b      	b.n	8001bb8 <PID_Calc+0x118>
	}
	else if(Output<MinOutput)
 8001b80:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <PID_Calc+0x1b0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b8c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b98:	d50b      	bpl.n	8001bb2 <PID_Calc+0x112>
	{
		Output=MinOutput;
 8001b9a:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <PID_Calc+0x1b0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba6:	edc7 7a05 	vstr	s15, [r7, #20]
		ClampingSaturationFlag=1;
 8001baa:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <PID_Calc+0x1ac>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	e002      	b.n	8001bb8 <PID_Calc+0x118>
	}
	else
	{
		ClampingSaturationFlag=0;
 8001bb2:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <PID_Calc+0x1ac>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
	}
	//output sign is the same as the error sign
	ClampingSameSignFlag=(((Output>0)&&(Angle>0))||((Output<0)&&(Angle<0)))?1:0;
 8001bb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	dd06      	ble.n	8001bd4 <PID_Calc+0x134>
 8001bc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd2:	dc0d      	bgt.n	8001bf0 <PID_Calc+0x150>
 8001bd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be0:	d508      	bpl.n	8001bf4 <PID_Calc+0x154>
 8001be2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001be6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bee:	d501      	bpl.n	8001bf4 <PID_Calc+0x154>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <PID_Calc+0x156>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <PID_Calc+0x1b4>)
 8001bfa:	701a      	strb	r2, [r3, #0]

	IntegrateFlag=(ClampingSameSignFlag&&ClampingSaturationFlag)?0:1;
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <PID_Calc+0x1b4>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <PID_Calc+0x16c>
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <PID_Calc+0x1ac>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <PID_Calc+0x170>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <PID_Calc+0x172>
 8001c10:	2300      	movs	r3, #0
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <PID_Calc+0x190>)
 8001c16:	701a      	strb	r2, [r3, #0]

    return (int32_t)Output;
 8001c18:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c20:	ee17 3a90 	vmov	r3, s15

}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000048 	.word	0x20000048
 8001c34:	200002b4 	.word	0x200002b4
 8001c38:	408f4000 	.word	0x408f4000
 8001c3c:	200002a0 	.word	0x200002a0
 8001c40:	200002a4 	.word	0x200002a4
 8001c44:	200002a8 	.word	0x200002a8
 8001c48:	200002b0 	.word	0x200002b0
 8001c4c:	200002b8 	.word	0x200002b8
 8001c50:	200002ac 	.word	0x200002ac
 8001c54:	200002b9 	.word	0x200002b9

08001c58 <main>:
UART_HandleTypeDef huart2;

  /* USER CODE BEGIN 1 */
/**********************************************************************************************/
int main(void)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	ed2d 8b02 	vpush	{d8}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af02      	add	r7, sp, #8

	HAL_Init();
 8001c62:	f000 fd1b 	bl	800269c <HAL_Init>


	SystemClock_Config();
 8001c66:	f000 f8d1 	bl	8001e0c <SystemClock_Config>

	MX_GPIO_Init();
 8001c6a:	f000 f993 	bl	8001f94 <MX_GPIO_Init>
	MX_TIM3_Init();
 8001c6e:	f000 fa2f 	bl	80020d0 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8001c72:	f000 f965 	bl	8001f40 <MX_USART2_UART_Init>

	MPU_Init();
 8001c76:	f7ff f983 	bl	8000f80 <MPU_Init>
	//i used it once to calibrate then i used the calibration values
	//so i don't need to use it again
	// MPU_Calibrate();
	PID_Init(56.25,1.2,0.0325,-500,500);
 8001c7a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c7e:	4851      	ldr	r0, [pc, #324]	; (8001dc4 <main+0x16c>)
 8001c80:	ed9f 1a51 	vldr	s2, [pc, #324]	; 8001dc8 <main+0x170>
 8001c84:	eddf 0a51 	vldr	s1, [pc, #324]	; 8001dcc <main+0x174>
 8001c88:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001dd0 <main+0x178>
 8001c8c:	f7ff fede 	bl	8001a4c <PID_Init>

	//Initialize PWM
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c90:	2100      	movs	r1, #0
 8001c92:	4850      	ldr	r0, [pc, #320]	; (8001dd4 <main+0x17c>)
 8001c94:	f002 fdfe 	bl	8004894 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001c98:	2104      	movs	r1, #4
 8001c9a:	484e      	ldr	r0, [pc, #312]	; (8001dd4 <main+0x17c>)
 8001c9c:	f002 fdfa 	bl	8004894 <HAL_TIM_PWM_Start>
	//Set Motor driver enable pins
	HAL_GPIO_WritePin(Motor1EN_GPIO_Port,Motor1EN_Pin,GPIO_PIN_SET);
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	484c      	ldr	r0, [pc, #304]	; (8001dd8 <main+0x180>)
 8001ca6:	f001 f809 	bl	8002cbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2EN_GPIO_Port,Motor2EN_Pin,GPIO_PIN_SET);
 8001caa:	2201      	movs	r2, #1
 8001cac:	2102      	movs	r1, #2
 8001cae:	484a      	ldr	r0, [pc, #296]	; (8001dd8 <main+0x180>)
 8001cb0:	f001 f804 	bl	8002cbc <HAL_GPIO_WritePin>
	//Set Motor driver direction pins
	HAL_GPIO_WritePin(Motor1Dir1_GPIO_Port,Motor1Dir1_Pin,GPIO_PIN_SET);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cba:	4847      	ldr	r0, [pc, #284]	; (8001dd8 <main+0x180>)
 8001cbc:	f000 fffe 	bl	8002cbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1Dir2_GPIO_Port,Motor1Dir2_Pin,GPIO_PIN_RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cc6:	4844      	ldr	r0, [pc, #272]	; (8001dd8 <main+0x180>)
 8001cc8:	f000 fff8 	bl	8002cbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2Dir1_GPIO_Port,Motor2Dir1_Pin,GPIO_PIN_SET);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cd2:	4841      	ldr	r0, [pc, #260]	; (8001dd8 <main+0x180>)
 8001cd4:	f000 fff2 	bl	8002cbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2Dir2_GPIO_Port,Motor2Dir2_Pin,GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	483f      	ldr	r0, [pc, #252]	; (8001ddc <main+0x184>)
 8001cde:	f000 ffed 	bl	8002cbc <HAL_GPIO_WritePin>

	float AngleY,GyroY;
	int32_t PIDOutput=0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
	uint32_t start=HAL_GetTick();
 8001ce6:	f000 fd3f 	bl	8002768 <HAL_GetTick>
 8001cea:	60b8      	str	r0, [r7, #8]

	while (1)
	{

	   MPU_Read();
 8001cec:	f7ff f9b2 	bl	8001054 <MPU_Read>
       MPU_GetAngle(&AngleY,MPU_Y);
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fab7 	bl	8001268 <MPU_GetAngle>
       MPU_GetGYROValue(&GyroY,MPU_Y);
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff f9d4 	bl	80010ac <MPU_GetGYROValue>
       PIDOutput=PID_Calc(AngleY, GyroY,HAL_GetTick()-start);
 8001d04:	ed97 8a01 	vldr	s16, [r7, #4]
 8001d08:	edd7 8a00 	vldr	s17, [r7]
 8001d0c:	f000 fd2c 	bl	8002768 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	eef0 0a68 	vmov.f32	s1, s17
 8001d1c:	eeb0 0a48 	vmov.f32	s0, s16
 8001d20:	f7ff febe 	bl	8001aa0 <PID_Calc>
 8001d24:	60f8      	str	r0, [r7, #12]
       if(PIDOutput<0)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	da1a      	bge.n	8001d62 <main+0x10a>
       {
    		  HAL_GPIO_WritePin(Motor1Dir1_GPIO_Port,Motor1Dir1_Pin,GPIO_PIN_SET);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d32:	4829      	ldr	r0, [pc, #164]	; (8001dd8 <main+0x180>)
 8001d34:	f000 ffc2 	bl	8002cbc <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(Motor1Dir2_GPIO_Port,Motor1Dir2_Pin,GPIO_PIN_RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d3e:	4826      	ldr	r0, [pc, #152]	; (8001dd8 <main+0x180>)
 8001d40:	f000 ffbc 	bl	8002cbc <HAL_GPIO_WritePin>

    		  HAL_GPIO_WritePin(Motor2Dir1_GPIO_Port,Motor2Dir1_Pin,GPIO_PIN_SET);
 8001d44:	2201      	movs	r2, #1
 8001d46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d4a:	4823      	ldr	r0, [pc, #140]	; (8001dd8 <main+0x180>)
 8001d4c:	f000 ffb6 	bl	8002cbc <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(Motor2Dir2_GPIO_Port,Motor2Dir2_Pin,GPIO_PIN_RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2180      	movs	r1, #128	; 0x80
 8001d54:	4821      	ldr	r0, [pc, #132]	; (8001ddc <main+0x184>)
 8001d56:	f000 ffb1 	bl	8002cbc <HAL_GPIO_WritePin>
    		  PIDOutput=-PIDOutput;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	425b      	negs	r3, r3
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	e016      	b.n	8001d90 <main+0x138>
       }
       else
       {
    		  HAL_GPIO_WritePin(Motor1Dir1_GPIO_Port,Motor1Dir1_Pin,GPIO_PIN_RESET);
 8001d62:	2200      	movs	r2, #0
 8001d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d68:	481b      	ldr	r0, [pc, #108]	; (8001dd8 <main+0x180>)
 8001d6a:	f000 ffa7 	bl	8002cbc <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(Motor1Dir2_GPIO_Port,Motor1Dir2_Pin,GPIO_PIN_SET);
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d74:	4818      	ldr	r0, [pc, #96]	; (8001dd8 <main+0x180>)
 8001d76:	f000 ffa1 	bl	8002cbc <HAL_GPIO_WritePin>

    		  HAL_GPIO_WritePin(Motor2Dir1_GPIO_Port,Motor2Dir1_Pin,GPIO_PIN_RESET);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d80:	4815      	ldr	r0, [pc, #84]	; (8001dd8 <main+0x180>)
 8001d82:	f000 ff9b 	bl	8002cbc <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(Motor2Dir2_GPIO_Port,Motor2Dir2_Pin,GPIO_PIN_SET);
 8001d86:	2201      	movs	r2, #1
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	4814      	ldr	r0, [pc, #80]	; (8001ddc <main+0x184>)
 8001d8c:	f000 ff96 	bl	8002cbc <HAL_GPIO_WritePin>
       }
       TIM3->CCR1=(uint32_t)PIDOutput;
 8001d90:	4a13      	ldr	r2, [pc, #76]	; (8001de0 <main+0x188>)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6353      	str	r3, [r2, #52]	; 0x34
       TIM3->CCR2=(uint32_t)PIDOutput;
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <main+0x188>)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6393      	str	r3, [r2, #56]	; 0x38
       printf("%f,%f\r\n",AngleY,GyroY);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fbf2 	bl	8000588 <__aeabi_f2d>
 8001da4:	4604      	mov	r4, r0
 8001da6:	460d      	mov	r5, r1
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbec 	bl	8000588 <__aeabi_f2d>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	e9cd 2300 	strd	r2, r3, [sp]
 8001db8:	4622      	mov	r2, r4
 8001dba:	462b      	mov	r3, r5
 8001dbc:	4809      	ldr	r0, [pc, #36]	; (8001de4 <main+0x18c>)
 8001dbe:	f004 fb01 	bl	80063c4 <iprintf>
	   MPU_Read();
 8001dc2:	e793      	b.n	8001cec <main+0x94>
 8001dc4:	fffffe0c 	.word	0xfffffe0c
 8001dc8:	3d051eb8 	.word	0x3d051eb8
 8001dcc:	3f99999a 	.word	0x3f99999a
 8001dd0:	42610000 	.word	0x42610000
 8001dd4:	2000031c 	.word	0x2000031c
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	40020800 	.word	0x40020800
 8001de0:	40000400 	.word	0x40000400
 8001de4:	08008ba0 	.word	0x08008ba0

08001de8 <__io_putchar>:

}


int __io_putchar(int ch)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001df0:	1d39      	adds	r1, r7, #4
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
 8001df6:	2201      	movs	r2, #1
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <__io_putchar+0x20>)
 8001dfa:	f003 fb7e 	bl	80054fa <HAL_UART_Transmit>
  return ch;
 8001dfe:	687b      	ldr	r3, [r7, #4]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000364 	.word	0x20000364

08001e0c <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b094      	sub	sp, #80	; 0x50
 8001e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e12:	f107 031c 	add.w	r3, r7, #28
 8001e16:	2234      	movs	r2, #52	; 0x34
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 fe60 	bl	8005ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e30:	2300      	movs	r3, #0
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	4b29      	ldr	r3, [pc, #164]	; (8001edc <SystemClock_Config+0xd0>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	4a28      	ldr	r2, [pc, #160]	; (8001edc <SystemClock_Config+0xd0>)
 8001e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e40:	4b26      	ldr	r3, [pc, #152]	; (8001edc <SystemClock_Config+0xd0>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <SystemClock_Config+0xd4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e58:	4a21      	ldr	r2, [pc, #132]	; (8001ee0 <SystemClock_Config+0xd4>)
 8001e5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <SystemClock_Config+0xd4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e70:	2301      	movs	r3, #1
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e74:	2310      	movs	r3, #16
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e80:	2308      	movs	r3, #8
 8001e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8001e84:	235a      	movs	r3, #90	; 0x5a
 8001e86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e90:	2302      	movs	r3, #2
 8001e92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f002 f9b5 	bl	8004208 <HAL_RCC_OscConfig>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ea4:	f000 f90e 	bl	80020c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea8:	230f      	movs	r3, #15
 8001eaa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eac:	2302      	movs	r3, #2
 8001eae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ebe:	f107 0308 	add.w	r3, r7, #8
 8001ec2:	2102      	movs	r1, #2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f001 fed3 	bl	8003c70 <HAL_RCC_ClockConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001ed0:	f000 f8f8 	bl	80020c4 <Error_Handler>
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3750      	adds	r7, #80	; 0x50
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40007000 	.word	0x40007000

08001ee4 <MX_I2C1_Init>:


void MX_I2C1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001eea:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <MX_I2C1_Init+0x54>)
 8001eec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001ef0:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <MX_I2C1_Init+0x58>)
 8001ef2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f20:	4804      	ldr	r0, [pc, #16]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f22:	f000 fee5 	bl	8002cf0 <HAL_I2C_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f2c:	f000 f8ca 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200002c8 	.word	0x200002c8
 8001f38:	40005400 	.word	0x40005400
 8001f3c:	000186a0 	.word	0x000186a0

08001f40 <MX_USART2_UART_Init>:



void MX_USART2_UART_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <MX_USART2_UART_Init+0x50>)
 8001f48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f66:	2208      	movs	r2, #8
 8001f68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8001f76:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f78:	f003 fa6a 	bl	8005450 <HAL_HalfDuplex_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f82:	f000 f89f 	bl	80020c4 <Error_Handler>
  }


}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000364 	.word	0x20000364
 8001f90:	40004400 	.word	0x40004400

08001f94 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
 8001fa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	4b42      	ldr	r3, [pc, #264]	; (80020b8 <MX_GPIO_Init+0x124>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a41      	ldr	r2, [pc, #260]	; (80020b8 <MX_GPIO_Init+0x124>)
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b3f      	ldr	r3, [pc, #252]	; (80020b8 <MX_GPIO_Init+0x124>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <MX_GPIO_Init+0x124>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a3a      	ldr	r2, [pc, #232]	; (80020b8 <MX_GPIO_Init+0x124>)
 8001fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <MX_GPIO_Init+0x124>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <MX_GPIO_Init+0x124>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a33      	ldr	r2, [pc, #204]	; (80020b8 <MX_GPIO_Init+0x124>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <MX_GPIO_Init+0x124>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <MX_GPIO_Init+0x124>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a2c      	ldr	r2, [pc, #176]	; (80020b8 <MX_GPIO_Init+0x124>)
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <MX_GPIO_Init+0x124>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor1EN_Pin|Motor2EN_Pin|LD2_Pin|Motor1Dir1_Pin
 800201a:	2200      	movs	r2, #0
 800201c:	f240 7123 	movw	r1, #1827	; 0x723
 8002020:	4826      	ldr	r0, [pc, #152]	; (80020bc <MX_GPIO_Init+0x128>)
 8002022:	f000 fe4b 	bl	8002cbc <HAL_GPIO_WritePin>
                          |Motor1Dir2_Pin|Motor2Dir1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor2Dir2_GPIO_Port, Motor2Dir2_Pin, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	4825      	ldr	r0, [pc, #148]	; (80020c0 <MX_GPIO_Init+0x12c>)
 800202c:	f000 fe46 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002036:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800203a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	481e      	ldr	r0, [pc, #120]	; (80020c0 <MX_GPIO_Init+0x12c>)
 8002048:	f000 fca4 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor1EN_Pin Motor2EN_Pin LD2_Pin Motor1Dir1_Pin
                           Motor1Dir2_Pin Motor2Dir1_Pin */
  GPIO_InitStruct.Pin = Motor1EN_Pin|Motor2EN_Pin|LD2_Pin|Motor1Dir1_Pin
 800204c:	f240 7323 	movw	r3, #1827	; 0x723
 8002050:	617b      	str	r3, [r7, #20]
                          |Motor1Dir2_Pin|Motor2Dir1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002052:	2301      	movs	r3, #1
 8002054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	4815      	ldr	r0, [pc, #84]	; (80020bc <MX_GPIO_Init+0x128>)
 8002066:	f000 fc95 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor2Dir2_Pin */
  GPIO_InitStruct.Pin = Motor2Dir2_Pin;
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206e:	2301      	movs	r3, #1
 8002070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor2Dir2_GPIO_Port, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	480f      	ldr	r0, [pc, #60]	; (80020c0 <MX_GPIO_Init+0x12c>)
 8002082:	f000 fc87 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor2Dir2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800208a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208c:	2301      	movs	r3, #1
 800208e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4619      	mov	r1, r3
 800209e:	4808      	ldr	r0, [pc, #32]	; (80020c0 <MX_GPIO_Init+0x12c>)
 80020a0:	f000 fc78 	bl	8002994 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8, GPIO_PIN_SET);
 80020a4:	2201      	movs	r2, #1
 80020a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_GPIO_Init+0x12c>)
 80020ac:	f000 fe06 	bl	8002cbc <HAL_GPIO_WritePin>


}
 80020b0:	bf00      	nop
 80020b2:	3728      	adds	r7, #40	; 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40020000 	.word	0x40020000
 80020c0:	40020800 	.word	0x40020800

080020c4 <Error_Handler>:

void Error_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c8:	b672      	cpsid	i
}
 80020ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020cc:	e7fe      	b.n	80020cc <Error_Handler+0x8>
	...

080020d0 <MX_TIM3_Init>:
}



void MX_TIM3_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08e      	sub	sp, #56	; 0x38
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e4:	f107 0320 	add.w	r3, r7, #32
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
 80020fc:	615a      	str	r2, [r3, #20]
 80020fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  //500Hz= 90M/(2*500*(179+1))
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002100:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <MX_TIM3_Init+0x104>)
 8002102:	4a35      	ldr	r2, [pc, #212]	; (80021d8 <MX_TIM3_Init+0x108>)
 8002104:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 179;
 8002106:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <MX_TIM3_Init+0x104>)
 8002108:	22b3      	movs	r2, #179	; 0xb3
 800210a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800210c:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <MX_TIM3_Init+0x104>)
 800210e:	2260      	movs	r2, #96	; 0x60
 8002110:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 8002112:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <MX_TIM3_Init+0x104>)
 8002114:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002118:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211a:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <MX_TIM3_Init+0x104>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002120:	4b2c      	ldr	r3, [pc, #176]	; (80021d4 <MX_TIM3_Init+0x104>)
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002126:	482b      	ldr	r0, [pc, #172]	; (80021d4 <MX_TIM3_Init+0x104>)
 8002128:	f002 fb0c 	bl	8004744 <HAL_TIM_Base_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002132:	f7ff ffc7 	bl	80020c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800213c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002140:	4619      	mov	r1, r3
 8002142:	4824      	ldr	r0, [pc, #144]	; (80021d4 <MX_TIM3_Init+0x104>)
 8002144:	f002 fd30 	bl	8004ba8 <HAL_TIM_ConfigClockSource>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800214e:	f7ff ffb9 	bl	80020c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002152:	4820      	ldr	r0, [pc, #128]	; (80021d4 <MX_TIM3_Init+0x104>)
 8002154:	f002 fb45 	bl	80047e2 <HAL_TIM_PWM_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800215e:	f7ff ffb1 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800216a:	f107 0320 	add.w	r3, r7, #32
 800216e:	4619      	mov	r1, r3
 8002170:	4818      	ldr	r0, [pc, #96]	; (80021d4 <MX_TIM3_Init+0x104>)
 8002172:	f003 f8f1 	bl	8005358 <HAL_TIMEx_MasterConfigSynchronization>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800217c:	f7ff ffa2 	bl	80020c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002180:	2360      	movs	r3, #96	; 0x60
 8002182:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 400;
 8002184:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002188:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	2200      	movs	r2, #0
 8002196:	4619      	mov	r1, r3
 8002198:	480e      	ldr	r0, [pc, #56]	; (80021d4 <MX_TIM3_Init+0x104>)
 800219a:	f002 fc43 	bl	8004a24 <HAL_TIM_PWM_ConfigChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80021a4:	f7ff ff8e 	bl	80020c4 <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 80021a8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80021ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	2204      	movs	r2, #4
 80021b2:	4619      	mov	r1, r3
 80021b4:	4807      	ldr	r0, [pc, #28]	; (80021d4 <MX_TIM3_Init+0x104>)
 80021b6:	f002 fc35 	bl	8004a24 <HAL_TIM_PWM_ConfigChannel>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 80021c0:	f7ff ff80 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021c4:	4803      	ldr	r0, [pc, #12]	; (80021d4 <MX_TIM3_Init+0x104>)
 80021c6:	f000 f89b 	bl	8002300 <HAL_TIM_MspPostInit>

}
 80021ca:	bf00      	nop
 80021cc:	3738      	adds	r7, #56	; 0x38
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000031c 	.word	0x2000031c
 80021d8:	40000400 	.word	0x40000400

080021dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <HAL_MspInit+0x4c>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	4a0f      	ldr	r2, [pc, #60]	; (8002228 <HAL_MspInit+0x4c>)
 80021ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f0:	6453      	str	r3, [r2, #68]	; 0x44
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <HAL_MspInit+0x4c>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_MspInit+0x4c>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <HAL_MspInit+0x4c>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_MspInit+0x4c>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800221a:	2007      	movs	r0, #7
 800221c:	f000 fb86 	bl	800292c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40023800 	.word	0x40023800

0800222c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a19      	ldr	r2, [pc, #100]	; (80022b0 <HAL_I2C_MspInit+0x84>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d12c      	bne.n	80022a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_I2C_MspInit+0x88>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a17      	ldr	r2, [pc, #92]	; (80022b4 <HAL_I2C_MspInit+0x88>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_I2C_MspInit+0x88>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800226a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002270:	2312      	movs	r3, #18
 8002272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002278:	2303      	movs	r3, #3
 800227a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800227c:	2304      	movs	r3, #4
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	480c      	ldr	r0, [pc, #48]	; (80022b8 <HAL_I2C_MspInit+0x8c>)
 8002288:	f000 fb84 	bl	8002994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_I2C_MspInit+0x88>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <HAL_I2C_MspInit+0x88>)
 8002296:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800229a:	6413      	str	r3, [r2, #64]	; 0x40
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_I2C_MspInit+0x88>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022a8:	bf00      	nop
 80022aa:	3728      	adds	r7, #40	; 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40005400 	.word	0x40005400
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020400 	.word	0x40020400

080022bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <HAL_TIM_Base_MspInit+0x3c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d10d      	bne.n	80022ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_TIM_Base_MspInit+0x40>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <HAL_TIM_Base_MspInit+0x40>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	6413      	str	r3, [r2, #64]	; 0x40
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <HAL_TIM_Base_MspInit+0x40>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40023800 	.word	0x40023800

08002300 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a21      	ldr	r2, [pc, #132]	; (80023a4 <HAL_TIM_MspPostInit+0xa4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d13b      	bne.n	800239a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_TIM_MspPostInit+0xa8>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4a1f      	ldr	r2, [pc, #124]	; (80023a8 <HAL_TIM_MspPostInit+0xa8>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_TIM_MspPostInit+0xa8>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_TIM_MspPostInit+0xa8>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a18      	ldr	r2, [pc, #96]	; (80023a8 <HAL_TIM_MspPostInit+0xa8>)
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <HAL_TIM_MspPostInit+0xa8>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Motor2PWM_Pin;
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800236a:	2302      	movs	r3, #2
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor2PWM_GPIO_Port, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	480d      	ldr	r0, [pc, #52]	; (80023ac <HAL_TIM_MspPostInit+0xac>)
 8002376:	f000 fb0d 	bl	8002994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor1PWM_Pin;
 800237a:	2310      	movs	r3, #16
 800237c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800238a:	2302      	movs	r3, #2
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor1PWM_GPIO_Port, &GPIO_InitStruct);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	4806      	ldr	r0, [pc, #24]	; (80023b0 <HAL_TIM_MspPostInit+0xb0>)
 8002396:	f000 fafd 	bl	8002994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800239a:	bf00      	nop
 800239c:	3728      	adds	r7, #40	; 0x28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40000400 	.word	0x40000400
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020000 	.word	0x40020000
 80023b0:	40020400 	.word	0x40020400

080023b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a19      	ldr	r2, [pc, #100]	; (8002438 <HAL_UART_MspInit+0x84>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d12b      	bne.n	800242e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	4b18      	ldr	r3, [pc, #96]	; (800243c <HAL_UART_MspInit+0x88>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a17      	ldr	r2, [pc, #92]	; (800243c <HAL_UART_MspInit+0x88>)
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <HAL_UART_MspInit+0x88>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_UART_MspInit+0x88>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a10      	ldr	r2, [pc, #64]	; (800243c <HAL_UART_MspInit+0x88>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <HAL_UART_MspInit+0x88>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin;
 800240e:	2304      	movs	r3, #4
 8002410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002412:	2312      	movs	r3, #18
 8002414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241a:	2303      	movs	r3, #3
 800241c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800241e:	2307      	movs	r3, #7
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4619      	mov	r1, r3
 8002428:	4805      	ldr	r0, [pc, #20]	; (8002440 <HAL_UART_MspInit+0x8c>)
 800242a:	f000 fab3 	bl	8002994 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800242e:	bf00      	nop
 8002430:	3728      	adds	r7, #40	; 0x28
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40004400 	.word	0x40004400
 800243c:	40023800 	.word	0x40023800
 8002440:	40020000 	.word	0x40020000

08002444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <NMI_Handler+0x4>

0800244a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244e:	e7fe      	b.n	800244e <HardFault_Handler+0x4>

08002450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <MemManage_Handler+0x4>

08002456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <BusFault_Handler+0x4>

0800245c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <UsageFault_Handler+0x4>

08002462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002490:	f000 f956 	bl	8002740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}

08002498 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
	return 1;
 800249c:	2301      	movs	r3, #1
}
 800249e:	4618      	mov	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <_kill>:

int _kill(int pid, int sig)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024b2:	f003 faeb 	bl	8005a8c <__errno>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2216      	movs	r2, #22
 80024ba:	601a      	str	r2, [r3, #0]
	return -1;
 80024bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_exit>:

void _exit (int status)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024d0:	f04f 31ff 	mov.w	r1, #4294967295
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ffe7 	bl	80024a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024da:	e7fe      	b.n	80024da <_exit+0x12>

080024dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	e00a      	b.n	8002504 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024ee:	f3af 8000 	nop.w
 80024f2:	4601      	mov	r1, r0
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	60ba      	str	r2, [r7, #8]
 80024fa:	b2ca      	uxtb	r2, r1
 80024fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3301      	adds	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	429a      	cmp	r2, r3
 800250a:	dbf0      	blt.n	80024ee <_read+0x12>
	}

return len;
 800250c:	687b      	ldr	r3, [r7, #4]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	e009      	b.n	800253c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	60ba      	str	r2, [r7, #8]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fc59 	bl	8001de8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3301      	adds	r3, #1
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	429a      	cmp	r2, r3
 8002542:	dbf1      	blt.n	8002528 <_write+0x12>
	}
	return len;
 8002544:	687b      	ldr	r3, [r7, #4]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <_close>:

int _close(int file)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
	return -1;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002576:	605a      	str	r2, [r3, #4]
	return 0;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <_isatty>:

int _isatty(int file)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
	return 1;
 800258e:	2301      	movs	r3, #1
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
	return 0;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c0:	4a14      	ldr	r2, [pc, #80]	; (8002614 <_sbrk+0x5c>)
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <_sbrk+0x60>)
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025cc:	4b13      	ldr	r3, [pc, #76]	; (800261c <_sbrk+0x64>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <_sbrk+0x64>)
 80025d6:	4a12      	ldr	r2, [pc, #72]	; (8002620 <_sbrk+0x68>)
 80025d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d207      	bcs.n	80025f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025e8:	f003 fa50 	bl	8005a8c <__errno>
 80025ec:	4603      	mov	r3, r0
 80025ee:	220c      	movs	r2, #12
 80025f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	e009      	b.n	800260c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <_sbrk+0x64>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <_sbrk+0x64>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	4a05      	ldr	r2, [pc, #20]	; (800261c <_sbrk+0x64>)
 8002608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800260a:	68fb      	ldr	r3, [r7, #12]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20020000 	.word	0x20020000
 8002618:	00000400 	.word	0x00000400
 800261c:	200002bc 	.word	0x200002bc
 8002620:	200003c0 	.word	0x200003c0

08002624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <SystemInit+0x20>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	4a05      	ldr	r2, [pc, #20]	; (8002644 <SystemInit+0x20>)
 8002630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002680 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800264c:	480d      	ldr	r0, [pc, #52]	; (8002684 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800264e:	490e      	ldr	r1, [pc, #56]	; (8002688 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002650:	4a0e      	ldr	r2, [pc, #56]	; (800268c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002654:	e002      	b.n	800265c <LoopCopyDataInit>

08002656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265a:	3304      	adds	r3, #4

0800265c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800265c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800265e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002660:	d3f9      	bcc.n	8002656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002662:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002664:	4c0b      	ldr	r4, [pc, #44]	; (8002694 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002668:	e001      	b.n	800266e <LoopFillZerobss>

0800266a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800266c:	3204      	adds	r2, #4

0800266e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800266e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002670:	d3fb      	bcc.n	800266a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002672:	f7ff ffd7 	bl	8002624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002676:	f003 fa0f 	bl	8005a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800267a:	f7ff faed 	bl	8001c58 <main>
  bx  lr    
 800267e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002688:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 800268c:	08009028 	.word	0x08009028
  ldr r2, =_sbss
 8002690:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8002694:	200003bc 	.word	0x200003bc

08002698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002698:	e7fe      	b.n	8002698 <ADC_IRQHandler>
	...

0800269c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <HAL_Init+0x40>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0d      	ldr	r2, [pc, #52]	; (80026dc <HAL_Init+0x40>)
 80026a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_Init+0x40>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <HAL_Init+0x40>)
 80026b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a07      	ldr	r2, [pc, #28]	; (80026dc <HAL_Init+0x40>)
 80026be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c4:	2003      	movs	r0, #3
 80026c6:	f000 f931 	bl	800292c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ca:	2000      	movs	r0, #0
 80026cc:	f000 f808 	bl	80026e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026d0:	f7ff fd84 	bl	80021dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023c00 	.word	0x40023c00

080026e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_InitTick+0x54>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_InitTick+0x58>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f93b 	bl	800297a <HAL_SYSTICK_Config>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e00e      	b.n	800272c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b0f      	cmp	r3, #15
 8002712:	d80a      	bhi.n	800272a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002714:	2200      	movs	r2, #0
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	f000 f911 	bl	8002942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002720:	4a06      	ldr	r2, [pc, #24]	; (800273c <HAL_InitTick+0x5c>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	e000      	b.n	800272c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	2000004c 	.word	0x2000004c
 8002738:	20000054 	.word	0x20000054
 800273c:	20000050 	.word	0x20000050

08002740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_IncTick+0x20>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_IncTick+0x24>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4413      	add	r3, r2
 8002750:	4a04      	ldr	r2, [pc, #16]	; (8002764 <HAL_IncTick+0x24>)
 8002752:	6013      	str	r3, [r2, #0]
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000054 	.word	0x20000054
 8002764:	200003a8 	.word	0x200003a8

08002768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return uwTick;
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_GetTick+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	200003a8 	.word	0x200003a8

08002780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002788:	f7ff ffee 	bl	8002768 <HAL_GetTick>
 800278c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002798:	d005      	beq.n	80027a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <HAL_Delay+0x44>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027a6:	bf00      	nop
 80027a8:	f7ff ffde 	bl	8002768 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d8f7      	bhi.n	80027a8 <HAL_Delay+0x28>
  {
  }
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000054 	.word	0x20000054

080027c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <__NVIC_SetPriorityGrouping+0x44>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e4:	4013      	ands	r3, r2
 80027e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fa:	4a04      	ldr	r2, [pc, #16]	; (800280c <__NVIC_SetPriorityGrouping+0x44>)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	60d3      	str	r3, [r2, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <__NVIC_GetPriorityGrouping+0x18>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	0a1b      	lsrs	r3, r3, #8
 800281a:	f003 0307 	and.w	r3, r3, #7
}
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	2b00      	cmp	r3, #0
 800283e:	db0a      	blt.n	8002856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	490c      	ldr	r1, [pc, #48]	; (8002878 <__NVIC_SetPriority+0x4c>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	440b      	add	r3, r1
 8002850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002854:	e00a      	b.n	800286c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4908      	ldr	r1, [pc, #32]	; (800287c <__NVIC_SetPriority+0x50>)
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	3b04      	subs	r3, #4
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	440b      	add	r3, r1
 800286a:	761a      	strb	r2, [r3, #24]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f1c3 0307 	rsb	r3, r3, #7
 800289a:	2b04      	cmp	r3, #4
 800289c:	bf28      	it	cs
 800289e:	2304      	movcs	r3, #4
 80028a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3304      	adds	r3, #4
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d902      	bls.n	80028b0 <NVIC_EncodePriority+0x30>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3b03      	subs	r3, #3
 80028ae:	e000      	b.n	80028b2 <NVIC_EncodePriority+0x32>
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43d9      	mvns	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	4313      	orrs	r3, r2
         );
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f8:	d301      	bcc.n	80028fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00f      	b.n	800291e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028fe:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <SysTick_Config+0x40>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002906:	210f      	movs	r1, #15
 8002908:	f04f 30ff 	mov.w	r0, #4294967295
 800290c:	f7ff ff8e 	bl	800282c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <SysTick_Config+0x40>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002916:	4b04      	ldr	r3, [pc, #16]	; (8002928 <SysTick_Config+0x40>)
 8002918:	2207      	movs	r2, #7
 800291a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	e000e010 	.word	0xe000e010

0800292c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ff47 	bl	80027c8 <__NVIC_SetPriorityGrouping>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	4603      	mov	r3, r0
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002954:	f7ff ff5c 	bl	8002810 <__NVIC_GetPriorityGrouping>
 8002958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	6978      	ldr	r0, [r7, #20]
 8002960:	f7ff ff8e 	bl	8002880 <NVIC_EncodePriority>
 8002964:	4602      	mov	r2, r0
 8002966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff5d 	bl	800282c <__NVIC_SetPriority>
}
 8002972:	bf00      	nop
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ffb0 	bl	80028e8 <SysTick_Config>
 8002988:	4603      	mov	r3, r0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	e165      	b.n	8002c7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029b0:	2201      	movs	r2, #1
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	f040 8154 	bne.w	8002c76 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d005      	beq.n	80029e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d130      	bne.n	8002a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	2203      	movs	r2, #3
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 0201 	and.w	r2, r3, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d017      	beq.n	8002a84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d123      	bne.n	8002ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	08da      	lsrs	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3208      	adds	r2, #8
 8002a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	08da      	lsrs	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3208      	adds	r2, #8
 8002ad2:	69b9      	ldr	r1, [r7, #24]
 8002ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0203 	and.w	r2, r3, #3
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80ae 	beq.w	8002c76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4b5d      	ldr	r3, [pc, #372]	; (8002c94 <HAL_GPIO_Init+0x300>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	4a5c      	ldr	r2, [pc, #368]	; (8002c94 <HAL_GPIO_Init+0x300>)
 8002b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b28:	6453      	str	r3, [r2, #68]	; 0x44
 8002b2a:	4b5a      	ldr	r3, [pc, #360]	; (8002c94 <HAL_GPIO_Init+0x300>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b36:	4a58      	ldr	r2, [pc, #352]	; (8002c98 <HAL_GPIO_Init+0x304>)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4f      	ldr	r2, [pc, #316]	; (8002c9c <HAL_GPIO_Init+0x308>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d025      	beq.n	8002bae <HAL_GPIO_Init+0x21a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4e      	ldr	r2, [pc, #312]	; (8002ca0 <HAL_GPIO_Init+0x30c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d01f      	beq.n	8002baa <HAL_GPIO_Init+0x216>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4d      	ldr	r2, [pc, #308]	; (8002ca4 <HAL_GPIO_Init+0x310>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d019      	beq.n	8002ba6 <HAL_GPIO_Init+0x212>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4c      	ldr	r2, [pc, #304]	; (8002ca8 <HAL_GPIO_Init+0x314>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <HAL_GPIO_Init+0x20e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4b      	ldr	r2, [pc, #300]	; (8002cac <HAL_GPIO_Init+0x318>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00d      	beq.n	8002b9e <HAL_GPIO_Init+0x20a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4a      	ldr	r2, [pc, #296]	; (8002cb0 <HAL_GPIO_Init+0x31c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d007      	beq.n	8002b9a <HAL_GPIO_Init+0x206>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a49      	ldr	r2, [pc, #292]	; (8002cb4 <HAL_GPIO_Init+0x320>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <HAL_GPIO_Init+0x202>
 8002b92:	2306      	movs	r3, #6
 8002b94:	e00c      	b.n	8002bb0 <HAL_GPIO_Init+0x21c>
 8002b96:	2307      	movs	r3, #7
 8002b98:	e00a      	b.n	8002bb0 <HAL_GPIO_Init+0x21c>
 8002b9a:	2305      	movs	r3, #5
 8002b9c:	e008      	b.n	8002bb0 <HAL_GPIO_Init+0x21c>
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	e006      	b.n	8002bb0 <HAL_GPIO_Init+0x21c>
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e004      	b.n	8002bb0 <HAL_GPIO_Init+0x21c>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e002      	b.n	8002bb0 <HAL_GPIO_Init+0x21c>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_GPIO_Init+0x21c>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	f002 0203 	and.w	r2, r2, #3
 8002bb6:	0092      	lsls	r2, r2, #2
 8002bb8:	4093      	lsls	r3, r2
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc0:	4935      	ldr	r1, [pc, #212]	; (8002c98 <HAL_GPIO_Init+0x304>)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bce:	4b3a      	ldr	r3, [pc, #232]	; (8002cb8 <HAL_GPIO_Init+0x324>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf2:	4a31      	ldr	r2, [pc, #196]	; (8002cb8 <HAL_GPIO_Init+0x324>)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bf8:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <HAL_GPIO_Init+0x324>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c1c:	4a26      	ldr	r2, [pc, #152]	; (8002cb8 <HAL_GPIO_Init+0x324>)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c22:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <HAL_GPIO_Init+0x324>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c46:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <HAL_GPIO_Init+0x324>)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <HAL_GPIO_Init+0x324>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c70:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <HAL_GPIO_Init+0x324>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2b0f      	cmp	r3, #15
 8002c80:	f67f ae96 	bls.w	80029b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	3724      	adds	r7, #36	; 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40013800 	.word	0x40013800
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	40020400 	.word	0x40020400
 8002ca4:	40020800 	.word	0x40020800
 8002ca8:	40020c00 	.word	0x40020c00
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40021400 	.word	0x40021400
 8002cb4:	40021800 	.word	0x40021800
 8002cb8:	40013c00 	.word	0x40013c00

08002cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ccc:	787b      	ldrb	r3, [r7, #1]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cd8:	e003      	b.n	8002ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	041a      	lsls	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	619a      	str	r2, [r3, #24]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e12b      	b.n	8002f5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff fa88 	bl	800222c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2224      	movs	r2, #36	; 0x24
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d54:	f001 f87e 	bl	8003e54 <HAL_RCC_GetPCLK1Freq>
 8002d58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4a81      	ldr	r2, [pc, #516]	; (8002f64 <HAL_I2C_Init+0x274>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d807      	bhi.n	8002d74 <HAL_I2C_Init+0x84>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a80      	ldr	r2, [pc, #512]	; (8002f68 <HAL_I2C_Init+0x278>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	bf94      	ite	ls
 8002d6c:	2301      	movls	r3, #1
 8002d6e:	2300      	movhi	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e006      	b.n	8002d82 <HAL_I2C_Init+0x92>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4a7d      	ldr	r2, [pc, #500]	; (8002f6c <HAL_I2C_Init+0x27c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	bf94      	ite	ls
 8002d7c:	2301      	movls	r3, #1
 8002d7e:	2300      	movhi	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e0e7      	b.n	8002f5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a78      	ldr	r2, [pc, #480]	; (8002f70 <HAL_I2C_Init+0x280>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	0c9b      	lsrs	r3, r3, #18
 8002d94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a6a      	ldr	r2, [pc, #424]	; (8002f64 <HAL_I2C_Init+0x274>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d802      	bhi.n	8002dc4 <HAL_I2C_Init+0xd4>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	e009      	b.n	8002dd8 <HAL_I2C_Init+0xe8>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	4a69      	ldr	r2, [pc, #420]	; (8002f74 <HAL_I2C_Init+0x284>)
 8002dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	495c      	ldr	r1, [pc, #368]	; (8002f64 <HAL_I2C_Init+0x274>)
 8002df4:	428b      	cmp	r3, r1
 8002df6:	d819      	bhi.n	8002e2c <HAL_I2C_Init+0x13c>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	1e59      	subs	r1, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e06:	1c59      	adds	r1, r3, #1
 8002e08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e0c:	400b      	ands	r3, r1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_I2C_Init+0x138>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1e59      	subs	r1, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e20:	3301      	adds	r3, #1
 8002e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e26:	e051      	b.n	8002ecc <HAL_I2C_Init+0x1dc>
 8002e28:	2304      	movs	r3, #4
 8002e2a:	e04f      	b.n	8002ecc <HAL_I2C_Init+0x1dc>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d111      	bne.n	8002e58 <HAL_I2C_Init+0x168>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1e58      	subs	r0, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	440b      	add	r3, r1
 8002e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	e012      	b.n	8002e7e <HAL_I2C_Init+0x18e>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1e58      	subs	r0, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6859      	ldr	r1, [r3, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	0099      	lsls	r1, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e6e:	3301      	adds	r3, #1
 8002e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf0c      	ite	eq
 8002e78:	2301      	moveq	r3, #1
 8002e7a:	2300      	movne	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_I2C_Init+0x196>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e022      	b.n	8002ecc <HAL_I2C_Init+0x1dc>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10e      	bne.n	8002eac <HAL_I2C_Init+0x1bc>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1e58      	subs	r0, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6859      	ldr	r1, [r3, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	440b      	add	r3, r1
 8002e9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eaa:	e00f      	b.n	8002ecc <HAL_I2C_Init+0x1dc>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1e58      	subs	r0, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6859      	ldr	r1, [r3, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	0099      	lsls	r1, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	6809      	ldr	r1, [r1, #0]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69da      	ldr	r2, [r3, #28]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002efa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6911      	ldr	r1, [r2, #16]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68d2      	ldr	r2, [r2, #12]
 8002f06:	4311      	orrs	r1, r2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	000186a0 	.word	0x000186a0
 8002f68:	001e847f 	.word	0x001e847f
 8002f6c:	003d08ff 	.word	0x003d08ff
 8002f70:	431bde83 	.word	0x431bde83
 8002f74:	10624dd3 	.word	0x10624dd3

08002f78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	4608      	mov	r0, r1
 8002f82:	4611      	mov	r1, r2
 8002f84:	461a      	mov	r2, r3
 8002f86:	4603      	mov	r3, r0
 8002f88:	817b      	strh	r3, [r7, #10]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	813b      	strh	r3, [r7, #8]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f92:	f7ff fbe9 	bl	8002768 <HAL_GetTick>
 8002f96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	f040 80d9 	bne.w	8003158 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	2319      	movs	r3, #25
 8002fac:	2201      	movs	r2, #1
 8002fae:	496d      	ldr	r1, [pc, #436]	; (8003164 <HAL_I2C_Mem_Write+0x1ec>)
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 fc7f 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e0cc      	b.n	800315a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_I2C_Mem_Write+0x56>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e0c5      	b.n	800315a <HAL_I2C_Mem_Write+0x1e2>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d007      	beq.n	8002ff4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003002:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2221      	movs	r2, #33	; 0x21
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2240      	movs	r2, #64	; 0x40
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a3a      	ldr	r2, [r7, #32]
 800301e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003024:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a4d      	ldr	r2, [pc, #308]	; (8003168 <HAL_I2C_Mem_Write+0x1f0>)
 8003034:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003036:	88f8      	ldrh	r0, [r7, #6]
 8003038:	893a      	ldrh	r2, [r7, #8]
 800303a:	8979      	ldrh	r1, [r7, #10]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	4603      	mov	r3, r0
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fab6 	bl	80035b8 <I2C_RequestMemoryWrite>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d052      	beq.n	80030f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e081      	b.n	800315a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fd00 	bl	8003a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00d      	beq.n	8003082 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	2b04      	cmp	r3, #4
 800306c:	d107      	bne.n	800307e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e06b      	b.n	800315a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	781a      	ldrb	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d11b      	bne.n	80030f8 <HAL_I2C_Mem_Write+0x180>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d017      	beq.n	80030f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	781a      	ldrb	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1aa      	bne.n	8003056 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fcec 	bl	8003ae2 <I2C_WaitOnBTFFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00d      	beq.n	800312c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	2b04      	cmp	r3, #4
 8003116:	d107      	bne.n	8003128 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003126:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e016      	b.n	800315a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	e000      	b.n	800315a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003158:	2302      	movs	r3, #2
  }
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	00100002 	.word	0x00100002
 8003168:	ffff0000 	.word	0xffff0000

0800316c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08c      	sub	sp, #48	; 0x30
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	4608      	mov	r0, r1
 8003176:	4611      	mov	r1, r2
 8003178:	461a      	mov	r2, r3
 800317a:	4603      	mov	r3, r0
 800317c:	817b      	strh	r3, [r7, #10]
 800317e:	460b      	mov	r3, r1
 8003180:	813b      	strh	r3, [r7, #8]
 8003182:	4613      	mov	r3, r2
 8003184:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003186:	f7ff faef 	bl	8002768 <HAL_GetTick>
 800318a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b20      	cmp	r3, #32
 8003196:	f040 8208 	bne.w	80035aa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	2319      	movs	r3, #25
 80031a0:	2201      	movs	r2, #1
 80031a2:	497b      	ldr	r1, [pc, #492]	; (8003390 <HAL_I2C_Mem_Read+0x224>)
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 fb85 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
 80031b2:	e1fb      	b.n	80035ac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_I2C_Mem_Read+0x56>
 80031be:	2302      	movs	r3, #2
 80031c0:	e1f4      	b.n	80035ac <HAL_I2C_Mem_Read+0x440>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d007      	beq.n	80031e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2222      	movs	r2, #34	; 0x22
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2240      	movs	r2, #64	; 0x40
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003212:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003218:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4a5b      	ldr	r2, [pc, #364]	; (8003394 <HAL_I2C_Mem_Read+0x228>)
 8003228:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800322a:	88f8      	ldrh	r0, [r7, #6]
 800322c:	893a      	ldrh	r2, [r7, #8]
 800322e:	8979      	ldrh	r1, [r7, #10]
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	4603      	mov	r3, r0
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fa52 	bl	80036e4 <I2C_RequestMemoryRead>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e1b0      	b.n	80035ac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324e:	2b00      	cmp	r3, #0
 8003250:	d113      	bne.n	800327a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003252:	2300      	movs	r3, #0
 8003254:	623b      	str	r3, [r7, #32]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	623b      	str	r3, [r7, #32]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	623b      	str	r3, [r7, #32]
 8003266:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e184      	b.n	8003584 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327e:	2b01      	cmp	r3, #1
 8003280:	d11b      	bne.n	80032ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003290:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	61fb      	str	r3, [r7, #28]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	e164      	b.n	8003584 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d11b      	bne.n	80032fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	e144      	b.n	8003584 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003310:	e138      	b.n	8003584 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003316:	2b03      	cmp	r3, #3
 8003318:	f200 80f1 	bhi.w	80034fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003320:	2b01      	cmp	r3, #1
 8003322:	d123      	bne.n	800336c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003326:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fc1b 	bl	8003b64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e139      	b.n	80035ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	855a      	strh	r2, [r3, #42]	; 0x2a
 800336a:	e10b      	b.n	8003584 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	2b02      	cmp	r3, #2
 8003372:	d14e      	bne.n	8003412 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	2200      	movs	r2, #0
 800337c:	4906      	ldr	r1, [pc, #24]	; (8003398 <HAL_I2C_Mem_Read+0x22c>)
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fa98 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e10e      	b.n	80035ac <HAL_I2C_Mem_Read+0x440>
 800338e:	bf00      	nop
 8003390:	00100002 	.word	0x00100002
 8003394:	ffff0000 	.word	0xffff0000
 8003398:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003410:	e0b8      	b.n	8003584 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	2200      	movs	r2, #0
 800341a:	4966      	ldr	r1, [pc, #408]	; (80035b4 <HAL_I2C_Mem_Read+0x448>)
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 fa49 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0bf      	b.n	80035ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003474:	2200      	movs	r2, #0
 8003476:	494f      	ldr	r1, [pc, #316]	; (80035b4 <HAL_I2C_Mem_Read+0x448>)
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fa1b 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e091      	b.n	80035ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034fc:	e042      	b.n	8003584 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003500:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fb2e 	bl	8003b64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e04c      	b.n	80035ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b04      	cmp	r3, #4
 8003550:	d118      	bne.n	8003584 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003588:	2b00      	cmp	r3, #0
 800358a:	f47f aec2 	bne.w	8003312 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e000      	b.n	80035ac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
  }
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3728      	adds	r7, #40	; 0x28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	00010004 	.word	0x00010004

080035b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	4608      	mov	r0, r1
 80035c2:	4611      	mov	r1, r2
 80035c4:	461a      	mov	r2, r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	817b      	strh	r3, [r7, #10]
 80035ca:	460b      	mov	r3, r1
 80035cc:	813b      	strh	r3, [r7, #8]
 80035ce:	4613      	mov	r3, r2
 80035d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f960 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00d      	beq.n	8003616 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003608:	d103      	bne.n	8003612 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e05f      	b.n	80036d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003616:	897b      	ldrh	r3, [r7, #10]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003624:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	6a3a      	ldr	r2, [r7, #32]
 800362a:	492d      	ldr	r1, [pc, #180]	; (80036e0 <I2C_RequestMemoryWrite+0x128>)
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f998 	bl	8003962 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e04c      	b.n	80036d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003654:	6a39      	ldr	r1, [r7, #32]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fa02 	bl	8003a60 <I2C_WaitOnTXEFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00d      	beq.n	800367e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	2b04      	cmp	r3, #4
 8003668:	d107      	bne.n	800367a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003678:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e02b      	b.n	80036d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d105      	bne.n	8003690 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003684:	893b      	ldrh	r3, [r7, #8]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	611a      	str	r2, [r3, #16]
 800368e:	e021      	b.n	80036d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003690:	893b      	ldrh	r3, [r7, #8]
 8003692:	0a1b      	lsrs	r3, r3, #8
 8003694:	b29b      	uxth	r3, r3
 8003696:	b2da      	uxtb	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800369e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a0:	6a39      	ldr	r1, [r7, #32]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f9dc 	bl	8003a60 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00d      	beq.n	80036ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d107      	bne.n	80036c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e005      	b.n	80036d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036ca:	893b      	ldrh	r3, [r7, #8]
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	00010002 	.word	0x00010002

080036e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	4608      	mov	r0, r1
 80036ee:	4611      	mov	r1, r2
 80036f0:	461a      	mov	r2, r3
 80036f2:	4603      	mov	r3, r0
 80036f4:	817b      	strh	r3, [r7, #10]
 80036f6:	460b      	mov	r3, r1
 80036f8:	813b      	strh	r3, [r7, #8]
 80036fa:	4613      	mov	r3, r2
 80036fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800370c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800371c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	2200      	movs	r2, #0
 8003726:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f8c2 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00d      	beq.n	8003752 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003744:	d103      	bne.n	800374e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e0aa      	b.n	80038a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003752:	897b      	ldrh	r3, [r7, #10]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003760:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	6a3a      	ldr	r2, [r7, #32]
 8003766:	4952      	ldr	r1, [pc, #328]	; (80038b0 <I2C_RequestMemoryRead+0x1cc>)
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f8fa 	bl	8003962 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e097      	b.n	80038a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800378e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003790:	6a39      	ldr	r1, [r7, #32]
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f964 	bl	8003a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00d      	beq.n	80037ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d107      	bne.n	80037b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e076      	b.n	80038a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d105      	bne.n	80037cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037c0:	893b      	ldrh	r3, [r7, #8]
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	611a      	str	r2, [r3, #16]
 80037ca:	e021      	b.n	8003810 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037cc:	893b      	ldrh	r3, [r7, #8]
 80037ce:	0a1b      	lsrs	r3, r3, #8
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037dc:	6a39      	ldr	r1, [r7, #32]
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f93e 	bl	8003a60 <I2C_WaitOnTXEFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00d      	beq.n	8003806 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d107      	bne.n	8003802 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003800:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e050      	b.n	80038a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003806:	893b      	ldrh	r3, [r7, #8]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003812:	6a39      	ldr	r1, [r7, #32]
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f923 	bl	8003a60 <I2C_WaitOnTXEFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00d      	beq.n	800383c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	2b04      	cmp	r3, #4
 8003826:	d107      	bne.n	8003838 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003836:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e035      	b.n	80038a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800384a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	2200      	movs	r2, #0
 8003854:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f82b 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00d      	beq.n	8003880 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003872:	d103      	bne.n	800387c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800387a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e013      	b.n	80038a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003880:	897b      	ldrh	r3, [r7, #10]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	b2da      	uxtb	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	6a3a      	ldr	r2, [r7, #32]
 8003894:	4906      	ldr	r1, [pc, #24]	; (80038b0 <I2C_RequestMemoryRead+0x1cc>)
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f863 	bl	8003962 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	00010002 	.word	0x00010002

080038b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c4:	e025      	b.n	8003912 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d021      	beq.n	8003912 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ce:	f7fe ff4b 	bl	8002768 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d302      	bcc.n	80038e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d116      	bne.n	8003912 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f043 0220 	orr.w	r2, r3, #32
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e023      	b.n	800395a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	0c1b      	lsrs	r3, r3, #16
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	d10d      	bne.n	8003938 <I2C_WaitOnFlagUntilTimeout+0x84>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	43da      	mvns	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4013      	ands	r3, r2
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	bf0c      	ite	eq
 800392e:	2301      	moveq	r3, #1
 8003930:	2300      	movne	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	e00c      	b.n	8003952 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	43da      	mvns	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4013      	ands	r3, r2
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	429a      	cmp	r2, r3
 8003956:	d0b6      	beq.n	80038c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003970:	e051      	b.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {

	  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003980:	d123      	bne.n	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003990:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800399a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f043 0204 	orr.w	r2, r3, #4
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e046      	b.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d021      	beq.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d2:	f7fe fec9 	bl	8002768 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d302      	bcc.n	80039e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d116      	bne.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e020      	b.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	0c1b      	lsrs	r3, r3, #16
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d10c      	bne.n	8003a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	43da      	mvns	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf14      	ite	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	2300      	moveq	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	e00b      	b.n	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	43da      	mvns	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	4013      	ands	r3, r2
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf14      	ite	ne
 8003a4c:	2301      	movne	r3, #1
 8003a4e:	2300      	moveq	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d18d      	bne.n	8003972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a6c:	e02d      	b.n	8003aca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f8ce 	bl	8003c10 <I2C_IsAcknowledgeFailed>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e02d      	b.n	8003ada <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d021      	beq.n	8003aca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a86:	f7fe fe6f 	bl	8002768 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d302      	bcc.n	8003a9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d116      	bne.n	8003aca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f043 0220 	orr.w	r2, r3, #32
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e007      	b.n	8003ada <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d1ca      	bne.n	8003a6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aee:	e02d      	b.n	8003b4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f88d 	bl	8003c10 <I2C_IsAcknowledgeFailed>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e02d      	b.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b06:	d021      	beq.n	8003b4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b08:	f7fe fe2e 	bl	8002768 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d302      	bcc.n	8003b1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d116      	bne.n	8003b4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f043 0220 	orr.w	r2, r3, #32
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e007      	b.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d1ca      	bne.n	8003af0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b70:	e042      	b.n	8003bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b10      	cmp	r3, #16
 8003b7e:	d119      	bne.n	8003bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f06f 0210 	mvn.w	r2, #16
 8003b88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e029      	b.n	8003c08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb4:	f7fe fdd8 	bl	8002768 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d302      	bcc.n	8003bca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d116      	bne.n	8003bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	f043 0220 	orr.w	r2, r3, #32
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e007      	b.n	8003c08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b40      	cmp	r3, #64	; 0x40
 8003c04:	d1b5      	bne.n	8003b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c26:	d11b      	bne.n	8003c60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f043 0204 	orr.w	r2, r3, #4
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0cc      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c84:	4b68      	ldr	r3, [pc, #416]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d90c      	bls.n	8003cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c92:	4b65      	ldr	r3, [pc, #404]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b63      	ldr	r3, [pc, #396]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0b8      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d020      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cc4:	4b59      	ldr	r3, [pc, #356]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4a58      	ldr	r2, [pc, #352]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cdc:	4b53      	ldr	r3, [pc, #332]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4a52      	ldr	r2, [pc, #328]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce8:	4b50      	ldr	r3, [pc, #320]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	494d      	ldr	r1, [pc, #308]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d044      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	4b47      	ldr	r3, [pc, #284]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d119      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e07f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d003      	beq.n	8003d2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2e:	4b3f      	ldr	r3, [pc, #252]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e06f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3e:	4b3b      	ldr	r3, [pc, #236]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e067      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d4e:	4b37      	ldr	r3, [pc, #220]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f023 0203 	bic.w	r2, r3, #3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	4934      	ldr	r1, [pc, #208]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d60:	f7fe fd02 	bl	8002768 <HAL_GetTick>
 8003d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d68:	f7fe fcfe 	bl	8002768 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e04f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7e:	4b2b      	ldr	r3, [pc, #172]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 020c 	and.w	r2, r3, #12
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d1eb      	bne.n	8003d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d90:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d20c      	bcs.n	8003db8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9e:	4b22      	ldr	r3, [pc, #136]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d001      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e032      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc4:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4916      	ldr	r1, [pc, #88]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003de2:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	490e      	ldr	r1, [pc, #56]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003df6:	f000 f855 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	490a      	ldr	r1, [pc, #40]	; (8003e30 <HAL_RCC_ClockConfig+0x1c0>)
 8003e08:	5ccb      	ldrb	r3, [r1, r3]
 8003e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <HAL_RCC_ClockConfig+0x1c4>)
 8003e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e12:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe fc62 	bl	80026e0 <HAL_InitTick>

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40023c00 	.word	0x40023c00
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	08008ba8 	.word	0x08008ba8
 8003e34:	2000004c 	.word	0x2000004c
 8003e38:	20000050 	.word	0x20000050

08003e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e40:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e42:	681b      	ldr	r3, [r3, #0]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	2000004c 	.word	0x2000004c

08003e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e58:	f7ff fff0 	bl	8003e3c <HAL_RCC_GetHCLKFreq>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	0a9b      	lsrs	r3, r3, #10
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	4903      	ldr	r1, [pc, #12]	; (8003e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e6a:	5ccb      	ldrb	r3, [r1, r3]
 8003e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40023800 	.word	0x40023800
 8003e78:	08008bb8 	.word	0x08008bb8

08003e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e80:	f7ff ffdc 	bl	8003e3c <HAL_RCC_GetHCLKFreq>
 8003e84:	4602      	mov	r2, r0
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	0b5b      	lsrs	r3, r3, #13
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	4903      	ldr	r1, [pc, #12]	; (8003ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e92:	5ccb      	ldrb	r3, [r1, r3]
 8003e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	08008bb8 	.word	0x08008bb8

08003ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea8:	b088      	sub	sp, #32
 8003eaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ec0:	4bce      	ldr	r3, [pc, #824]	; (80041fc <HAL_RCC_GetSysClockFreq+0x358>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b0c      	cmp	r3, #12
 8003eca:	f200 818d 	bhi.w	80041e8 <HAL_RCC_GetSysClockFreq+0x344>
 8003ece:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <HAL_RCC_GetSysClockFreq+0x30>)
 8003ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed4:	08003f09 	.word	0x08003f09
 8003ed8:	080041e9 	.word	0x080041e9
 8003edc:	080041e9 	.word	0x080041e9
 8003ee0:	080041e9 	.word	0x080041e9
 8003ee4:	08003f0f 	.word	0x08003f0f
 8003ee8:	080041e9 	.word	0x080041e9
 8003eec:	080041e9 	.word	0x080041e9
 8003ef0:	080041e9 	.word	0x080041e9
 8003ef4:	08003f15 	.word	0x08003f15
 8003ef8:	080041e9 	.word	0x080041e9
 8003efc:	080041e9 	.word	0x080041e9
 8003f00:	080041e9 	.word	0x080041e9
 8003f04:	08004089 	.word	0x08004089
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f08:	4bbd      	ldr	r3, [pc, #756]	; (8004200 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f0a:	61bb      	str	r3, [r7, #24]
       break;
 8003f0c:	e16f      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f0e:	4bbd      	ldr	r3, [pc, #756]	; (8004204 <HAL_RCC_GetSysClockFreq+0x360>)
 8003f10:	61bb      	str	r3, [r7, #24]
      break;
 8003f12:	e16c      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f14:	4bb9      	ldr	r3, [pc, #740]	; (80041fc <HAL_RCC_GetSysClockFreq+0x358>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f1c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f1e:	4bb7      	ldr	r3, [pc, #732]	; (80041fc <HAL_RCC_GetSysClockFreq+0x358>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d053      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f2a:	4bb4      	ldr	r3, [pc, #720]	; (80041fc <HAL_RCC_GetSysClockFreq+0x358>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	099b      	lsrs	r3, r3, #6
 8003f30:	461a      	mov	r2, r3
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f3a:	f04f 0100 	mov.w	r1, #0
 8003f3e:	ea02 0400 	and.w	r4, r2, r0
 8003f42:	603c      	str	r4, [r7, #0]
 8003f44:	400b      	ands	r3, r1
 8003f46:	607b      	str	r3, [r7, #4]
 8003f48:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	4629      	mov	r1, r5
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	014b      	lsls	r3, r1, #5
 8003f5a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f5e:	0142      	lsls	r2, r0, #5
 8003f60:	4610      	mov	r0, r2
 8003f62:	4619      	mov	r1, r3
 8003f64:	4623      	mov	r3, r4
 8003f66:	1ac0      	subs	r0, r0, r3
 8003f68:	462b      	mov	r3, r5
 8003f6a:	eb61 0103 	sbc.w	r1, r1, r3
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	018b      	lsls	r3, r1, #6
 8003f78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f7c:	0182      	lsls	r2, r0, #6
 8003f7e:	1a12      	subs	r2, r2, r0
 8003f80:	eb63 0301 	sbc.w	r3, r3, r1
 8003f84:	f04f 0000 	mov.w	r0, #0
 8003f88:	f04f 0100 	mov.w	r1, #0
 8003f8c:	00d9      	lsls	r1, r3, #3
 8003f8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f92:	00d0      	lsls	r0, r2, #3
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4621      	mov	r1, r4
 8003f9a:	1852      	adds	r2, r2, r1
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	eb43 0101 	adc.w	r1, r3, r1
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	f04f 0000 	mov.w	r0, #0
 8003fa8:	f04f 0100 	mov.w	r1, #0
 8003fac:	0259      	lsls	r1, r3, #9
 8003fae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003fb2:	0250      	lsls	r0, r2, #9
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4610      	mov	r0, r2
 8003fba:	4619      	mov	r1, r3
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	f7fc fe60 	bl	8000c88 <__aeabi_uldivmod>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4613      	mov	r3, r2
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	e04c      	b.n	800406c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd2:	4b8a      	ldr	r3, [pc, #552]	; (80041fc <HAL_RCC_GetSysClockFreq+0x358>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	099b      	lsrs	r3, r3, #6
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003fe2:	f04f 0100 	mov.w	r1, #0
 8003fe6:	ea02 0a00 	and.w	sl, r2, r0
 8003fea:	ea03 0b01 	and.w	fp, r3, r1
 8003fee:	4650      	mov	r0, sl
 8003ff0:	4659      	mov	r1, fp
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	014b      	lsls	r3, r1, #5
 8003ffc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004000:	0142      	lsls	r2, r0, #5
 8004002:	4610      	mov	r0, r2
 8004004:	4619      	mov	r1, r3
 8004006:	ebb0 000a 	subs.w	r0, r0, sl
 800400a:	eb61 010b 	sbc.w	r1, r1, fp
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	018b      	lsls	r3, r1, #6
 8004018:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800401c:	0182      	lsls	r2, r0, #6
 800401e:	1a12      	subs	r2, r2, r0
 8004020:	eb63 0301 	sbc.w	r3, r3, r1
 8004024:	f04f 0000 	mov.w	r0, #0
 8004028:	f04f 0100 	mov.w	r1, #0
 800402c:	00d9      	lsls	r1, r3, #3
 800402e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004032:	00d0      	lsls	r0, r2, #3
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	eb12 020a 	adds.w	r2, r2, sl
 800403c:	eb43 030b 	adc.w	r3, r3, fp
 8004040:	f04f 0000 	mov.w	r0, #0
 8004044:	f04f 0100 	mov.w	r1, #0
 8004048:	0299      	lsls	r1, r3, #10
 800404a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800404e:	0290      	lsls	r0, r2, #10
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4610      	mov	r0, r2
 8004056:	4619      	mov	r1, r3
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	461a      	mov	r2, r3
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	f7fc fe12 	bl	8000c88 <__aeabi_uldivmod>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4613      	mov	r3, r2
 800406a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800406c:	4b63      	ldr	r3, [pc, #396]	; (80041fc <HAL_RCC_GetSysClockFreq+0x358>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	3301      	adds	r3, #1
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800407c:	69fa      	ldr	r2, [r7, #28]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	fbb2 f3f3 	udiv	r3, r2, r3
 8004084:	61bb      	str	r3, [r7, #24]
      break;
 8004086:	e0b2      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004088:	4b5c      	ldr	r3, [pc, #368]	; (80041fc <HAL_RCC_GetSysClockFreq+0x358>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004090:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004092:	4b5a      	ldr	r3, [pc, #360]	; (80041fc <HAL_RCC_GetSysClockFreq+0x358>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d04d      	beq.n	800413a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800409e:	4b57      	ldr	r3, [pc, #348]	; (80041fc <HAL_RCC_GetSysClockFreq+0x358>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	099b      	lsrs	r3, r3, #6
 80040a4:	461a      	mov	r2, r3
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040ae:	f04f 0100 	mov.w	r1, #0
 80040b2:	ea02 0800 	and.w	r8, r2, r0
 80040b6:	ea03 0901 	and.w	r9, r3, r1
 80040ba:	4640      	mov	r0, r8
 80040bc:	4649      	mov	r1, r9
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	014b      	lsls	r3, r1, #5
 80040c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040cc:	0142      	lsls	r2, r0, #5
 80040ce:	4610      	mov	r0, r2
 80040d0:	4619      	mov	r1, r3
 80040d2:	ebb0 0008 	subs.w	r0, r0, r8
 80040d6:	eb61 0109 	sbc.w	r1, r1, r9
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	018b      	lsls	r3, r1, #6
 80040e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040e8:	0182      	lsls	r2, r0, #6
 80040ea:	1a12      	subs	r2, r2, r0
 80040ec:	eb63 0301 	sbc.w	r3, r3, r1
 80040f0:	f04f 0000 	mov.w	r0, #0
 80040f4:	f04f 0100 	mov.w	r1, #0
 80040f8:	00d9      	lsls	r1, r3, #3
 80040fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040fe:	00d0      	lsls	r0, r2, #3
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	eb12 0208 	adds.w	r2, r2, r8
 8004108:	eb43 0309 	adc.w	r3, r3, r9
 800410c:	f04f 0000 	mov.w	r0, #0
 8004110:	f04f 0100 	mov.w	r1, #0
 8004114:	0259      	lsls	r1, r3, #9
 8004116:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800411a:	0250      	lsls	r0, r2, #9
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4610      	mov	r0, r2
 8004122:	4619      	mov	r1, r3
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	461a      	mov	r2, r3
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	f7fc fdac 	bl	8000c88 <__aeabi_uldivmod>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4613      	mov	r3, r2
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	e04a      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413a:	4b30      	ldr	r3, [pc, #192]	; (80041fc <HAL_RCC_GetSysClockFreq+0x358>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	099b      	lsrs	r3, r3, #6
 8004140:	461a      	mov	r2, r3
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	f240 10ff 	movw	r0, #511	; 0x1ff
 800414a:	f04f 0100 	mov.w	r1, #0
 800414e:	ea02 0400 	and.w	r4, r2, r0
 8004152:	ea03 0501 	and.w	r5, r3, r1
 8004156:	4620      	mov	r0, r4
 8004158:	4629      	mov	r1, r5
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	014b      	lsls	r3, r1, #5
 8004164:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004168:	0142      	lsls	r2, r0, #5
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	1b00      	subs	r0, r0, r4
 8004170:	eb61 0105 	sbc.w	r1, r1, r5
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	018b      	lsls	r3, r1, #6
 800417e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004182:	0182      	lsls	r2, r0, #6
 8004184:	1a12      	subs	r2, r2, r0
 8004186:	eb63 0301 	sbc.w	r3, r3, r1
 800418a:	f04f 0000 	mov.w	r0, #0
 800418e:	f04f 0100 	mov.w	r1, #0
 8004192:	00d9      	lsls	r1, r3, #3
 8004194:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004198:	00d0      	lsls	r0, r2, #3
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	1912      	adds	r2, r2, r4
 80041a0:	eb45 0303 	adc.w	r3, r5, r3
 80041a4:	f04f 0000 	mov.w	r0, #0
 80041a8:	f04f 0100 	mov.w	r1, #0
 80041ac:	0299      	lsls	r1, r3, #10
 80041ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80041b2:	0290      	lsls	r0, r2, #10
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4610      	mov	r0, r2
 80041ba:	4619      	mov	r1, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	461a      	mov	r2, r3
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	f7fc fd60 	bl	8000c88 <__aeabi_uldivmod>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4613      	mov	r3, r2
 80041ce:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80041d0:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <HAL_RCC_GetSysClockFreq+0x358>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	0f1b      	lsrs	r3, r3, #28
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	61bb      	str	r3, [r7, #24]
      break;
 80041e6:	e002      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041e8:	4b05      	ldr	r3, [pc, #20]	; (8004200 <HAL_RCC_GetSysClockFreq+0x35c>)
 80041ea:	61bb      	str	r3, [r7, #24]
      break;
 80041ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ee:	69bb      	ldr	r3, [r7, #24]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041fa:	bf00      	nop
 80041fc:	40023800 	.word	0x40023800
 8004200:	00f42400 	.word	0x00f42400
 8004204:	007a1200 	.word	0x007a1200

08004208 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e28d      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8083 	beq.w	800432e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004228:	4b94      	ldr	r3, [pc, #592]	; (800447c <HAL_RCC_OscConfig+0x274>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b04      	cmp	r3, #4
 8004232:	d019      	beq.n	8004268 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004234:	4b91      	ldr	r3, [pc, #580]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800423c:	2b08      	cmp	r3, #8
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004240:	4b8e      	ldr	r3, [pc, #568]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424c:	d00c      	beq.n	8004268 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800424e:	4b8b      	ldr	r3, [pc, #556]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004256:	2b0c      	cmp	r3, #12
 8004258:	d112      	bne.n	8004280 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800425a:	4b88      	ldr	r3, [pc, #544]	; (800447c <HAL_RCC_OscConfig+0x274>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004266:	d10b      	bne.n	8004280 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004268:	4b84      	ldr	r3, [pc, #528]	; (800447c <HAL_RCC_OscConfig+0x274>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d05b      	beq.n	800432c <HAL_RCC_OscConfig+0x124>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d157      	bne.n	800432c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e25a      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004288:	d106      	bne.n	8004298 <HAL_RCC_OscConfig+0x90>
 800428a:	4b7c      	ldr	r3, [pc, #496]	; (800447c <HAL_RCC_OscConfig+0x274>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a7b      	ldr	r2, [pc, #492]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	e01d      	b.n	80042d4 <HAL_RCC_OscConfig+0xcc>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042a0:	d10c      	bne.n	80042bc <HAL_RCC_OscConfig+0xb4>
 80042a2:	4b76      	ldr	r3, [pc, #472]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a75      	ldr	r2, [pc, #468]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	4b73      	ldr	r3, [pc, #460]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a72      	ldr	r2, [pc, #456]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e00b      	b.n	80042d4 <HAL_RCC_OscConfig+0xcc>
 80042bc:	4b6f      	ldr	r3, [pc, #444]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a6e      	ldr	r2, [pc, #440]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	4b6c      	ldr	r3, [pc, #432]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a6b      	ldr	r2, [pc, #428]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d013      	beq.n	8004304 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fe fa44 	bl	8002768 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fe fa40 	bl	8002768 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e21f      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f6:	4b61      	ldr	r3, [pc, #388]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0xdc>
 8004302:	e014      	b.n	800432e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fe fa30 	bl	8002768 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800430c:	f7fe fa2c 	bl	8002768 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b64      	cmp	r3, #100	; 0x64
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e20b      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431e:	4b57      	ldr	r3, [pc, #348]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x104>
 800432a:	e000      	b.n	800432e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d06f      	beq.n	800441a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800433a:	4b50      	ldr	r3, [pc, #320]	; (800447c <HAL_RCC_OscConfig+0x274>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	2b00      	cmp	r3, #0
 8004344:	d017      	beq.n	8004376 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004346:	4b4d      	ldr	r3, [pc, #308]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800434e:	2b08      	cmp	r3, #8
 8004350:	d105      	bne.n	800435e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004352:	4b4a      	ldr	r3, [pc, #296]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00b      	beq.n	8004376 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800435e:	4b47      	ldr	r3, [pc, #284]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004366:	2b0c      	cmp	r3, #12
 8004368:	d11c      	bne.n	80043a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800436a:	4b44      	ldr	r3, [pc, #272]	; (800447c <HAL_RCC_OscConfig+0x274>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d116      	bne.n	80043a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004376:	4b41      	ldr	r3, [pc, #260]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_RCC_OscConfig+0x186>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d001      	beq.n	800438e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e1d3      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438e:	4b3b      	ldr	r3, [pc, #236]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	4937      	ldr	r1, [pc, #220]	; (800447c <HAL_RCC_OscConfig+0x274>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a2:	e03a      	b.n	800441a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d020      	beq.n	80043ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ac:	4b34      	ldr	r3, [pc, #208]	; (8004480 <HAL_RCC_OscConfig+0x278>)
 80043ae:	2201      	movs	r2, #1
 80043b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b2:	f7fe f9d9 	bl	8002768 <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ba:	f7fe f9d5 	bl	8002768 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e1b4      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043cc:	4b2b      	ldr	r3, [pc, #172]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0f0      	beq.n	80043ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d8:	4b28      	ldr	r3, [pc, #160]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	4925      	ldr	r1, [pc, #148]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	600b      	str	r3, [r1, #0]
 80043ec:	e015      	b.n	800441a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ee:	4b24      	ldr	r3, [pc, #144]	; (8004480 <HAL_RCC_OscConfig+0x278>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f4:	f7fe f9b8 	bl	8002768 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043fc:	f7fe f9b4 	bl	8002768 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e193      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440e:	4b1b      	ldr	r3, [pc, #108]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d036      	beq.n	8004494 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d016      	beq.n	800445c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800442e:	4b15      	ldr	r3, [pc, #84]	; (8004484 <HAL_RCC_OscConfig+0x27c>)
 8004430:	2201      	movs	r2, #1
 8004432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004434:	f7fe f998 	bl	8002768 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800443c:	f7fe f994 	bl	8002768 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e173      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0x234>
 800445a:	e01b      	b.n	8004494 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800445c:	4b09      	ldr	r3, [pc, #36]	; (8004484 <HAL_RCC_OscConfig+0x27c>)
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004462:	f7fe f981 	bl	8002768 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004468:	e00e      	b.n	8004488 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800446a:	f7fe f97d 	bl	8002768 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d907      	bls.n	8004488 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e15c      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
 800447c:	40023800 	.word	0x40023800
 8004480:	42470000 	.word	0x42470000
 8004484:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004488:	4b8a      	ldr	r3, [pc, #552]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800448a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1ea      	bne.n	800446a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8097 	beq.w	80045d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044a2:	2300      	movs	r3, #0
 80044a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a6:	4b83      	ldr	r3, [pc, #524]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10f      	bne.n	80044d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	4b7f      	ldr	r3, [pc, #508]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	4a7e      	ldr	r2, [pc, #504]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 80044bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c0:	6413      	str	r3, [r2, #64]	; 0x40
 80044c2:	4b7c      	ldr	r3, [pc, #496]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ca:	60bb      	str	r3, [r7, #8]
 80044cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d2:	4b79      	ldr	r3, [pc, #484]	; (80046b8 <HAL_RCC_OscConfig+0x4b0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d118      	bne.n	8004510 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044de:	4b76      	ldr	r3, [pc, #472]	; (80046b8 <HAL_RCC_OscConfig+0x4b0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a75      	ldr	r2, [pc, #468]	; (80046b8 <HAL_RCC_OscConfig+0x4b0>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ea:	f7fe f93d 	bl	8002768 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f2:	f7fe f939 	bl	8002768 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e118      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004504:	4b6c      	ldr	r3, [pc, #432]	; (80046b8 <HAL_RCC_OscConfig+0x4b0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d106      	bne.n	8004526 <HAL_RCC_OscConfig+0x31e>
 8004518:	4b66      	ldr	r3, [pc, #408]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	4a65      	ldr	r2, [pc, #404]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	6713      	str	r3, [r2, #112]	; 0x70
 8004524:	e01c      	b.n	8004560 <HAL_RCC_OscConfig+0x358>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b05      	cmp	r3, #5
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x340>
 800452e:	4b61      	ldr	r3, [pc, #388]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	4a60      	ldr	r2, [pc, #384]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 8004534:	f043 0304 	orr.w	r3, r3, #4
 8004538:	6713      	str	r3, [r2, #112]	; 0x70
 800453a:	4b5e      	ldr	r3, [pc, #376]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	4a5d      	ldr	r2, [pc, #372]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	6713      	str	r3, [r2, #112]	; 0x70
 8004546:	e00b      	b.n	8004560 <HAL_RCC_OscConfig+0x358>
 8004548:	4b5a      	ldr	r3, [pc, #360]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454c:	4a59      	ldr	r2, [pc, #356]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	6713      	str	r3, [r2, #112]	; 0x70
 8004554:	4b57      	ldr	r3, [pc, #348]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	4a56      	ldr	r2, [pc, #344]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800455a:	f023 0304 	bic.w	r3, r3, #4
 800455e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d015      	beq.n	8004594 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004568:	f7fe f8fe 	bl	8002768 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456e:	e00a      	b.n	8004586 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004570:	f7fe f8fa 	bl	8002768 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	f241 3288 	movw	r2, #5000	; 0x1388
 800457e:	4293      	cmp	r3, r2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e0d7      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004586:	4b4b      	ldr	r3, [pc, #300]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0ee      	beq.n	8004570 <HAL_RCC_OscConfig+0x368>
 8004592:	e014      	b.n	80045be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fe f8e8 	bl	8002768 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800459a:	e00a      	b.n	80045b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800459c:	f7fe f8e4 	bl	8002768 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e0c1      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b2:	4b40      	ldr	r3, [pc, #256]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1ee      	bne.n	800459c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045be:	7dfb      	ldrb	r3, [r7, #23]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d105      	bne.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c4:	4b3b      	ldr	r3, [pc, #236]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	4a3a      	ldr	r2, [pc, #232]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 80045ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 80ad 	beq.w	8004734 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045da:	4b36      	ldr	r3, [pc, #216]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 030c 	and.w	r3, r3, #12
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d060      	beq.n	80046a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d145      	bne.n	800467a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ee:	4b33      	ldr	r3, [pc, #204]	; (80046bc <HAL_RCC_OscConfig+0x4b4>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fe f8b8 	bl	8002768 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045fc:	f7fe f8b4 	bl	8002768 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e093      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	4b29      	ldr	r3, [pc, #164]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69da      	ldr	r2, [r3, #28]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	019b      	lsls	r3, r3, #6
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	085b      	lsrs	r3, r3, #1
 8004632:	3b01      	subs	r3, #1
 8004634:	041b      	lsls	r3, r3, #16
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	061b      	lsls	r3, r3, #24
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	071b      	lsls	r3, r3, #28
 8004646:	491b      	ldr	r1, [pc, #108]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 8004648:	4313      	orrs	r3, r2
 800464a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800464c:	4b1b      	ldr	r3, [pc, #108]	; (80046bc <HAL_RCC_OscConfig+0x4b4>)
 800464e:	2201      	movs	r2, #1
 8004650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004652:	f7fe f889 	bl	8002768 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465a:	f7fe f885 	bl	8002768 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e064      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466c:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f0      	beq.n	800465a <HAL_RCC_OscConfig+0x452>
 8004678:	e05c      	b.n	8004734 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467a:	4b10      	ldr	r3, [pc, #64]	; (80046bc <HAL_RCC_OscConfig+0x4b4>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7fe f872 	bl	8002768 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004688:	f7fe f86e 	bl	8002768 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e04d      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469a:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0x480>
 80046a6:	e045      	b.n	8004734 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d107      	bne.n	80046c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e040      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
 80046b4:	40023800 	.word	0x40023800
 80046b8:	40007000 	.word	0x40007000
 80046bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046c0:	4b1f      	ldr	r3, [pc, #124]	; (8004740 <HAL_RCC_OscConfig+0x538>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d030      	beq.n	8004730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d8:	429a      	cmp	r2, r3
 80046da:	d129      	bne.n	8004730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d122      	bne.n	8004730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d119      	bne.n	8004730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	3b01      	subs	r3, #1
 800470a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800470c:	429a      	cmp	r2, r3
 800470e:	d10f      	bne.n	8004730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800471c:	429a      	cmp	r2, r3
 800471e:	d107      	bne.n	8004730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40023800 	.word	0x40023800

08004744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e041      	b.n	80047da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fd fda6 	bl	80022bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3304      	adds	r3, #4
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f000 fad8 	bl	8004d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e041      	b.n	8004878 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d106      	bne.n	800480e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f839 	bl	8004880 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2202      	movs	r2, #2
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3304      	adds	r3, #4
 800481e:	4619      	mov	r1, r3
 8004820:	4610      	mov	r0, r2
 8004822:	f000 fa89 	bl	8004d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <HAL_TIM_PWM_Start+0x24>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	bf14      	ite	ne
 80048b0:	2301      	movne	r3, #1
 80048b2:	2300      	moveq	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	e022      	b.n	80048fe <HAL_TIM_PWM_Start+0x6a>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d109      	bne.n	80048d2 <HAL_TIM_PWM_Start+0x3e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	bf14      	ite	ne
 80048ca:	2301      	movne	r3, #1
 80048cc:	2300      	moveq	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	e015      	b.n	80048fe <HAL_TIM_PWM_Start+0x6a>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d109      	bne.n	80048ec <HAL_TIM_PWM_Start+0x58>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	bf14      	ite	ne
 80048e4:	2301      	movne	r3, #1
 80048e6:	2300      	moveq	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	e008      	b.n	80048fe <HAL_TIM_PWM_Start+0x6a>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e07c      	b.n	8004a00 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d104      	bne.n	8004916 <HAL_TIM_PWM_Start+0x82>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004914:	e013      	b.n	800493e <HAL_TIM_PWM_Start+0xaa>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b04      	cmp	r3, #4
 800491a:	d104      	bne.n	8004926 <HAL_TIM_PWM_Start+0x92>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004924:	e00b      	b.n	800493e <HAL_TIM_PWM_Start+0xaa>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b08      	cmp	r3, #8
 800492a:	d104      	bne.n	8004936 <HAL_TIM_PWM_Start+0xa2>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004934:	e003      	b.n	800493e <HAL_TIM_PWM_Start+0xaa>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2202      	movs	r2, #2
 800493a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2201      	movs	r2, #1
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fce0 	bl	800530c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a2d      	ldr	r2, [pc, #180]	; (8004a08 <HAL_TIM_PWM_Start+0x174>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d004      	beq.n	8004960 <HAL_TIM_PWM_Start+0xcc>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a2c      	ldr	r2, [pc, #176]	; (8004a0c <HAL_TIM_PWM_Start+0x178>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d101      	bne.n	8004964 <HAL_TIM_PWM_Start+0xd0>
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <HAL_TIM_PWM_Start+0xd2>
 8004964:	2300      	movs	r3, #0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004978:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a22      	ldr	r2, [pc, #136]	; (8004a08 <HAL_TIM_PWM_Start+0x174>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d022      	beq.n	80049ca <HAL_TIM_PWM_Start+0x136>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498c:	d01d      	beq.n	80049ca <HAL_TIM_PWM_Start+0x136>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1f      	ldr	r2, [pc, #124]	; (8004a10 <HAL_TIM_PWM_Start+0x17c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d018      	beq.n	80049ca <HAL_TIM_PWM_Start+0x136>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <HAL_TIM_PWM_Start+0x180>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d013      	beq.n	80049ca <HAL_TIM_PWM_Start+0x136>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1c      	ldr	r2, [pc, #112]	; (8004a18 <HAL_TIM_PWM_Start+0x184>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00e      	beq.n	80049ca <HAL_TIM_PWM_Start+0x136>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a16      	ldr	r2, [pc, #88]	; (8004a0c <HAL_TIM_PWM_Start+0x178>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d009      	beq.n	80049ca <HAL_TIM_PWM_Start+0x136>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a18      	ldr	r2, [pc, #96]	; (8004a1c <HAL_TIM_PWM_Start+0x188>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d004      	beq.n	80049ca <HAL_TIM_PWM_Start+0x136>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a16      	ldr	r2, [pc, #88]	; (8004a20 <HAL_TIM_PWM_Start+0x18c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d111      	bne.n	80049ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b06      	cmp	r3, #6
 80049da:	d010      	beq.n	80049fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ec:	e007      	b.n	80049fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f042 0201 	orr.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40010400 	.word	0x40010400
 8004a10:	40000400 	.word	0x40000400
 8004a14:	40000800 	.word	0x40000800
 8004a18:	40000c00 	.word	0x40000c00
 8004a1c:	40014000 	.word	0x40014000
 8004a20:	40001800 	.word	0x40001800

08004a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e0ae      	b.n	8004ba0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b0c      	cmp	r3, #12
 8004a4e:	f200 809f 	bhi.w	8004b90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a52:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004a8d 	.word	0x08004a8d
 8004a5c:	08004b91 	.word	0x08004b91
 8004a60:	08004b91 	.word	0x08004b91
 8004a64:	08004b91 	.word	0x08004b91
 8004a68:	08004acd 	.word	0x08004acd
 8004a6c:	08004b91 	.word	0x08004b91
 8004a70:	08004b91 	.word	0x08004b91
 8004a74:	08004b91 	.word	0x08004b91
 8004a78:	08004b0f 	.word	0x08004b0f
 8004a7c:	08004b91 	.word	0x08004b91
 8004a80:	08004b91 	.word	0x08004b91
 8004a84:	08004b91 	.word	0x08004b91
 8004a88:	08004b4f 	.word	0x08004b4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f9f0 	bl	8004e78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0208 	orr.w	r2, r2, #8
 8004aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0204 	bic.w	r2, r2, #4
 8004ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6999      	ldr	r1, [r3, #24]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	619a      	str	r2, [r3, #24]
      break;
 8004aca:	e064      	b.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fa40 	bl	8004f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6999      	ldr	r1, [r3, #24]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	021a      	lsls	r2, r3, #8
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	619a      	str	r2, [r3, #24]
      break;
 8004b0c:	e043      	b.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fa95 	bl	8005044 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0208 	orr.w	r2, r2, #8
 8004b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0204 	bic.w	r2, r2, #4
 8004b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69d9      	ldr	r1, [r3, #28]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	61da      	str	r2, [r3, #28]
      break;
 8004b4c:	e023      	b.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fae9 	bl	800512c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69d9      	ldr	r1, [r3, #28]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	021a      	lsls	r2, r3, #8
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	61da      	str	r2, [r3, #28]
      break;
 8004b8e:	e002      	b.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	75fb      	strb	r3, [r7, #23]
      break;
 8004b94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_TIM_ConfigClockSource+0x1c>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e0b4      	b.n	8004d2e <HAL_TIM_ConfigClockSource+0x186>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bfc:	d03e      	beq.n	8004c7c <HAL_TIM_ConfigClockSource+0xd4>
 8004bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c02:	f200 8087 	bhi.w	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0a:	f000 8086 	beq.w	8004d1a <HAL_TIM_ConfigClockSource+0x172>
 8004c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c12:	d87f      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c14:	2b70      	cmp	r3, #112	; 0x70
 8004c16:	d01a      	beq.n	8004c4e <HAL_TIM_ConfigClockSource+0xa6>
 8004c18:	2b70      	cmp	r3, #112	; 0x70
 8004c1a:	d87b      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c1c:	2b60      	cmp	r3, #96	; 0x60
 8004c1e:	d050      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x11a>
 8004c20:	2b60      	cmp	r3, #96	; 0x60
 8004c22:	d877      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c24:	2b50      	cmp	r3, #80	; 0x50
 8004c26:	d03c      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c28:	2b50      	cmp	r3, #80	; 0x50
 8004c2a:	d873      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d058      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x13a>
 8004c30:	2b40      	cmp	r3, #64	; 0x40
 8004c32:	d86f      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c34:	2b30      	cmp	r3, #48	; 0x30
 8004c36:	d064      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x15a>
 8004c38:	2b30      	cmp	r3, #48	; 0x30
 8004c3a:	d86b      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d060      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x15a>
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d867      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d05c      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x15a>
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d05a      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x15a>
 8004c4c:	e062      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	6899      	ldr	r1, [r3, #8]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f000 fb35 	bl	80052cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	609a      	str	r2, [r3, #8]
      break;
 8004c7a:	e04f      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	6899      	ldr	r1, [r3, #8]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f000 fb1e 	bl	80052cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c9e:	609a      	str	r2, [r3, #8]
      break;
 8004ca0:	e03c      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6859      	ldr	r1, [r3, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f000 fa92 	bl	80051d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2150      	movs	r1, #80	; 0x50
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 faeb 	bl	8005296 <TIM_ITRx_SetConfig>
      break;
 8004cc0:	e02c      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6818      	ldr	r0, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6859      	ldr	r1, [r3, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f000 fab1 	bl	8005236 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2160      	movs	r1, #96	; 0x60
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fadb 	bl	8005296 <TIM_ITRx_SetConfig>
      break;
 8004ce0:	e01c      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6859      	ldr	r1, [r3, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f000 fa72 	bl	80051d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2140      	movs	r1, #64	; 0x40
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 facb 	bl	8005296 <TIM_ITRx_SetConfig>
      break;
 8004d00:	e00c      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	f000 fac2 	bl	8005296 <TIM_ITRx_SetConfig>
      break;
 8004d12:	e003      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
      break;
 8004d18:	e000      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a40      	ldr	r2, [pc, #256]	; (8004e4c <TIM_Base_SetConfig+0x114>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d56:	d00f      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a3d      	ldr	r2, [pc, #244]	; (8004e50 <TIM_Base_SetConfig+0x118>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00b      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a3c      	ldr	r2, [pc, #240]	; (8004e54 <TIM_Base_SetConfig+0x11c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d007      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a3b      	ldr	r2, [pc, #236]	; (8004e58 <TIM_Base_SetConfig+0x120>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d003      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a3a      	ldr	r2, [pc, #232]	; (8004e5c <TIM_Base_SetConfig+0x124>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d108      	bne.n	8004d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2f      	ldr	r2, [pc, #188]	; (8004e4c <TIM_Base_SetConfig+0x114>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d02b      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d98:	d027      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a2c      	ldr	r2, [pc, #176]	; (8004e50 <TIM_Base_SetConfig+0x118>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d023      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a2b      	ldr	r2, [pc, #172]	; (8004e54 <TIM_Base_SetConfig+0x11c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d01f      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a2a      	ldr	r2, [pc, #168]	; (8004e58 <TIM_Base_SetConfig+0x120>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01b      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a29      	ldr	r2, [pc, #164]	; (8004e5c <TIM_Base_SetConfig+0x124>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d017      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a28      	ldr	r2, [pc, #160]	; (8004e60 <TIM_Base_SetConfig+0x128>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d013      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a27      	ldr	r2, [pc, #156]	; (8004e64 <TIM_Base_SetConfig+0x12c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00f      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a26      	ldr	r2, [pc, #152]	; (8004e68 <TIM_Base_SetConfig+0x130>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00b      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a25      	ldr	r2, [pc, #148]	; (8004e6c <TIM_Base_SetConfig+0x134>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a24      	ldr	r2, [pc, #144]	; (8004e70 <TIM_Base_SetConfig+0x138>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d003      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a23      	ldr	r2, [pc, #140]	; (8004e74 <TIM_Base_SetConfig+0x13c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d108      	bne.n	8004dfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <TIM_Base_SetConfig+0x114>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_Base_SetConfig+0xf8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a0c      	ldr	r2, [pc, #48]	; (8004e5c <TIM_Base_SetConfig+0x124>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d103      	bne.n	8004e38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	615a      	str	r2, [r3, #20]
}
 8004e3e:	bf00      	nop
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40000800 	.word	0x40000800
 8004e58:	40000c00 	.word	0x40000c00
 8004e5c:	40010400 	.word	0x40010400
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40014400 	.word	0x40014400
 8004e68:	40014800 	.word	0x40014800
 8004e6c:	40001800 	.word	0x40001800
 8004e70:	40001c00 	.word	0x40001c00
 8004e74:	40002000 	.word	0x40002000

08004e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f023 0201 	bic.w	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f023 0302 	bic.w	r3, r3, #2
 8004ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a20      	ldr	r2, [pc, #128]	; (8004f50 <TIM_OC1_SetConfig+0xd8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_OC1_SetConfig+0x64>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a1f      	ldr	r2, [pc, #124]	; (8004f54 <TIM_OC1_SetConfig+0xdc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d10c      	bne.n	8004ef6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0308 	bic.w	r3, r3, #8
 8004ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f023 0304 	bic.w	r3, r3, #4
 8004ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a15      	ldr	r2, [pc, #84]	; (8004f50 <TIM_OC1_SetConfig+0xd8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <TIM_OC1_SetConfig+0x8e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a14      	ldr	r2, [pc, #80]	; (8004f54 <TIM_OC1_SetConfig+0xdc>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d111      	bne.n	8004f2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	621a      	str	r2, [r3, #32]
}
 8004f44:	bf00      	nop
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40010000 	.word	0x40010000
 8004f54:	40010400 	.word	0x40010400

08004f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	f023 0210 	bic.w	r2, r3, #16
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f023 0320 	bic.w	r3, r3, #32
 8004fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a22      	ldr	r2, [pc, #136]	; (800503c <TIM_OC2_SetConfig+0xe4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_OC2_SetConfig+0x68>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a21      	ldr	r2, [pc, #132]	; (8005040 <TIM_OC2_SetConfig+0xe8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d10d      	bne.n	8004fdc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a17      	ldr	r2, [pc, #92]	; (800503c <TIM_OC2_SetConfig+0xe4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d003      	beq.n	8004fec <TIM_OC2_SetConfig+0x94>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a16      	ldr	r2, [pc, #88]	; (8005040 <TIM_OC2_SetConfig+0xe8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d113      	bne.n	8005014 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ff2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	621a      	str	r2, [r3, #32]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40010000 	.word	0x40010000
 8005040:	40010400 	.word	0x40010400

08005044 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0303 	bic.w	r3, r3, #3
 800507a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800508c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a21      	ldr	r2, [pc, #132]	; (8005124 <TIM_OC3_SetConfig+0xe0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d003      	beq.n	80050aa <TIM_OC3_SetConfig+0x66>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a20      	ldr	r2, [pc, #128]	; (8005128 <TIM_OC3_SetConfig+0xe4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d10d      	bne.n	80050c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a16      	ldr	r2, [pc, #88]	; (8005124 <TIM_OC3_SetConfig+0xe0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d003      	beq.n	80050d6 <TIM_OC3_SetConfig+0x92>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a15      	ldr	r2, [pc, #84]	; (8005128 <TIM_OC3_SetConfig+0xe4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d113      	bne.n	80050fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	621a      	str	r2, [r3, #32]
}
 8005118:	bf00      	nop
 800511a:	371c      	adds	r7, #28
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	40010000 	.word	0x40010000
 8005128:	40010400 	.word	0x40010400

0800512c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005176:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	031b      	lsls	r3, r3, #12
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a12      	ldr	r2, [pc, #72]	; (80051d0 <TIM_OC4_SetConfig+0xa4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_OC4_SetConfig+0x68>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a11      	ldr	r2, [pc, #68]	; (80051d4 <TIM_OC4_SetConfig+0xa8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d109      	bne.n	80051a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800519a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	019b      	lsls	r3, r3, #6
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40010400 	.word	0x40010400

080051d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	f023 0201 	bic.w	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f023 030a 	bic.w	r3, r3, #10
 8005214:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4313      	orrs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	621a      	str	r2, [r3, #32]
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005236:	b480      	push	{r7}
 8005238:	b087      	sub	sp, #28
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f023 0210 	bic.w	r2, r3, #16
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005260:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	031b      	lsls	r3, r3, #12
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005272:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005296:	b480      	push	{r7}
 8005298:	b085      	sub	sp, #20
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f043 0307 	orr.w	r3, r3, #7
 80052b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	609a      	str	r2, [r3, #8]
}
 80052c0:	bf00      	nop
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	021a      	lsls	r2, r3, #8
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	609a      	str	r2, [r3, #8]
}
 8005300:	bf00      	nop
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	2201      	movs	r2, #1
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1a      	ldr	r2, [r3, #32]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	43db      	mvns	r3, r3
 800532e:	401a      	ands	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a1a      	ldr	r2, [r3, #32]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 031f 	and.w	r3, r3, #31
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	fa01 f303 	lsl.w	r3, r1, r3
 8005344:	431a      	orrs	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	621a      	str	r2, [r3, #32]
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
	...

08005358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800536c:	2302      	movs	r3, #2
 800536e:	e05a      	b.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a21      	ldr	r2, [pc, #132]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d022      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053bc:	d01d      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1d      	ldr	r2, [pc, #116]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d018      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1b      	ldr	r2, [pc, #108]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1a      	ldr	r2, [pc, #104]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a18      	ldr	r2, [pc, #96]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a17      	ldr	r2, [pc, #92]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a15      	ldr	r2, [pc, #84]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d10c      	bne.n	8005414 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	4313      	orrs	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40010000 	.word	0x40010000
 8005438:	40000400 	.word	0x40000400
 800543c:	40000800 	.word	0x40000800
 8005440:	40000c00 	.word	0x40000c00
 8005444:	40010400 	.word	0x40010400
 8005448:	40014000 	.word	0x40014000
 800544c:	40001800 	.word	0x40001800

08005450 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e047      	b.n	80054f2 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fc ff9c 	bl	80023b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2224      	movs	r2, #36	; 0x24
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005492:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f931 	bl	80056fc <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695a      	ldr	r2, [r3, #20]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80054b8:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695a      	ldr	r2, [r3, #20]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0208 	orr.w	r2, r2, #8
 80054c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b08a      	sub	sp, #40	; 0x28
 80054fe:	af02      	add	r7, sp, #8
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	603b      	str	r3, [r7, #0]
 8005506:	4613      	mov	r3, r2
 8005508:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b20      	cmp	r3, #32
 8005518:	d17c      	bne.n	8005614 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <HAL_UART_Transmit+0x2c>
 8005520:	88fb      	ldrh	r3, [r7, #6]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e075      	b.n	8005616 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_UART_Transmit+0x3e>
 8005534:	2302      	movs	r3, #2
 8005536:	e06e      	b.n	8005616 <HAL_UART_Transmit+0x11c>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2221      	movs	r2, #33	; 0x21
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800554e:	f7fd f90b 	bl	8002768 <HAL_GetTick>
 8005552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	88fa      	ldrh	r2, [r7, #6]
 8005558:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	88fa      	ldrh	r2, [r7, #6]
 800555e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005568:	d108      	bne.n	800557c <HAL_UART_Transmit+0x82>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d104      	bne.n	800557c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005572:	2300      	movs	r3, #0
 8005574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	e003      	b.n	8005584 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005580:	2300      	movs	r3, #0
 8005582:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800558c:	e02a      	b.n	80055e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2200      	movs	r2, #0
 8005596:	2180      	movs	r1, #128	; 0x80
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f840 	bl	800561e <UART_WaitOnFlagUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e036      	b.n	8005616 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10b      	bne.n	80055c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	3302      	adds	r3, #2
 80055c2:	61bb      	str	r3, [r7, #24]
 80055c4:	e007      	b.n	80055d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	781a      	ldrb	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	3301      	adds	r3, #1
 80055d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1cf      	bne.n	800558e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2200      	movs	r2, #0
 80055f6:	2140      	movs	r1, #64	; 0x40
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f810 	bl	800561e <UART_WaitOnFlagUntilTimeout>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e006      	b.n	8005616 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	e000      	b.n	8005616 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005614:	2302      	movs	r3, #2
  }
}
 8005616:	4618      	mov	r0, r3
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b090      	sub	sp, #64	; 0x40
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	603b      	str	r3, [r7, #0]
 800562a:	4613      	mov	r3, r2
 800562c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800562e:	e050      	b.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005636:	d04c      	beq.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800563a:	2b00      	cmp	r3, #0
 800563c:	d007      	beq.n	800564e <UART_WaitOnFlagUntilTimeout+0x30>
 800563e:	f7fd f893 	bl	8002768 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800564a:	429a      	cmp	r2, r3
 800564c:	d241      	bcs.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	330c      	adds	r3, #12
 8005654:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	330c      	adds	r3, #12
 800566c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800566e:	637a      	str	r2, [r7, #52]	; 0x34
 8005670:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e5      	bne.n	800564e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3314      	adds	r3, #20
 8005688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	613b      	str	r3, [r7, #16]
   return(result);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	63bb      	str	r3, [r7, #56]	; 0x38
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3314      	adds	r3, #20
 80056a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056a2:	623a      	str	r2, [r7, #32]
 80056a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	69f9      	ldr	r1, [r7, #28]
 80056a8:	6a3a      	ldr	r2, [r7, #32]
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e5      	bne.n	8005682 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e00f      	b.n	80056f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4013      	ands	r3, r2
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	429a      	cmp	r2, r3
 80056e0:	bf0c      	ite	eq
 80056e2:	2301      	moveq	r3, #1
 80056e4:	2300      	movne	r3, #0
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d09f      	beq.n	8005630 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3740      	adds	r7, #64	; 0x40
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005700:	b09f      	sub	sp, #124	; 0x7c
 8005702:	af00      	add	r7, sp, #0
 8005704:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005712:	68d9      	ldr	r1, [r3, #12]
 8005714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	ea40 0301 	orr.w	r3, r0, r1
 800571c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800571e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	431a      	orrs	r2, r3
 8005728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	431a      	orrs	r2, r3
 800572e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	4313      	orrs	r3, r2
 8005734:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005740:	f021 010c 	bic.w	r1, r1, #12
 8005744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800574a:	430b      	orrs	r3, r1
 800574c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800574e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575a:	6999      	ldr	r1, [r3, #24]
 800575c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	ea40 0301 	orr.w	r3, r0, r1
 8005764:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	4bc5      	ldr	r3, [pc, #788]	; (8005a80 <UART_SetConfig+0x384>)
 800576c:	429a      	cmp	r2, r3
 800576e:	d004      	beq.n	800577a <UART_SetConfig+0x7e>
 8005770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	4bc3      	ldr	r3, [pc, #780]	; (8005a84 <UART_SetConfig+0x388>)
 8005776:	429a      	cmp	r2, r3
 8005778:	d103      	bne.n	8005782 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800577a:	f7fe fb7f 	bl	8003e7c <HAL_RCC_GetPCLK2Freq>
 800577e:	6778      	str	r0, [r7, #116]	; 0x74
 8005780:	e002      	b.n	8005788 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005782:	f7fe fb67 	bl	8003e54 <HAL_RCC_GetPCLK1Freq>
 8005786:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005790:	f040 80b6 	bne.w	8005900 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005796:	461c      	mov	r4, r3
 8005798:	f04f 0500 	mov.w	r5, #0
 800579c:	4622      	mov	r2, r4
 800579e:	462b      	mov	r3, r5
 80057a0:	1891      	adds	r1, r2, r2
 80057a2:	6439      	str	r1, [r7, #64]	; 0x40
 80057a4:	415b      	adcs	r3, r3
 80057a6:	647b      	str	r3, [r7, #68]	; 0x44
 80057a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057ac:	1912      	adds	r2, r2, r4
 80057ae:	eb45 0303 	adc.w	r3, r5, r3
 80057b2:	f04f 0000 	mov.w	r0, #0
 80057b6:	f04f 0100 	mov.w	r1, #0
 80057ba:	00d9      	lsls	r1, r3, #3
 80057bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057c0:	00d0      	lsls	r0, r2, #3
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	1911      	adds	r1, r2, r4
 80057c8:	6639      	str	r1, [r7, #96]	; 0x60
 80057ca:	416b      	adcs	r3, r5
 80057cc:	667b      	str	r3, [r7, #100]	; 0x64
 80057ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	461a      	mov	r2, r3
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	1891      	adds	r1, r2, r2
 80057da:	63b9      	str	r1, [r7, #56]	; 0x38
 80057dc:	415b      	adcs	r3, r3
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80057e8:	f7fb fa4e 	bl	8000c88 <__aeabi_uldivmod>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4ba5      	ldr	r3, [pc, #660]	; (8005a88 <UART_SetConfig+0x38c>)
 80057f2:	fba3 2302 	umull	r2, r3, r3, r2
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	011e      	lsls	r6, r3, #4
 80057fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057fc:	461c      	mov	r4, r3
 80057fe:	f04f 0500 	mov.w	r5, #0
 8005802:	4622      	mov	r2, r4
 8005804:	462b      	mov	r3, r5
 8005806:	1891      	adds	r1, r2, r2
 8005808:	6339      	str	r1, [r7, #48]	; 0x30
 800580a:	415b      	adcs	r3, r3
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
 800580e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005812:	1912      	adds	r2, r2, r4
 8005814:	eb45 0303 	adc.w	r3, r5, r3
 8005818:	f04f 0000 	mov.w	r0, #0
 800581c:	f04f 0100 	mov.w	r1, #0
 8005820:	00d9      	lsls	r1, r3, #3
 8005822:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005826:	00d0      	lsls	r0, r2, #3
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	1911      	adds	r1, r2, r4
 800582e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005830:	416b      	adcs	r3, r5
 8005832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	461a      	mov	r2, r3
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	1891      	adds	r1, r2, r2
 8005840:	62b9      	str	r1, [r7, #40]	; 0x28
 8005842:	415b      	adcs	r3, r3
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005846:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800584a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800584e:	f7fb fa1b 	bl	8000c88 <__aeabi_uldivmod>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4b8c      	ldr	r3, [pc, #560]	; (8005a88 <UART_SetConfig+0x38c>)
 8005858:	fba3 1302 	umull	r1, r3, r3, r2
 800585c:	095b      	lsrs	r3, r3, #5
 800585e:	2164      	movs	r1, #100	; 0x64
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	3332      	adds	r3, #50	; 0x32
 800586a:	4a87      	ldr	r2, [pc, #540]	; (8005a88 <UART_SetConfig+0x38c>)
 800586c:	fba2 2303 	umull	r2, r3, r2, r3
 8005870:	095b      	lsrs	r3, r3, #5
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005878:	441e      	add	r6, r3
 800587a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800587c:	4618      	mov	r0, r3
 800587e:	f04f 0100 	mov.w	r1, #0
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	1894      	adds	r4, r2, r2
 8005888:	623c      	str	r4, [r7, #32]
 800588a:	415b      	adcs	r3, r3
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
 800588e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005892:	1812      	adds	r2, r2, r0
 8005894:	eb41 0303 	adc.w	r3, r1, r3
 8005898:	f04f 0400 	mov.w	r4, #0
 800589c:	f04f 0500 	mov.w	r5, #0
 80058a0:	00dd      	lsls	r5, r3, #3
 80058a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058a6:	00d4      	lsls	r4, r2, #3
 80058a8:	4622      	mov	r2, r4
 80058aa:	462b      	mov	r3, r5
 80058ac:	1814      	adds	r4, r2, r0
 80058ae:	653c      	str	r4, [r7, #80]	; 0x50
 80058b0:	414b      	adcs	r3, r1
 80058b2:	657b      	str	r3, [r7, #84]	; 0x54
 80058b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	461a      	mov	r2, r3
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	1891      	adds	r1, r2, r2
 80058c0:	61b9      	str	r1, [r7, #24]
 80058c2:	415b      	adcs	r3, r3
 80058c4:	61fb      	str	r3, [r7, #28]
 80058c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80058ce:	f7fb f9db 	bl	8000c88 <__aeabi_uldivmod>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4b6c      	ldr	r3, [pc, #432]	; (8005a88 <UART_SetConfig+0x38c>)
 80058d8:	fba3 1302 	umull	r1, r3, r3, r2
 80058dc:	095b      	lsrs	r3, r3, #5
 80058de:	2164      	movs	r1, #100	; 0x64
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	3332      	adds	r3, #50	; 0x32
 80058ea:	4a67      	ldr	r2, [pc, #412]	; (8005a88 <UART_SetConfig+0x38c>)
 80058ec:	fba2 2303 	umull	r2, r3, r2, r3
 80058f0:	095b      	lsrs	r3, r3, #5
 80058f2:	f003 0207 	and.w	r2, r3, #7
 80058f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4432      	add	r2, r6
 80058fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058fe:	e0b9      	b.n	8005a74 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005902:	461c      	mov	r4, r3
 8005904:	f04f 0500 	mov.w	r5, #0
 8005908:	4622      	mov	r2, r4
 800590a:	462b      	mov	r3, r5
 800590c:	1891      	adds	r1, r2, r2
 800590e:	6139      	str	r1, [r7, #16]
 8005910:	415b      	adcs	r3, r3
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005918:	1912      	adds	r2, r2, r4
 800591a:	eb45 0303 	adc.w	r3, r5, r3
 800591e:	f04f 0000 	mov.w	r0, #0
 8005922:	f04f 0100 	mov.w	r1, #0
 8005926:	00d9      	lsls	r1, r3, #3
 8005928:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800592c:	00d0      	lsls	r0, r2, #3
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	eb12 0804 	adds.w	r8, r2, r4
 8005936:	eb43 0905 	adc.w	r9, r3, r5
 800593a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	4618      	mov	r0, r3
 8005940:	f04f 0100 	mov.w	r1, #0
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	008b      	lsls	r3, r1, #2
 800594e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005952:	0082      	lsls	r2, r0, #2
 8005954:	4640      	mov	r0, r8
 8005956:	4649      	mov	r1, r9
 8005958:	f7fb f996 	bl	8000c88 <__aeabi_uldivmod>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4b49      	ldr	r3, [pc, #292]	; (8005a88 <UART_SetConfig+0x38c>)
 8005962:	fba3 2302 	umull	r2, r3, r3, r2
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	011e      	lsls	r6, r3, #4
 800596a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800596c:	4618      	mov	r0, r3
 800596e:	f04f 0100 	mov.w	r1, #0
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	1894      	adds	r4, r2, r2
 8005978:	60bc      	str	r4, [r7, #8]
 800597a:	415b      	adcs	r3, r3
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005982:	1812      	adds	r2, r2, r0
 8005984:	eb41 0303 	adc.w	r3, r1, r3
 8005988:	f04f 0400 	mov.w	r4, #0
 800598c:	f04f 0500 	mov.w	r5, #0
 8005990:	00dd      	lsls	r5, r3, #3
 8005992:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005996:	00d4      	lsls	r4, r2, #3
 8005998:	4622      	mov	r2, r4
 800599a:	462b      	mov	r3, r5
 800599c:	1814      	adds	r4, r2, r0
 800599e:	64bc      	str	r4, [r7, #72]	; 0x48
 80059a0:	414b      	adcs	r3, r1
 80059a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f04f 0100 	mov.w	r1, #0
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	008b      	lsls	r3, r1, #2
 80059b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059bc:	0082      	lsls	r2, r0, #2
 80059be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80059c2:	f7fb f961 	bl	8000c88 <__aeabi_uldivmod>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4b2f      	ldr	r3, [pc, #188]	; (8005a88 <UART_SetConfig+0x38c>)
 80059cc:	fba3 1302 	umull	r1, r3, r3, r2
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	2164      	movs	r1, #100	; 0x64
 80059d4:	fb01 f303 	mul.w	r3, r1, r3
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	3332      	adds	r3, #50	; 0x32
 80059de:	4a2a      	ldr	r2, [pc, #168]	; (8005a88 <UART_SetConfig+0x38c>)
 80059e0:	fba2 2303 	umull	r2, r3, r2, r3
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059ea:	441e      	add	r6, r3
 80059ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ee:	4618      	mov	r0, r3
 80059f0:	f04f 0100 	mov.w	r1, #0
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	1894      	adds	r4, r2, r2
 80059fa:	603c      	str	r4, [r7, #0]
 80059fc:	415b      	adcs	r3, r3
 80059fe:	607b      	str	r3, [r7, #4]
 8005a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a04:	1812      	adds	r2, r2, r0
 8005a06:	eb41 0303 	adc.w	r3, r1, r3
 8005a0a:	f04f 0400 	mov.w	r4, #0
 8005a0e:	f04f 0500 	mov.w	r5, #0
 8005a12:	00dd      	lsls	r5, r3, #3
 8005a14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a18:	00d4      	lsls	r4, r2, #3
 8005a1a:	4622      	mov	r2, r4
 8005a1c:	462b      	mov	r3, r5
 8005a1e:	eb12 0a00 	adds.w	sl, r2, r0
 8005a22:	eb43 0b01 	adc.w	fp, r3, r1
 8005a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f04f 0100 	mov.w	r1, #0
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	008b      	lsls	r3, r1, #2
 8005a3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a3e:	0082      	lsls	r2, r0, #2
 8005a40:	4650      	mov	r0, sl
 8005a42:	4659      	mov	r1, fp
 8005a44:	f7fb f920 	bl	8000c88 <__aeabi_uldivmod>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4b0e      	ldr	r3, [pc, #56]	; (8005a88 <UART_SetConfig+0x38c>)
 8005a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	2164      	movs	r1, #100	; 0x64
 8005a56:	fb01 f303 	mul.w	r3, r1, r3
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	3332      	adds	r3, #50	; 0x32
 8005a60:	4a09      	ldr	r2, [pc, #36]	; (8005a88 <UART_SetConfig+0x38c>)
 8005a62:	fba2 2303 	umull	r2, r3, r2, r3
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	f003 020f 	and.w	r2, r3, #15
 8005a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4432      	add	r2, r6
 8005a72:	609a      	str	r2, [r3, #8]
}
 8005a74:	bf00      	nop
 8005a76:	377c      	adds	r7, #124	; 0x7c
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a7e:	bf00      	nop
 8005a80:	40011000 	.word	0x40011000
 8005a84:	40011400 	.word	0x40011400
 8005a88:	51eb851f 	.word	0x51eb851f

08005a8c <__errno>:
 8005a8c:	4b01      	ldr	r3, [pc, #4]	; (8005a94 <__errno+0x8>)
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	20000058 	.word	0x20000058

08005a98 <__libc_init_array>:
 8005a98:	b570      	push	{r4, r5, r6, lr}
 8005a9a:	4d0d      	ldr	r5, [pc, #52]	; (8005ad0 <__libc_init_array+0x38>)
 8005a9c:	4c0d      	ldr	r4, [pc, #52]	; (8005ad4 <__libc_init_array+0x3c>)
 8005a9e:	1b64      	subs	r4, r4, r5
 8005aa0:	10a4      	asrs	r4, r4, #2
 8005aa2:	2600      	movs	r6, #0
 8005aa4:	42a6      	cmp	r6, r4
 8005aa6:	d109      	bne.n	8005abc <__libc_init_array+0x24>
 8005aa8:	4d0b      	ldr	r5, [pc, #44]	; (8005ad8 <__libc_init_array+0x40>)
 8005aaa:	4c0c      	ldr	r4, [pc, #48]	; (8005adc <__libc_init_array+0x44>)
 8005aac:	f003 f86a 	bl	8008b84 <_init>
 8005ab0:	1b64      	subs	r4, r4, r5
 8005ab2:	10a4      	asrs	r4, r4, #2
 8005ab4:	2600      	movs	r6, #0
 8005ab6:	42a6      	cmp	r6, r4
 8005ab8:	d105      	bne.n	8005ac6 <__libc_init_array+0x2e>
 8005aba:	bd70      	pop	{r4, r5, r6, pc}
 8005abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac0:	4798      	blx	r3
 8005ac2:	3601      	adds	r6, #1
 8005ac4:	e7ee      	b.n	8005aa4 <__libc_init_array+0xc>
 8005ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aca:	4798      	blx	r3
 8005acc:	3601      	adds	r6, #1
 8005ace:	e7f2      	b.n	8005ab6 <__libc_init_array+0x1e>
 8005ad0:	08009020 	.word	0x08009020
 8005ad4:	08009020 	.word	0x08009020
 8005ad8:	08009020 	.word	0x08009020
 8005adc:	08009024 	.word	0x08009024

08005ae0 <memset>:
 8005ae0:	4402      	add	r2, r0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d100      	bne.n	8005aea <memset+0xa>
 8005ae8:	4770      	bx	lr
 8005aea:	f803 1b01 	strb.w	r1, [r3], #1
 8005aee:	e7f9      	b.n	8005ae4 <memset+0x4>

08005af0 <__cvt>:
 8005af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005af4:	ec55 4b10 	vmov	r4, r5, d0
 8005af8:	2d00      	cmp	r5, #0
 8005afa:	460e      	mov	r6, r1
 8005afc:	4619      	mov	r1, r3
 8005afe:	462b      	mov	r3, r5
 8005b00:	bfbb      	ittet	lt
 8005b02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005b06:	461d      	movlt	r5, r3
 8005b08:	2300      	movge	r3, #0
 8005b0a:	232d      	movlt	r3, #45	; 0x2d
 8005b0c:	700b      	strb	r3, [r1, #0]
 8005b0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005b14:	4691      	mov	r9, r2
 8005b16:	f023 0820 	bic.w	r8, r3, #32
 8005b1a:	bfbc      	itt	lt
 8005b1c:	4622      	movlt	r2, r4
 8005b1e:	4614      	movlt	r4, r2
 8005b20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b24:	d005      	beq.n	8005b32 <__cvt+0x42>
 8005b26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b2a:	d100      	bne.n	8005b2e <__cvt+0x3e>
 8005b2c:	3601      	adds	r6, #1
 8005b2e:	2102      	movs	r1, #2
 8005b30:	e000      	b.n	8005b34 <__cvt+0x44>
 8005b32:	2103      	movs	r1, #3
 8005b34:	ab03      	add	r3, sp, #12
 8005b36:	9301      	str	r3, [sp, #4]
 8005b38:	ab02      	add	r3, sp, #8
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	ec45 4b10 	vmov	d0, r4, r5
 8005b40:	4653      	mov	r3, sl
 8005b42:	4632      	mov	r2, r6
 8005b44:	f000 fda4 	bl	8006690 <_dtoa_r>
 8005b48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b4c:	4607      	mov	r7, r0
 8005b4e:	d102      	bne.n	8005b56 <__cvt+0x66>
 8005b50:	f019 0f01 	tst.w	r9, #1
 8005b54:	d022      	beq.n	8005b9c <__cvt+0xac>
 8005b56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b5a:	eb07 0906 	add.w	r9, r7, r6
 8005b5e:	d110      	bne.n	8005b82 <__cvt+0x92>
 8005b60:	783b      	ldrb	r3, [r7, #0]
 8005b62:	2b30      	cmp	r3, #48	; 0x30
 8005b64:	d10a      	bne.n	8005b7c <__cvt+0x8c>
 8005b66:	2200      	movs	r2, #0
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	f7fa ffcb 	bl	8000b08 <__aeabi_dcmpeq>
 8005b72:	b918      	cbnz	r0, 8005b7c <__cvt+0x8c>
 8005b74:	f1c6 0601 	rsb	r6, r6, #1
 8005b78:	f8ca 6000 	str.w	r6, [sl]
 8005b7c:	f8da 3000 	ldr.w	r3, [sl]
 8005b80:	4499      	add	r9, r3
 8005b82:	2200      	movs	r2, #0
 8005b84:	2300      	movs	r3, #0
 8005b86:	4620      	mov	r0, r4
 8005b88:	4629      	mov	r1, r5
 8005b8a:	f7fa ffbd 	bl	8000b08 <__aeabi_dcmpeq>
 8005b8e:	b108      	cbz	r0, 8005b94 <__cvt+0xa4>
 8005b90:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b94:	2230      	movs	r2, #48	; 0x30
 8005b96:	9b03      	ldr	r3, [sp, #12]
 8005b98:	454b      	cmp	r3, r9
 8005b9a:	d307      	bcc.n	8005bac <__cvt+0xbc>
 8005b9c:	9b03      	ldr	r3, [sp, #12]
 8005b9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ba0:	1bdb      	subs	r3, r3, r7
 8005ba2:	4638      	mov	r0, r7
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	b004      	add	sp, #16
 8005ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bac:	1c59      	adds	r1, r3, #1
 8005bae:	9103      	str	r1, [sp, #12]
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	e7f0      	b.n	8005b96 <__cvt+0xa6>

08005bb4 <__exponent>:
 8005bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2900      	cmp	r1, #0
 8005bba:	bfb8      	it	lt
 8005bbc:	4249      	neglt	r1, r1
 8005bbe:	f803 2b02 	strb.w	r2, [r3], #2
 8005bc2:	bfb4      	ite	lt
 8005bc4:	222d      	movlt	r2, #45	; 0x2d
 8005bc6:	222b      	movge	r2, #43	; 0x2b
 8005bc8:	2909      	cmp	r1, #9
 8005bca:	7042      	strb	r2, [r0, #1]
 8005bcc:	dd2a      	ble.n	8005c24 <__exponent+0x70>
 8005bce:	f10d 0407 	add.w	r4, sp, #7
 8005bd2:	46a4      	mov	ip, r4
 8005bd4:	270a      	movs	r7, #10
 8005bd6:	46a6      	mov	lr, r4
 8005bd8:	460a      	mov	r2, r1
 8005bda:	fb91 f6f7 	sdiv	r6, r1, r7
 8005bde:	fb07 1516 	mls	r5, r7, r6, r1
 8005be2:	3530      	adds	r5, #48	; 0x30
 8005be4:	2a63      	cmp	r2, #99	; 0x63
 8005be6:	f104 34ff 	add.w	r4, r4, #4294967295
 8005bea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005bee:	4631      	mov	r1, r6
 8005bf0:	dcf1      	bgt.n	8005bd6 <__exponent+0x22>
 8005bf2:	3130      	adds	r1, #48	; 0x30
 8005bf4:	f1ae 0502 	sub.w	r5, lr, #2
 8005bf8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005bfc:	1c44      	adds	r4, r0, #1
 8005bfe:	4629      	mov	r1, r5
 8005c00:	4561      	cmp	r1, ip
 8005c02:	d30a      	bcc.n	8005c1a <__exponent+0x66>
 8005c04:	f10d 0209 	add.w	r2, sp, #9
 8005c08:	eba2 020e 	sub.w	r2, r2, lr
 8005c0c:	4565      	cmp	r5, ip
 8005c0e:	bf88      	it	hi
 8005c10:	2200      	movhi	r2, #0
 8005c12:	4413      	add	r3, r2
 8005c14:	1a18      	subs	r0, r3, r0
 8005c16:	b003      	add	sp, #12
 8005c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c22:	e7ed      	b.n	8005c00 <__exponent+0x4c>
 8005c24:	2330      	movs	r3, #48	; 0x30
 8005c26:	3130      	adds	r1, #48	; 0x30
 8005c28:	7083      	strb	r3, [r0, #2]
 8005c2a:	70c1      	strb	r1, [r0, #3]
 8005c2c:	1d03      	adds	r3, r0, #4
 8005c2e:	e7f1      	b.n	8005c14 <__exponent+0x60>

08005c30 <_printf_float>:
 8005c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c34:	ed2d 8b02 	vpush	{d8}
 8005c38:	b08d      	sub	sp, #52	; 0x34
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005c40:	4616      	mov	r6, r2
 8005c42:	461f      	mov	r7, r3
 8005c44:	4605      	mov	r5, r0
 8005c46:	f001 fcc7 	bl	80075d8 <_localeconv_r>
 8005c4a:	f8d0 a000 	ldr.w	sl, [r0]
 8005c4e:	4650      	mov	r0, sl
 8005c50:	f7fa fade 	bl	8000210 <strlen>
 8005c54:	2300      	movs	r3, #0
 8005c56:	930a      	str	r3, [sp, #40]	; 0x28
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	9305      	str	r3, [sp, #20]
 8005c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c64:	3307      	adds	r3, #7
 8005c66:	f023 0307 	bic.w	r3, r3, #7
 8005c6a:	f103 0208 	add.w	r2, r3, #8
 8005c6e:	f8c8 2000 	str.w	r2, [r8]
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005c7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c82:	9307      	str	r3, [sp, #28]
 8005c84:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c88:	ee08 0a10 	vmov	s16, r0
 8005c8c:	4b9f      	ldr	r3, [pc, #636]	; (8005f0c <_printf_float+0x2dc>)
 8005c8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c92:	f04f 32ff 	mov.w	r2, #4294967295
 8005c96:	f7fa ff69 	bl	8000b6c <__aeabi_dcmpun>
 8005c9a:	bb88      	cbnz	r0, 8005d00 <_printf_float+0xd0>
 8005c9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ca0:	4b9a      	ldr	r3, [pc, #616]	; (8005f0c <_printf_float+0x2dc>)
 8005ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca6:	f7fa ff43 	bl	8000b30 <__aeabi_dcmple>
 8005caa:	bb48      	cbnz	r0, 8005d00 <_printf_float+0xd0>
 8005cac:	2200      	movs	r2, #0
 8005cae:	2300      	movs	r3, #0
 8005cb0:	4640      	mov	r0, r8
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	f7fa ff32 	bl	8000b1c <__aeabi_dcmplt>
 8005cb8:	b110      	cbz	r0, 8005cc0 <_printf_float+0x90>
 8005cba:	232d      	movs	r3, #45	; 0x2d
 8005cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cc0:	4b93      	ldr	r3, [pc, #588]	; (8005f10 <_printf_float+0x2e0>)
 8005cc2:	4894      	ldr	r0, [pc, #592]	; (8005f14 <_printf_float+0x2e4>)
 8005cc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005cc8:	bf94      	ite	ls
 8005cca:	4698      	movls	r8, r3
 8005ccc:	4680      	movhi	r8, r0
 8005cce:	2303      	movs	r3, #3
 8005cd0:	6123      	str	r3, [r4, #16]
 8005cd2:	9b05      	ldr	r3, [sp, #20]
 8005cd4:	f023 0204 	bic.w	r2, r3, #4
 8005cd8:	6022      	str	r2, [r4, #0]
 8005cda:	f04f 0900 	mov.w	r9, #0
 8005cde:	9700      	str	r7, [sp, #0]
 8005ce0:	4633      	mov	r3, r6
 8005ce2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f000 f9d8 	bl	800609c <_printf_common>
 8005cec:	3001      	adds	r0, #1
 8005cee:	f040 8090 	bne.w	8005e12 <_printf_float+0x1e2>
 8005cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf6:	b00d      	add	sp, #52	; 0x34
 8005cf8:	ecbd 8b02 	vpop	{d8}
 8005cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d00:	4642      	mov	r2, r8
 8005d02:	464b      	mov	r3, r9
 8005d04:	4640      	mov	r0, r8
 8005d06:	4649      	mov	r1, r9
 8005d08:	f7fa ff30 	bl	8000b6c <__aeabi_dcmpun>
 8005d0c:	b140      	cbz	r0, 8005d20 <_printf_float+0xf0>
 8005d0e:	464b      	mov	r3, r9
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	bfbc      	itt	lt
 8005d14:	232d      	movlt	r3, #45	; 0x2d
 8005d16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d1a:	487f      	ldr	r0, [pc, #508]	; (8005f18 <_printf_float+0x2e8>)
 8005d1c:	4b7f      	ldr	r3, [pc, #508]	; (8005f1c <_printf_float+0x2ec>)
 8005d1e:	e7d1      	b.n	8005cc4 <_printf_float+0x94>
 8005d20:	6863      	ldr	r3, [r4, #4]
 8005d22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d26:	9206      	str	r2, [sp, #24]
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	d13f      	bne.n	8005dac <_printf_float+0x17c>
 8005d2c:	2306      	movs	r3, #6
 8005d2e:	6063      	str	r3, [r4, #4]
 8005d30:	9b05      	ldr	r3, [sp, #20]
 8005d32:	6861      	ldr	r1, [r4, #4]
 8005d34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d38:	2300      	movs	r3, #0
 8005d3a:	9303      	str	r3, [sp, #12]
 8005d3c:	ab0a      	add	r3, sp, #40	; 0x28
 8005d3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005d42:	ab09      	add	r3, sp, #36	; 0x24
 8005d44:	ec49 8b10 	vmov	d0, r8, r9
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	6022      	str	r2, [r4, #0]
 8005d4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d50:	4628      	mov	r0, r5
 8005d52:	f7ff fecd 	bl	8005af0 <__cvt>
 8005d56:	9b06      	ldr	r3, [sp, #24]
 8005d58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d5a:	2b47      	cmp	r3, #71	; 0x47
 8005d5c:	4680      	mov	r8, r0
 8005d5e:	d108      	bne.n	8005d72 <_printf_float+0x142>
 8005d60:	1cc8      	adds	r0, r1, #3
 8005d62:	db02      	blt.n	8005d6a <_printf_float+0x13a>
 8005d64:	6863      	ldr	r3, [r4, #4]
 8005d66:	4299      	cmp	r1, r3
 8005d68:	dd41      	ble.n	8005dee <_printf_float+0x1be>
 8005d6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005d6e:	fa5f fb8b 	uxtb.w	fp, fp
 8005d72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d76:	d820      	bhi.n	8005dba <_printf_float+0x18a>
 8005d78:	3901      	subs	r1, #1
 8005d7a:	465a      	mov	r2, fp
 8005d7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d80:	9109      	str	r1, [sp, #36]	; 0x24
 8005d82:	f7ff ff17 	bl	8005bb4 <__exponent>
 8005d86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d88:	1813      	adds	r3, r2, r0
 8005d8a:	2a01      	cmp	r2, #1
 8005d8c:	4681      	mov	r9, r0
 8005d8e:	6123      	str	r3, [r4, #16]
 8005d90:	dc02      	bgt.n	8005d98 <_printf_float+0x168>
 8005d92:	6822      	ldr	r2, [r4, #0]
 8005d94:	07d2      	lsls	r2, r2, #31
 8005d96:	d501      	bpl.n	8005d9c <_printf_float+0x16c>
 8005d98:	3301      	adds	r3, #1
 8005d9a:	6123      	str	r3, [r4, #16]
 8005d9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d09c      	beq.n	8005cde <_printf_float+0xae>
 8005da4:	232d      	movs	r3, #45	; 0x2d
 8005da6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005daa:	e798      	b.n	8005cde <_printf_float+0xae>
 8005dac:	9a06      	ldr	r2, [sp, #24]
 8005dae:	2a47      	cmp	r2, #71	; 0x47
 8005db0:	d1be      	bne.n	8005d30 <_printf_float+0x100>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1bc      	bne.n	8005d30 <_printf_float+0x100>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e7b9      	b.n	8005d2e <_printf_float+0xfe>
 8005dba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005dbe:	d118      	bne.n	8005df2 <_printf_float+0x1c2>
 8005dc0:	2900      	cmp	r1, #0
 8005dc2:	6863      	ldr	r3, [r4, #4]
 8005dc4:	dd0b      	ble.n	8005dde <_printf_float+0x1ae>
 8005dc6:	6121      	str	r1, [r4, #16]
 8005dc8:	b913      	cbnz	r3, 8005dd0 <_printf_float+0x1a0>
 8005dca:	6822      	ldr	r2, [r4, #0]
 8005dcc:	07d0      	lsls	r0, r2, #31
 8005dce:	d502      	bpl.n	8005dd6 <_printf_float+0x1a6>
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	440b      	add	r3, r1
 8005dd4:	6123      	str	r3, [r4, #16]
 8005dd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005dd8:	f04f 0900 	mov.w	r9, #0
 8005ddc:	e7de      	b.n	8005d9c <_printf_float+0x16c>
 8005dde:	b913      	cbnz	r3, 8005de6 <_printf_float+0x1b6>
 8005de0:	6822      	ldr	r2, [r4, #0]
 8005de2:	07d2      	lsls	r2, r2, #31
 8005de4:	d501      	bpl.n	8005dea <_printf_float+0x1ba>
 8005de6:	3302      	adds	r3, #2
 8005de8:	e7f4      	b.n	8005dd4 <_printf_float+0x1a4>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e7f2      	b.n	8005dd4 <_printf_float+0x1a4>
 8005dee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005df4:	4299      	cmp	r1, r3
 8005df6:	db05      	blt.n	8005e04 <_printf_float+0x1d4>
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	6121      	str	r1, [r4, #16]
 8005dfc:	07d8      	lsls	r0, r3, #31
 8005dfe:	d5ea      	bpl.n	8005dd6 <_printf_float+0x1a6>
 8005e00:	1c4b      	adds	r3, r1, #1
 8005e02:	e7e7      	b.n	8005dd4 <_printf_float+0x1a4>
 8005e04:	2900      	cmp	r1, #0
 8005e06:	bfd4      	ite	le
 8005e08:	f1c1 0202 	rsble	r2, r1, #2
 8005e0c:	2201      	movgt	r2, #1
 8005e0e:	4413      	add	r3, r2
 8005e10:	e7e0      	b.n	8005dd4 <_printf_float+0x1a4>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	055a      	lsls	r2, r3, #21
 8005e16:	d407      	bmi.n	8005e28 <_printf_float+0x1f8>
 8005e18:	6923      	ldr	r3, [r4, #16]
 8005e1a:	4642      	mov	r2, r8
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	4628      	mov	r0, r5
 8005e20:	47b8      	blx	r7
 8005e22:	3001      	adds	r0, #1
 8005e24:	d12c      	bne.n	8005e80 <_printf_float+0x250>
 8005e26:	e764      	b.n	8005cf2 <_printf_float+0xc2>
 8005e28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e2c:	f240 80e0 	bls.w	8005ff0 <_printf_float+0x3c0>
 8005e30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e34:	2200      	movs	r2, #0
 8005e36:	2300      	movs	r3, #0
 8005e38:	f7fa fe66 	bl	8000b08 <__aeabi_dcmpeq>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d034      	beq.n	8005eaa <_printf_float+0x27a>
 8005e40:	4a37      	ldr	r2, [pc, #220]	; (8005f20 <_printf_float+0x2f0>)
 8005e42:	2301      	movs	r3, #1
 8005e44:	4631      	mov	r1, r6
 8005e46:	4628      	mov	r0, r5
 8005e48:	47b8      	blx	r7
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	f43f af51 	beq.w	8005cf2 <_printf_float+0xc2>
 8005e50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e54:	429a      	cmp	r2, r3
 8005e56:	db02      	blt.n	8005e5e <_printf_float+0x22e>
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	07d8      	lsls	r0, r3, #31
 8005e5c:	d510      	bpl.n	8005e80 <_printf_float+0x250>
 8005e5e:	ee18 3a10 	vmov	r3, s16
 8005e62:	4652      	mov	r2, sl
 8005e64:	4631      	mov	r1, r6
 8005e66:	4628      	mov	r0, r5
 8005e68:	47b8      	blx	r7
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	f43f af41 	beq.w	8005cf2 <_printf_float+0xc2>
 8005e70:	f04f 0800 	mov.w	r8, #0
 8005e74:	f104 091a 	add.w	r9, r4, #26
 8005e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	4543      	cmp	r3, r8
 8005e7e:	dc09      	bgt.n	8005e94 <_printf_float+0x264>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	079b      	lsls	r3, r3, #30
 8005e84:	f100 8105 	bmi.w	8006092 <_printf_float+0x462>
 8005e88:	68e0      	ldr	r0, [r4, #12]
 8005e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e8c:	4298      	cmp	r0, r3
 8005e8e:	bfb8      	it	lt
 8005e90:	4618      	movlt	r0, r3
 8005e92:	e730      	b.n	8005cf6 <_printf_float+0xc6>
 8005e94:	2301      	movs	r3, #1
 8005e96:	464a      	mov	r2, r9
 8005e98:	4631      	mov	r1, r6
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	47b8      	blx	r7
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	f43f af27 	beq.w	8005cf2 <_printf_float+0xc2>
 8005ea4:	f108 0801 	add.w	r8, r8, #1
 8005ea8:	e7e6      	b.n	8005e78 <_printf_float+0x248>
 8005eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	dc39      	bgt.n	8005f24 <_printf_float+0x2f4>
 8005eb0:	4a1b      	ldr	r2, [pc, #108]	; (8005f20 <_printf_float+0x2f0>)
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	4631      	mov	r1, r6
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	47b8      	blx	r7
 8005eba:	3001      	adds	r0, #1
 8005ebc:	f43f af19 	beq.w	8005cf2 <_printf_float+0xc2>
 8005ec0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	d102      	bne.n	8005ece <_printf_float+0x29e>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	07d9      	lsls	r1, r3, #31
 8005ecc:	d5d8      	bpl.n	8005e80 <_printf_float+0x250>
 8005ece:	ee18 3a10 	vmov	r3, s16
 8005ed2:	4652      	mov	r2, sl
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	47b8      	blx	r7
 8005eda:	3001      	adds	r0, #1
 8005edc:	f43f af09 	beq.w	8005cf2 <_printf_float+0xc2>
 8005ee0:	f04f 0900 	mov.w	r9, #0
 8005ee4:	f104 0a1a 	add.w	sl, r4, #26
 8005ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eea:	425b      	negs	r3, r3
 8005eec:	454b      	cmp	r3, r9
 8005eee:	dc01      	bgt.n	8005ef4 <_printf_float+0x2c4>
 8005ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef2:	e792      	b.n	8005e1a <_printf_float+0x1ea>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	4652      	mov	r2, sl
 8005ef8:	4631      	mov	r1, r6
 8005efa:	4628      	mov	r0, r5
 8005efc:	47b8      	blx	r7
 8005efe:	3001      	adds	r0, #1
 8005f00:	f43f aef7 	beq.w	8005cf2 <_printf_float+0xc2>
 8005f04:	f109 0901 	add.w	r9, r9, #1
 8005f08:	e7ee      	b.n	8005ee8 <_printf_float+0x2b8>
 8005f0a:	bf00      	nop
 8005f0c:	7fefffff 	.word	0x7fefffff
 8005f10:	08008bc4 	.word	0x08008bc4
 8005f14:	08008bc8 	.word	0x08008bc8
 8005f18:	08008bd0 	.word	0x08008bd0
 8005f1c:	08008bcc 	.word	0x08008bcc
 8005f20:	08008bd4 	.word	0x08008bd4
 8005f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	bfa8      	it	ge
 8005f2c:	461a      	movge	r2, r3
 8005f2e:	2a00      	cmp	r2, #0
 8005f30:	4691      	mov	r9, r2
 8005f32:	dc37      	bgt.n	8005fa4 <_printf_float+0x374>
 8005f34:	f04f 0b00 	mov.w	fp, #0
 8005f38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f3c:	f104 021a 	add.w	r2, r4, #26
 8005f40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f42:	9305      	str	r3, [sp, #20]
 8005f44:	eba3 0309 	sub.w	r3, r3, r9
 8005f48:	455b      	cmp	r3, fp
 8005f4a:	dc33      	bgt.n	8005fb4 <_printf_float+0x384>
 8005f4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f50:	429a      	cmp	r2, r3
 8005f52:	db3b      	blt.n	8005fcc <_printf_float+0x39c>
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	07da      	lsls	r2, r3, #31
 8005f58:	d438      	bmi.n	8005fcc <_printf_float+0x39c>
 8005f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f5c:	9b05      	ldr	r3, [sp, #20]
 8005f5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	eba2 0901 	sub.w	r9, r2, r1
 8005f66:	4599      	cmp	r9, r3
 8005f68:	bfa8      	it	ge
 8005f6a:	4699      	movge	r9, r3
 8005f6c:	f1b9 0f00 	cmp.w	r9, #0
 8005f70:	dc35      	bgt.n	8005fde <_printf_float+0x3ae>
 8005f72:	f04f 0800 	mov.w	r8, #0
 8005f76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f7a:	f104 0a1a 	add.w	sl, r4, #26
 8005f7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f82:	1a9b      	subs	r3, r3, r2
 8005f84:	eba3 0309 	sub.w	r3, r3, r9
 8005f88:	4543      	cmp	r3, r8
 8005f8a:	f77f af79 	ble.w	8005e80 <_printf_float+0x250>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	4652      	mov	r2, sl
 8005f92:	4631      	mov	r1, r6
 8005f94:	4628      	mov	r0, r5
 8005f96:	47b8      	blx	r7
 8005f98:	3001      	adds	r0, #1
 8005f9a:	f43f aeaa 	beq.w	8005cf2 <_printf_float+0xc2>
 8005f9e:	f108 0801 	add.w	r8, r8, #1
 8005fa2:	e7ec      	b.n	8005f7e <_printf_float+0x34e>
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4642      	mov	r2, r8
 8005faa:	4628      	mov	r0, r5
 8005fac:	47b8      	blx	r7
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d1c0      	bne.n	8005f34 <_printf_float+0x304>
 8005fb2:	e69e      	b.n	8005cf2 <_printf_float+0xc2>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4628      	mov	r0, r5
 8005fba:	9205      	str	r2, [sp, #20]
 8005fbc:	47b8      	blx	r7
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	f43f ae97 	beq.w	8005cf2 <_printf_float+0xc2>
 8005fc4:	9a05      	ldr	r2, [sp, #20]
 8005fc6:	f10b 0b01 	add.w	fp, fp, #1
 8005fca:	e7b9      	b.n	8005f40 <_printf_float+0x310>
 8005fcc:	ee18 3a10 	vmov	r3, s16
 8005fd0:	4652      	mov	r2, sl
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	47b8      	blx	r7
 8005fd8:	3001      	adds	r0, #1
 8005fda:	d1be      	bne.n	8005f5a <_printf_float+0x32a>
 8005fdc:	e689      	b.n	8005cf2 <_printf_float+0xc2>
 8005fde:	9a05      	ldr	r2, [sp, #20]
 8005fe0:	464b      	mov	r3, r9
 8005fe2:	4442      	add	r2, r8
 8005fe4:	4631      	mov	r1, r6
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	47b8      	blx	r7
 8005fea:	3001      	adds	r0, #1
 8005fec:	d1c1      	bne.n	8005f72 <_printf_float+0x342>
 8005fee:	e680      	b.n	8005cf2 <_printf_float+0xc2>
 8005ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ff2:	2a01      	cmp	r2, #1
 8005ff4:	dc01      	bgt.n	8005ffa <_printf_float+0x3ca>
 8005ff6:	07db      	lsls	r3, r3, #31
 8005ff8:	d538      	bpl.n	800606c <_printf_float+0x43c>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	4642      	mov	r2, r8
 8005ffe:	4631      	mov	r1, r6
 8006000:	4628      	mov	r0, r5
 8006002:	47b8      	blx	r7
 8006004:	3001      	adds	r0, #1
 8006006:	f43f ae74 	beq.w	8005cf2 <_printf_float+0xc2>
 800600a:	ee18 3a10 	vmov	r3, s16
 800600e:	4652      	mov	r2, sl
 8006010:	4631      	mov	r1, r6
 8006012:	4628      	mov	r0, r5
 8006014:	47b8      	blx	r7
 8006016:	3001      	adds	r0, #1
 8006018:	f43f ae6b 	beq.w	8005cf2 <_printf_float+0xc2>
 800601c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006020:	2200      	movs	r2, #0
 8006022:	2300      	movs	r3, #0
 8006024:	f7fa fd70 	bl	8000b08 <__aeabi_dcmpeq>
 8006028:	b9d8      	cbnz	r0, 8006062 <_printf_float+0x432>
 800602a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800602c:	f108 0201 	add.w	r2, r8, #1
 8006030:	3b01      	subs	r3, #1
 8006032:	4631      	mov	r1, r6
 8006034:	4628      	mov	r0, r5
 8006036:	47b8      	blx	r7
 8006038:	3001      	adds	r0, #1
 800603a:	d10e      	bne.n	800605a <_printf_float+0x42a>
 800603c:	e659      	b.n	8005cf2 <_printf_float+0xc2>
 800603e:	2301      	movs	r3, #1
 8006040:	4652      	mov	r2, sl
 8006042:	4631      	mov	r1, r6
 8006044:	4628      	mov	r0, r5
 8006046:	47b8      	blx	r7
 8006048:	3001      	adds	r0, #1
 800604a:	f43f ae52 	beq.w	8005cf2 <_printf_float+0xc2>
 800604e:	f108 0801 	add.w	r8, r8, #1
 8006052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006054:	3b01      	subs	r3, #1
 8006056:	4543      	cmp	r3, r8
 8006058:	dcf1      	bgt.n	800603e <_printf_float+0x40e>
 800605a:	464b      	mov	r3, r9
 800605c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006060:	e6dc      	b.n	8005e1c <_printf_float+0x1ec>
 8006062:	f04f 0800 	mov.w	r8, #0
 8006066:	f104 0a1a 	add.w	sl, r4, #26
 800606a:	e7f2      	b.n	8006052 <_printf_float+0x422>
 800606c:	2301      	movs	r3, #1
 800606e:	4642      	mov	r2, r8
 8006070:	e7df      	b.n	8006032 <_printf_float+0x402>
 8006072:	2301      	movs	r3, #1
 8006074:	464a      	mov	r2, r9
 8006076:	4631      	mov	r1, r6
 8006078:	4628      	mov	r0, r5
 800607a:	47b8      	blx	r7
 800607c:	3001      	adds	r0, #1
 800607e:	f43f ae38 	beq.w	8005cf2 <_printf_float+0xc2>
 8006082:	f108 0801 	add.w	r8, r8, #1
 8006086:	68e3      	ldr	r3, [r4, #12]
 8006088:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800608a:	1a5b      	subs	r3, r3, r1
 800608c:	4543      	cmp	r3, r8
 800608e:	dcf0      	bgt.n	8006072 <_printf_float+0x442>
 8006090:	e6fa      	b.n	8005e88 <_printf_float+0x258>
 8006092:	f04f 0800 	mov.w	r8, #0
 8006096:	f104 0919 	add.w	r9, r4, #25
 800609a:	e7f4      	b.n	8006086 <_printf_float+0x456>

0800609c <_printf_common>:
 800609c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a0:	4616      	mov	r6, r2
 80060a2:	4699      	mov	r9, r3
 80060a4:	688a      	ldr	r2, [r1, #8]
 80060a6:	690b      	ldr	r3, [r1, #16]
 80060a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060ac:	4293      	cmp	r3, r2
 80060ae:	bfb8      	it	lt
 80060b0:	4613      	movlt	r3, r2
 80060b2:	6033      	str	r3, [r6, #0]
 80060b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060b8:	4607      	mov	r7, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	b10a      	cbz	r2, 80060c2 <_printf_common+0x26>
 80060be:	3301      	adds	r3, #1
 80060c0:	6033      	str	r3, [r6, #0]
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	0699      	lsls	r1, r3, #26
 80060c6:	bf42      	ittt	mi
 80060c8:	6833      	ldrmi	r3, [r6, #0]
 80060ca:	3302      	addmi	r3, #2
 80060cc:	6033      	strmi	r3, [r6, #0]
 80060ce:	6825      	ldr	r5, [r4, #0]
 80060d0:	f015 0506 	ands.w	r5, r5, #6
 80060d4:	d106      	bne.n	80060e4 <_printf_common+0x48>
 80060d6:	f104 0a19 	add.w	sl, r4, #25
 80060da:	68e3      	ldr	r3, [r4, #12]
 80060dc:	6832      	ldr	r2, [r6, #0]
 80060de:	1a9b      	subs	r3, r3, r2
 80060e0:	42ab      	cmp	r3, r5
 80060e2:	dc26      	bgt.n	8006132 <_printf_common+0x96>
 80060e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060e8:	1e13      	subs	r3, r2, #0
 80060ea:	6822      	ldr	r2, [r4, #0]
 80060ec:	bf18      	it	ne
 80060ee:	2301      	movne	r3, #1
 80060f0:	0692      	lsls	r2, r2, #26
 80060f2:	d42b      	bmi.n	800614c <_printf_common+0xb0>
 80060f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060f8:	4649      	mov	r1, r9
 80060fa:	4638      	mov	r0, r7
 80060fc:	47c0      	blx	r8
 80060fe:	3001      	adds	r0, #1
 8006100:	d01e      	beq.n	8006140 <_printf_common+0xa4>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	68e5      	ldr	r5, [r4, #12]
 8006106:	6832      	ldr	r2, [r6, #0]
 8006108:	f003 0306 	and.w	r3, r3, #6
 800610c:	2b04      	cmp	r3, #4
 800610e:	bf08      	it	eq
 8006110:	1aad      	subeq	r5, r5, r2
 8006112:	68a3      	ldr	r3, [r4, #8]
 8006114:	6922      	ldr	r2, [r4, #16]
 8006116:	bf0c      	ite	eq
 8006118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800611c:	2500      	movne	r5, #0
 800611e:	4293      	cmp	r3, r2
 8006120:	bfc4      	itt	gt
 8006122:	1a9b      	subgt	r3, r3, r2
 8006124:	18ed      	addgt	r5, r5, r3
 8006126:	2600      	movs	r6, #0
 8006128:	341a      	adds	r4, #26
 800612a:	42b5      	cmp	r5, r6
 800612c:	d11a      	bne.n	8006164 <_printf_common+0xc8>
 800612e:	2000      	movs	r0, #0
 8006130:	e008      	b.n	8006144 <_printf_common+0xa8>
 8006132:	2301      	movs	r3, #1
 8006134:	4652      	mov	r2, sl
 8006136:	4649      	mov	r1, r9
 8006138:	4638      	mov	r0, r7
 800613a:	47c0      	blx	r8
 800613c:	3001      	adds	r0, #1
 800613e:	d103      	bne.n	8006148 <_printf_common+0xac>
 8006140:	f04f 30ff 	mov.w	r0, #4294967295
 8006144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006148:	3501      	adds	r5, #1
 800614a:	e7c6      	b.n	80060da <_printf_common+0x3e>
 800614c:	18e1      	adds	r1, r4, r3
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	2030      	movs	r0, #48	; 0x30
 8006152:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006156:	4422      	add	r2, r4
 8006158:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800615c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006160:	3302      	adds	r3, #2
 8006162:	e7c7      	b.n	80060f4 <_printf_common+0x58>
 8006164:	2301      	movs	r3, #1
 8006166:	4622      	mov	r2, r4
 8006168:	4649      	mov	r1, r9
 800616a:	4638      	mov	r0, r7
 800616c:	47c0      	blx	r8
 800616e:	3001      	adds	r0, #1
 8006170:	d0e6      	beq.n	8006140 <_printf_common+0xa4>
 8006172:	3601      	adds	r6, #1
 8006174:	e7d9      	b.n	800612a <_printf_common+0x8e>
	...

08006178 <_printf_i>:
 8006178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800617c:	460c      	mov	r4, r1
 800617e:	4691      	mov	r9, r2
 8006180:	7e27      	ldrb	r7, [r4, #24]
 8006182:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006184:	2f78      	cmp	r7, #120	; 0x78
 8006186:	4680      	mov	r8, r0
 8006188:	469a      	mov	sl, r3
 800618a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800618e:	d807      	bhi.n	80061a0 <_printf_i+0x28>
 8006190:	2f62      	cmp	r7, #98	; 0x62
 8006192:	d80a      	bhi.n	80061aa <_printf_i+0x32>
 8006194:	2f00      	cmp	r7, #0
 8006196:	f000 80d8 	beq.w	800634a <_printf_i+0x1d2>
 800619a:	2f58      	cmp	r7, #88	; 0x58
 800619c:	f000 80a3 	beq.w	80062e6 <_printf_i+0x16e>
 80061a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061a8:	e03a      	b.n	8006220 <_printf_i+0xa8>
 80061aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061ae:	2b15      	cmp	r3, #21
 80061b0:	d8f6      	bhi.n	80061a0 <_printf_i+0x28>
 80061b2:	a001      	add	r0, pc, #4	; (adr r0, 80061b8 <_printf_i+0x40>)
 80061b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80061b8:	08006211 	.word	0x08006211
 80061bc:	08006225 	.word	0x08006225
 80061c0:	080061a1 	.word	0x080061a1
 80061c4:	080061a1 	.word	0x080061a1
 80061c8:	080061a1 	.word	0x080061a1
 80061cc:	080061a1 	.word	0x080061a1
 80061d0:	08006225 	.word	0x08006225
 80061d4:	080061a1 	.word	0x080061a1
 80061d8:	080061a1 	.word	0x080061a1
 80061dc:	080061a1 	.word	0x080061a1
 80061e0:	080061a1 	.word	0x080061a1
 80061e4:	08006331 	.word	0x08006331
 80061e8:	08006255 	.word	0x08006255
 80061ec:	08006313 	.word	0x08006313
 80061f0:	080061a1 	.word	0x080061a1
 80061f4:	080061a1 	.word	0x080061a1
 80061f8:	08006353 	.word	0x08006353
 80061fc:	080061a1 	.word	0x080061a1
 8006200:	08006255 	.word	0x08006255
 8006204:	080061a1 	.word	0x080061a1
 8006208:	080061a1 	.word	0x080061a1
 800620c:	0800631b 	.word	0x0800631b
 8006210:	680b      	ldr	r3, [r1, #0]
 8006212:	1d1a      	adds	r2, r3, #4
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	600a      	str	r2, [r1, #0]
 8006218:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800621c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006220:	2301      	movs	r3, #1
 8006222:	e0a3      	b.n	800636c <_printf_i+0x1f4>
 8006224:	6825      	ldr	r5, [r4, #0]
 8006226:	6808      	ldr	r0, [r1, #0]
 8006228:	062e      	lsls	r6, r5, #24
 800622a:	f100 0304 	add.w	r3, r0, #4
 800622e:	d50a      	bpl.n	8006246 <_printf_i+0xce>
 8006230:	6805      	ldr	r5, [r0, #0]
 8006232:	600b      	str	r3, [r1, #0]
 8006234:	2d00      	cmp	r5, #0
 8006236:	da03      	bge.n	8006240 <_printf_i+0xc8>
 8006238:	232d      	movs	r3, #45	; 0x2d
 800623a:	426d      	negs	r5, r5
 800623c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006240:	485e      	ldr	r0, [pc, #376]	; (80063bc <_printf_i+0x244>)
 8006242:	230a      	movs	r3, #10
 8006244:	e019      	b.n	800627a <_printf_i+0x102>
 8006246:	f015 0f40 	tst.w	r5, #64	; 0x40
 800624a:	6805      	ldr	r5, [r0, #0]
 800624c:	600b      	str	r3, [r1, #0]
 800624e:	bf18      	it	ne
 8006250:	b22d      	sxthne	r5, r5
 8006252:	e7ef      	b.n	8006234 <_printf_i+0xbc>
 8006254:	680b      	ldr	r3, [r1, #0]
 8006256:	6825      	ldr	r5, [r4, #0]
 8006258:	1d18      	adds	r0, r3, #4
 800625a:	6008      	str	r0, [r1, #0]
 800625c:	0628      	lsls	r0, r5, #24
 800625e:	d501      	bpl.n	8006264 <_printf_i+0xec>
 8006260:	681d      	ldr	r5, [r3, #0]
 8006262:	e002      	b.n	800626a <_printf_i+0xf2>
 8006264:	0669      	lsls	r1, r5, #25
 8006266:	d5fb      	bpl.n	8006260 <_printf_i+0xe8>
 8006268:	881d      	ldrh	r5, [r3, #0]
 800626a:	4854      	ldr	r0, [pc, #336]	; (80063bc <_printf_i+0x244>)
 800626c:	2f6f      	cmp	r7, #111	; 0x6f
 800626e:	bf0c      	ite	eq
 8006270:	2308      	moveq	r3, #8
 8006272:	230a      	movne	r3, #10
 8006274:	2100      	movs	r1, #0
 8006276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800627a:	6866      	ldr	r6, [r4, #4]
 800627c:	60a6      	str	r6, [r4, #8]
 800627e:	2e00      	cmp	r6, #0
 8006280:	bfa2      	ittt	ge
 8006282:	6821      	ldrge	r1, [r4, #0]
 8006284:	f021 0104 	bicge.w	r1, r1, #4
 8006288:	6021      	strge	r1, [r4, #0]
 800628a:	b90d      	cbnz	r5, 8006290 <_printf_i+0x118>
 800628c:	2e00      	cmp	r6, #0
 800628e:	d04d      	beq.n	800632c <_printf_i+0x1b4>
 8006290:	4616      	mov	r6, r2
 8006292:	fbb5 f1f3 	udiv	r1, r5, r3
 8006296:	fb03 5711 	mls	r7, r3, r1, r5
 800629a:	5dc7      	ldrb	r7, [r0, r7]
 800629c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062a0:	462f      	mov	r7, r5
 80062a2:	42bb      	cmp	r3, r7
 80062a4:	460d      	mov	r5, r1
 80062a6:	d9f4      	bls.n	8006292 <_printf_i+0x11a>
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d10b      	bne.n	80062c4 <_printf_i+0x14c>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	07df      	lsls	r7, r3, #31
 80062b0:	d508      	bpl.n	80062c4 <_printf_i+0x14c>
 80062b2:	6923      	ldr	r3, [r4, #16]
 80062b4:	6861      	ldr	r1, [r4, #4]
 80062b6:	4299      	cmp	r1, r3
 80062b8:	bfde      	ittt	le
 80062ba:	2330      	movle	r3, #48	; 0x30
 80062bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062c4:	1b92      	subs	r2, r2, r6
 80062c6:	6122      	str	r2, [r4, #16]
 80062c8:	f8cd a000 	str.w	sl, [sp]
 80062cc:	464b      	mov	r3, r9
 80062ce:	aa03      	add	r2, sp, #12
 80062d0:	4621      	mov	r1, r4
 80062d2:	4640      	mov	r0, r8
 80062d4:	f7ff fee2 	bl	800609c <_printf_common>
 80062d8:	3001      	adds	r0, #1
 80062da:	d14c      	bne.n	8006376 <_printf_i+0x1fe>
 80062dc:	f04f 30ff 	mov.w	r0, #4294967295
 80062e0:	b004      	add	sp, #16
 80062e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e6:	4835      	ldr	r0, [pc, #212]	; (80063bc <_printf_i+0x244>)
 80062e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	680e      	ldr	r6, [r1, #0]
 80062f0:	061f      	lsls	r7, r3, #24
 80062f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80062f6:	600e      	str	r6, [r1, #0]
 80062f8:	d514      	bpl.n	8006324 <_printf_i+0x1ac>
 80062fa:	07d9      	lsls	r1, r3, #31
 80062fc:	bf44      	itt	mi
 80062fe:	f043 0320 	orrmi.w	r3, r3, #32
 8006302:	6023      	strmi	r3, [r4, #0]
 8006304:	b91d      	cbnz	r5, 800630e <_printf_i+0x196>
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	f023 0320 	bic.w	r3, r3, #32
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	2310      	movs	r3, #16
 8006310:	e7b0      	b.n	8006274 <_printf_i+0xfc>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	f043 0320 	orr.w	r3, r3, #32
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	2378      	movs	r3, #120	; 0x78
 800631c:	4828      	ldr	r0, [pc, #160]	; (80063c0 <_printf_i+0x248>)
 800631e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006322:	e7e3      	b.n	80062ec <_printf_i+0x174>
 8006324:	065e      	lsls	r6, r3, #25
 8006326:	bf48      	it	mi
 8006328:	b2ad      	uxthmi	r5, r5
 800632a:	e7e6      	b.n	80062fa <_printf_i+0x182>
 800632c:	4616      	mov	r6, r2
 800632e:	e7bb      	b.n	80062a8 <_printf_i+0x130>
 8006330:	680b      	ldr	r3, [r1, #0]
 8006332:	6826      	ldr	r6, [r4, #0]
 8006334:	6960      	ldr	r0, [r4, #20]
 8006336:	1d1d      	adds	r5, r3, #4
 8006338:	600d      	str	r5, [r1, #0]
 800633a:	0635      	lsls	r5, r6, #24
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	d501      	bpl.n	8006344 <_printf_i+0x1cc>
 8006340:	6018      	str	r0, [r3, #0]
 8006342:	e002      	b.n	800634a <_printf_i+0x1d2>
 8006344:	0671      	lsls	r1, r6, #25
 8006346:	d5fb      	bpl.n	8006340 <_printf_i+0x1c8>
 8006348:	8018      	strh	r0, [r3, #0]
 800634a:	2300      	movs	r3, #0
 800634c:	6123      	str	r3, [r4, #16]
 800634e:	4616      	mov	r6, r2
 8006350:	e7ba      	b.n	80062c8 <_printf_i+0x150>
 8006352:	680b      	ldr	r3, [r1, #0]
 8006354:	1d1a      	adds	r2, r3, #4
 8006356:	600a      	str	r2, [r1, #0]
 8006358:	681e      	ldr	r6, [r3, #0]
 800635a:	6862      	ldr	r2, [r4, #4]
 800635c:	2100      	movs	r1, #0
 800635e:	4630      	mov	r0, r6
 8006360:	f7f9 ff5e 	bl	8000220 <memchr>
 8006364:	b108      	cbz	r0, 800636a <_printf_i+0x1f2>
 8006366:	1b80      	subs	r0, r0, r6
 8006368:	6060      	str	r0, [r4, #4]
 800636a:	6863      	ldr	r3, [r4, #4]
 800636c:	6123      	str	r3, [r4, #16]
 800636e:	2300      	movs	r3, #0
 8006370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006374:	e7a8      	b.n	80062c8 <_printf_i+0x150>
 8006376:	6923      	ldr	r3, [r4, #16]
 8006378:	4632      	mov	r2, r6
 800637a:	4649      	mov	r1, r9
 800637c:	4640      	mov	r0, r8
 800637e:	47d0      	blx	sl
 8006380:	3001      	adds	r0, #1
 8006382:	d0ab      	beq.n	80062dc <_printf_i+0x164>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	079b      	lsls	r3, r3, #30
 8006388:	d413      	bmi.n	80063b2 <_printf_i+0x23a>
 800638a:	68e0      	ldr	r0, [r4, #12]
 800638c:	9b03      	ldr	r3, [sp, #12]
 800638e:	4298      	cmp	r0, r3
 8006390:	bfb8      	it	lt
 8006392:	4618      	movlt	r0, r3
 8006394:	e7a4      	b.n	80062e0 <_printf_i+0x168>
 8006396:	2301      	movs	r3, #1
 8006398:	4632      	mov	r2, r6
 800639a:	4649      	mov	r1, r9
 800639c:	4640      	mov	r0, r8
 800639e:	47d0      	blx	sl
 80063a0:	3001      	adds	r0, #1
 80063a2:	d09b      	beq.n	80062dc <_printf_i+0x164>
 80063a4:	3501      	adds	r5, #1
 80063a6:	68e3      	ldr	r3, [r4, #12]
 80063a8:	9903      	ldr	r1, [sp, #12]
 80063aa:	1a5b      	subs	r3, r3, r1
 80063ac:	42ab      	cmp	r3, r5
 80063ae:	dcf2      	bgt.n	8006396 <_printf_i+0x21e>
 80063b0:	e7eb      	b.n	800638a <_printf_i+0x212>
 80063b2:	2500      	movs	r5, #0
 80063b4:	f104 0619 	add.w	r6, r4, #25
 80063b8:	e7f5      	b.n	80063a6 <_printf_i+0x22e>
 80063ba:	bf00      	nop
 80063bc:	08008bd6 	.word	0x08008bd6
 80063c0:	08008be7 	.word	0x08008be7

080063c4 <iprintf>:
 80063c4:	b40f      	push	{r0, r1, r2, r3}
 80063c6:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <iprintf+0x2c>)
 80063c8:	b513      	push	{r0, r1, r4, lr}
 80063ca:	681c      	ldr	r4, [r3, #0]
 80063cc:	b124      	cbz	r4, 80063d8 <iprintf+0x14>
 80063ce:	69a3      	ldr	r3, [r4, #24]
 80063d0:	b913      	cbnz	r3, 80063d8 <iprintf+0x14>
 80063d2:	4620      	mov	r0, r4
 80063d4:	f001 f862 	bl	800749c <__sinit>
 80063d8:	ab05      	add	r3, sp, #20
 80063da:	9a04      	ldr	r2, [sp, #16]
 80063dc:	68a1      	ldr	r1, [r4, #8]
 80063de:	9301      	str	r3, [sp, #4]
 80063e0:	4620      	mov	r0, r4
 80063e2:	f001 fddd 	bl	8007fa0 <_vfiprintf_r>
 80063e6:	b002      	add	sp, #8
 80063e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063ec:	b004      	add	sp, #16
 80063ee:	4770      	bx	lr
 80063f0:	20000058 	.word	0x20000058

080063f4 <__swbuf_r>:
 80063f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f6:	460e      	mov	r6, r1
 80063f8:	4614      	mov	r4, r2
 80063fa:	4605      	mov	r5, r0
 80063fc:	b118      	cbz	r0, 8006406 <__swbuf_r+0x12>
 80063fe:	6983      	ldr	r3, [r0, #24]
 8006400:	b90b      	cbnz	r3, 8006406 <__swbuf_r+0x12>
 8006402:	f001 f84b 	bl	800749c <__sinit>
 8006406:	4b21      	ldr	r3, [pc, #132]	; (800648c <__swbuf_r+0x98>)
 8006408:	429c      	cmp	r4, r3
 800640a:	d12b      	bne.n	8006464 <__swbuf_r+0x70>
 800640c:	686c      	ldr	r4, [r5, #4]
 800640e:	69a3      	ldr	r3, [r4, #24]
 8006410:	60a3      	str	r3, [r4, #8]
 8006412:	89a3      	ldrh	r3, [r4, #12]
 8006414:	071a      	lsls	r2, r3, #28
 8006416:	d52f      	bpl.n	8006478 <__swbuf_r+0x84>
 8006418:	6923      	ldr	r3, [r4, #16]
 800641a:	b36b      	cbz	r3, 8006478 <__swbuf_r+0x84>
 800641c:	6923      	ldr	r3, [r4, #16]
 800641e:	6820      	ldr	r0, [r4, #0]
 8006420:	1ac0      	subs	r0, r0, r3
 8006422:	6963      	ldr	r3, [r4, #20]
 8006424:	b2f6      	uxtb	r6, r6
 8006426:	4283      	cmp	r3, r0
 8006428:	4637      	mov	r7, r6
 800642a:	dc04      	bgt.n	8006436 <__swbuf_r+0x42>
 800642c:	4621      	mov	r1, r4
 800642e:	4628      	mov	r0, r5
 8006430:	f000 ffa0 	bl	8007374 <_fflush_r>
 8006434:	bb30      	cbnz	r0, 8006484 <__swbuf_r+0x90>
 8006436:	68a3      	ldr	r3, [r4, #8]
 8006438:	3b01      	subs	r3, #1
 800643a:	60a3      	str	r3, [r4, #8]
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	6022      	str	r2, [r4, #0]
 8006442:	701e      	strb	r6, [r3, #0]
 8006444:	6963      	ldr	r3, [r4, #20]
 8006446:	3001      	adds	r0, #1
 8006448:	4283      	cmp	r3, r0
 800644a:	d004      	beq.n	8006456 <__swbuf_r+0x62>
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	07db      	lsls	r3, r3, #31
 8006450:	d506      	bpl.n	8006460 <__swbuf_r+0x6c>
 8006452:	2e0a      	cmp	r6, #10
 8006454:	d104      	bne.n	8006460 <__swbuf_r+0x6c>
 8006456:	4621      	mov	r1, r4
 8006458:	4628      	mov	r0, r5
 800645a:	f000 ff8b 	bl	8007374 <_fflush_r>
 800645e:	b988      	cbnz	r0, 8006484 <__swbuf_r+0x90>
 8006460:	4638      	mov	r0, r7
 8006462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006464:	4b0a      	ldr	r3, [pc, #40]	; (8006490 <__swbuf_r+0x9c>)
 8006466:	429c      	cmp	r4, r3
 8006468:	d101      	bne.n	800646e <__swbuf_r+0x7a>
 800646a:	68ac      	ldr	r4, [r5, #8]
 800646c:	e7cf      	b.n	800640e <__swbuf_r+0x1a>
 800646e:	4b09      	ldr	r3, [pc, #36]	; (8006494 <__swbuf_r+0xa0>)
 8006470:	429c      	cmp	r4, r3
 8006472:	bf08      	it	eq
 8006474:	68ec      	ldreq	r4, [r5, #12]
 8006476:	e7ca      	b.n	800640e <__swbuf_r+0x1a>
 8006478:	4621      	mov	r1, r4
 800647a:	4628      	mov	r0, r5
 800647c:	f000 f80c 	bl	8006498 <__swsetup_r>
 8006480:	2800      	cmp	r0, #0
 8006482:	d0cb      	beq.n	800641c <__swbuf_r+0x28>
 8006484:	f04f 37ff 	mov.w	r7, #4294967295
 8006488:	e7ea      	b.n	8006460 <__swbuf_r+0x6c>
 800648a:	bf00      	nop
 800648c:	08008cac 	.word	0x08008cac
 8006490:	08008ccc 	.word	0x08008ccc
 8006494:	08008c8c 	.word	0x08008c8c

08006498 <__swsetup_r>:
 8006498:	4b32      	ldr	r3, [pc, #200]	; (8006564 <__swsetup_r+0xcc>)
 800649a:	b570      	push	{r4, r5, r6, lr}
 800649c:	681d      	ldr	r5, [r3, #0]
 800649e:	4606      	mov	r6, r0
 80064a0:	460c      	mov	r4, r1
 80064a2:	b125      	cbz	r5, 80064ae <__swsetup_r+0x16>
 80064a4:	69ab      	ldr	r3, [r5, #24]
 80064a6:	b913      	cbnz	r3, 80064ae <__swsetup_r+0x16>
 80064a8:	4628      	mov	r0, r5
 80064aa:	f000 fff7 	bl	800749c <__sinit>
 80064ae:	4b2e      	ldr	r3, [pc, #184]	; (8006568 <__swsetup_r+0xd0>)
 80064b0:	429c      	cmp	r4, r3
 80064b2:	d10f      	bne.n	80064d4 <__swsetup_r+0x3c>
 80064b4:	686c      	ldr	r4, [r5, #4]
 80064b6:	89a3      	ldrh	r3, [r4, #12]
 80064b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064bc:	0719      	lsls	r1, r3, #28
 80064be:	d42c      	bmi.n	800651a <__swsetup_r+0x82>
 80064c0:	06dd      	lsls	r5, r3, #27
 80064c2:	d411      	bmi.n	80064e8 <__swsetup_r+0x50>
 80064c4:	2309      	movs	r3, #9
 80064c6:	6033      	str	r3, [r6, #0]
 80064c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80064cc:	81a3      	strh	r3, [r4, #12]
 80064ce:	f04f 30ff 	mov.w	r0, #4294967295
 80064d2:	e03e      	b.n	8006552 <__swsetup_r+0xba>
 80064d4:	4b25      	ldr	r3, [pc, #148]	; (800656c <__swsetup_r+0xd4>)
 80064d6:	429c      	cmp	r4, r3
 80064d8:	d101      	bne.n	80064de <__swsetup_r+0x46>
 80064da:	68ac      	ldr	r4, [r5, #8]
 80064dc:	e7eb      	b.n	80064b6 <__swsetup_r+0x1e>
 80064de:	4b24      	ldr	r3, [pc, #144]	; (8006570 <__swsetup_r+0xd8>)
 80064e0:	429c      	cmp	r4, r3
 80064e2:	bf08      	it	eq
 80064e4:	68ec      	ldreq	r4, [r5, #12]
 80064e6:	e7e6      	b.n	80064b6 <__swsetup_r+0x1e>
 80064e8:	0758      	lsls	r0, r3, #29
 80064ea:	d512      	bpl.n	8006512 <__swsetup_r+0x7a>
 80064ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064ee:	b141      	cbz	r1, 8006502 <__swsetup_r+0x6a>
 80064f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064f4:	4299      	cmp	r1, r3
 80064f6:	d002      	beq.n	80064fe <__swsetup_r+0x66>
 80064f8:	4630      	mov	r0, r6
 80064fa:	f001 fc7d 	bl	8007df8 <_free_r>
 80064fe:	2300      	movs	r3, #0
 8006500:	6363      	str	r3, [r4, #52]	; 0x34
 8006502:	89a3      	ldrh	r3, [r4, #12]
 8006504:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006508:	81a3      	strh	r3, [r4, #12]
 800650a:	2300      	movs	r3, #0
 800650c:	6063      	str	r3, [r4, #4]
 800650e:	6923      	ldr	r3, [r4, #16]
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	f043 0308 	orr.w	r3, r3, #8
 8006518:	81a3      	strh	r3, [r4, #12]
 800651a:	6923      	ldr	r3, [r4, #16]
 800651c:	b94b      	cbnz	r3, 8006532 <__swsetup_r+0x9a>
 800651e:	89a3      	ldrh	r3, [r4, #12]
 8006520:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006528:	d003      	beq.n	8006532 <__swsetup_r+0x9a>
 800652a:	4621      	mov	r1, r4
 800652c:	4630      	mov	r0, r6
 800652e:	f001 f87f 	bl	8007630 <__smakebuf_r>
 8006532:	89a0      	ldrh	r0, [r4, #12]
 8006534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006538:	f010 0301 	ands.w	r3, r0, #1
 800653c:	d00a      	beq.n	8006554 <__swsetup_r+0xbc>
 800653e:	2300      	movs	r3, #0
 8006540:	60a3      	str	r3, [r4, #8]
 8006542:	6963      	ldr	r3, [r4, #20]
 8006544:	425b      	negs	r3, r3
 8006546:	61a3      	str	r3, [r4, #24]
 8006548:	6923      	ldr	r3, [r4, #16]
 800654a:	b943      	cbnz	r3, 800655e <__swsetup_r+0xc6>
 800654c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006550:	d1ba      	bne.n	80064c8 <__swsetup_r+0x30>
 8006552:	bd70      	pop	{r4, r5, r6, pc}
 8006554:	0781      	lsls	r1, r0, #30
 8006556:	bf58      	it	pl
 8006558:	6963      	ldrpl	r3, [r4, #20]
 800655a:	60a3      	str	r3, [r4, #8]
 800655c:	e7f4      	b.n	8006548 <__swsetup_r+0xb0>
 800655e:	2000      	movs	r0, #0
 8006560:	e7f7      	b.n	8006552 <__swsetup_r+0xba>
 8006562:	bf00      	nop
 8006564:	20000058 	.word	0x20000058
 8006568:	08008cac 	.word	0x08008cac
 800656c:	08008ccc 	.word	0x08008ccc
 8006570:	08008c8c 	.word	0x08008c8c

08006574 <quorem>:
 8006574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006578:	6903      	ldr	r3, [r0, #16]
 800657a:	690c      	ldr	r4, [r1, #16]
 800657c:	42a3      	cmp	r3, r4
 800657e:	4607      	mov	r7, r0
 8006580:	f2c0 8081 	blt.w	8006686 <quorem+0x112>
 8006584:	3c01      	subs	r4, #1
 8006586:	f101 0814 	add.w	r8, r1, #20
 800658a:	f100 0514 	add.w	r5, r0, #20
 800658e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006592:	9301      	str	r3, [sp, #4]
 8006594:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800659c:	3301      	adds	r3, #1
 800659e:	429a      	cmp	r2, r3
 80065a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80065a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80065a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80065ac:	d331      	bcc.n	8006612 <quorem+0x9e>
 80065ae:	f04f 0e00 	mov.w	lr, #0
 80065b2:	4640      	mov	r0, r8
 80065b4:	46ac      	mov	ip, r5
 80065b6:	46f2      	mov	sl, lr
 80065b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80065bc:	b293      	uxth	r3, r2
 80065be:	fb06 e303 	mla	r3, r6, r3, lr
 80065c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	ebaa 0303 	sub.w	r3, sl, r3
 80065cc:	0c12      	lsrs	r2, r2, #16
 80065ce:	f8dc a000 	ldr.w	sl, [ip]
 80065d2:	fb06 e202 	mla	r2, r6, r2, lr
 80065d6:	fa13 f38a 	uxtah	r3, r3, sl
 80065da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80065de:	fa1f fa82 	uxth.w	sl, r2
 80065e2:	f8dc 2000 	ldr.w	r2, [ip]
 80065e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80065ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065f4:	4581      	cmp	r9, r0
 80065f6:	f84c 3b04 	str.w	r3, [ip], #4
 80065fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065fe:	d2db      	bcs.n	80065b8 <quorem+0x44>
 8006600:	f855 300b 	ldr.w	r3, [r5, fp]
 8006604:	b92b      	cbnz	r3, 8006612 <quorem+0x9e>
 8006606:	9b01      	ldr	r3, [sp, #4]
 8006608:	3b04      	subs	r3, #4
 800660a:	429d      	cmp	r5, r3
 800660c:	461a      	mov	r2, r3
 800660e:	d32e      	bcc.n	800666e <quorem+0xfa>
 8006610:	613c      	str	r4, [r7, #16]
 8006612:	4638      	mov	r0, r7
 8006614:	f001 fae0 	bl	8007bd8 <__mcmp>
 8006618:	2800      	cmp	r0, #0
 800661a:	db24      	blt.n	8006666 <quorem+0xf2>
 800661c:	3601      	adds	r6, #1
 800661e:	4628      	mov	r0, r5
 8006620:	f04f 0c00 	mov.w	ip, #0
 8006624:	f858 2b04 	ldr.w	r2, [r8], #4
 8006628:	f8d0 e000 	ldr.w	lr, [r0]
 800662c:	b293      	uxth	r3, r2
 800662e:	ebac 0303 	sub.w	r3, ip, r3
 8006632:	0c12      	lsrs	r2, r2, #16
 8006634:	fa13 f38e 	uxtah	r3, r3, lr
 8006638:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800663c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006640:	b29b      	uxth	r3, r3
 8006642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006646:	45c1      	cmp	r9, r8
 8006648:	f840 3b04 	str.w	r3, [r0], #4
 800664c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006650:	d2e8      	bcs.n	8006624 <quorem+0xb0>
 8006652:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006656:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800665a:	b922      	cbnz	r2, 8006666 <quorem+0xf2>
 800665c:	3b04      	subs	r3, #4
 800665e:	429d      	cmp	r5, r3
 8006660:	461a      	mov	r2, r3
 8006662:	d30a      	bcc.n	800667a <quorem+0x106>
 8006664:	613c      	str	r4, [r7, #16]
 8006666:	4630      	mov	r0, r6
 8006668:	b003      	add	sp, #12
 800666a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800666e:	6812      	ldr	r2, [r2, #0]
 8006670:	3b04      	subs	r3, #4
 8006672:	2a00      	cmp	r2, #0
 8006674:	d1cc      	bne.n	8006610 <quorem+0x9c>
 8006676:	3c01      	subs	r4, #1
 8006678:	e7c7      	b.n	800660a <quorem+0x96>
 800667a:	6812      	ldr	r2, [r2, #0]
 800667c:	3b04      	subs	r3, #4
 800667e:	2a00      	cmp	r2, #0
 8006680:	d1f0      	bne.n	8006664 <quorem+0xf0>
 8006682:	3c01      	subs	r4, #1
 8006684:	e7eb      	b.n	800665e <quorem+0xea>
 8006686:	2000      	movs	r0, #0
 8006688:	e7ee      	b.n	8006668 <quorem+0xf4>
 800668a:	0000      	movs	r0, r0
 800668c:	0000      	movs	r0, r0
	...

08006690 <_dtoa_r>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	ed2d 8b02 	vpush	{d8}
 8006698:	ec57 6b10 	vmov	r6, r7, d0
 800669c:	b095      	sub	sp, #84	; 0x54
 800669e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80066a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80066a4:	9105      	str	r1, [sp, #20]
 80066a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80066aa:	4604      	mov	r4, r0
 80066ac:	9209      	str	r2, [sp, #36]	; 0x24
 80066ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80066b0:	b975      	cbnz	r5, 80066d0 <_dtoa_r+0x40>
 80066b2:	2010      	movs	r0, #16
 80066b4:	f000 fffc 	bl	80076b0 <malloc>
 80066b8:	4602      	mov	r2, r0
 80066ba:	6260      	str	r0, [r4, #36]	; 0x24
 80066bc:	b920      	cbnz	r0, 80066c8 <_dtoa_r+0x38>
 80066be:	4bb2      	ldr	r3, [pc, #712]	; (8006988 <_dtoa_r+0x2f8>)
 80066c0:	21ea      	movs	r1, #234	; 0xea
 80066c2:	48b2      	ldr	r0, [pc, #712]	; (800698c <_dtoa_r+0x2fc>)
 80066c4:	f001 fe02 	bl	80082cc <__assert_func>
 80066c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80066cc:	6005      	str	r5, [r0, #0]
 80066ce:	60c5      	str	r5, [r0, #12]
 80066d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066d2:	6819      	ldr	r1, [r3, #0]
 80066d4:	b151      	cbz	r1, 80066ec <_dtoa_r+0x5c>
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	604a      	str	r2, [r1, #4]
 80066da:	2301      	movs	r3, #1
 80066dc:	4093      	lsls	r3, r2
 80066de:	608b      	str	r3, [r1, #8]
 80066e0:	4620      	mov	r0, r4
 80066e2:	f001 f83b 	bl	800775c <_Bfree>
 80066e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	1e3b      	subs	r3, r7, #0
 80066ee:	bfb9      	ittee	lt
 80066f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80066f4:	9303      	strlt	r3, [sp, #12]
 80066f6:	2300      	movge	r3, #0
 80066f8:	f8c8 3000 	strge.w	r3, [r8]
 80066fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006700:	4ba3      	ldr	r3, [pc, #652]	; (8006990 <_dtoa_r+0x300>)
 8006702:	bfbc      	itt	lt
 8006704:	2201      	movlt	r2, #1
 8006706:	f8c8 2000 	strlt.w	r2, [r8]
 800670a:	ea33 0309 	bics.w	r3, r3, r9
 800670e:	d11b      	bne.n	8006748 <_dtoa_r+0xb8>
 8006710:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006712:	f242 730f 	movw	r3, #9999	; 0x270f
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800671c:	4333      	orrs	r3, r6
 800671e:	f000 857a 	beq.w	8007216 <_dtoa_r+0xb86>
 8006722:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006724:	b963      	cbnz	r3, 8006740 <_dtoa_r+0xb0>
 8006726:	4b9b      	ldr	r3, [pc, #620]	; (8006994 <_dtoa_r+0x304>)
 8006728:	e024      	b.n	8006774 <_dtoa_r+0xe4>
 800672a:	4b9b      	ldr	r3, [pc, #620]	; (8006998 <_dtoa_r+0x308>)
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	3308      	adds	r3, #8
 8006730:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	9800      	ldr	r0, [sp, #0]
 8006736:	b015      	add	sp, #84	; 0x54
 8006738:	ecbd 8b02 	vpop	{d8}
 800673c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006740:	4b94      	ldr	r3, [pc, #592]	; (8006994 <_dtoa_r+0x304>)
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	3303      	adds	r3, #3
 8006746:	e7f3      	b.n	8006730 <_dtoa_r+0xa0>
 8006748:	ed9d 7b02 	vldr	d7, [sp, #8]
 800674c:	2200      	movs	r2, #0
 800674e:	ec51 0b17 	vmov	r0, r1, d7
 8006752:	2300      	movs	r3, #0
 8006754:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006758:	f7fa f9d6 	bl	8000b08 <__aeabi_dcmpeq>
 800675c:	4680      	mov	r8, r0
 800675e:	b158      	cbz	r0, 8006778 <_dtoa_r+0xe8>
 8006760:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006762:	2301      	movs	r3, #1
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 8551 	beq.w	8007210 <_dtoa_r+0xb80>
 800676e:	488b      	ldr	r0, [pc, #556]	; (800699c <_dtoa_r+0x30c>)
 8006770:	6018      	str	r0, [r3, #0]
 8006772:	1e43      	subs	r3, r0, #1
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	e7dd      	b.n	8006734 <_dtoa_r+0xa4>
 8006778:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800677c:	aa12      	add	r2, sp, #72	; 0x48
 800677e:	a913      	add	r1, sp, #76	; 0x4c
 8006780:	4620      	mov	r0, r4
 8006782:	f001 facd 	bl	8007d20 <__d2b>
 8006786:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800678a:	4683      	mov	fp, r0
 800678c:	2d00      	cmp	r5, #0
 800678e:	d07c      	beq.n	800688a <_dtoa_r+0x1fa>
 8006790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006792:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006796:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800679a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800679e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80067a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80067a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80067aa:	4b7d      	ldr	r3, [pc, #500]	; (80069a0 <_dtoa_r+0x310>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	4630      	mov	r0, r6
 80067b0:	4639      	mov	r1, r7
 80067b2:	f7f9 fd89 	bl	80002c8 <__aeabi_dsub>
 80067b6:	a36e      	add	r3, pc, #440	; (adr r3, 8006970 <_dtoa_r+0x2e0>)
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f7f9 ff3c 	bl	8000638 <__aeabi_dmul>
 80067c0:	a36d      	add	r3, pc, #436	; (adr r3, 8006978 <_dtoa_r+0x2e8>)
 80067c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c6:	f7f9 fd81 	bl	80002cc <__adddf3>
 80067ca:	4606      	mov	r6, r0
 80067cc:	4628      	mov	r0, r5
 80067ce:	460f      	mov	r7, r1
 80067d0:	f7f9 fec8 	bl	8000564 <__aeabi_i2d>
 80067d4:	a36a      	add	r3, pc, #424	; (adr r3, 8006980 <_dtoa_r+0x2f0>)
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	f7f9 ff2d 	bl	8000638 <__aeabi_dmul>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4630      	mov	r0, r6
 80067e4:	4639      	mov	r1, r7
 80067e6:	f7f9 fd71 	bl	80002cc <__adddf3>
 80067ea:	4606      	mov	r6, r0
 80067ec:	460f      	mov	r7, r1
 80067ee:	f7fa f9d3 	bl	8000b98 <__aeabi_d2iz>
 80067f2:	2200      	movs	r2, #0
 80067f4:	4682      	mov	sl, r0
 80067f6:	2300      	movs	r3, #0
 80067f8:	4630      	mov	r0, r6
 80067fa:	4639      	mov	r1, r7
 80067fc:	f7fa f98e 	bl	8000b1c <__aeabi_dcmplt>
 8006800:	b148      	cbz	r0, 8006816 <_dtoa_r+0x186>
 8006802:	4650      	mov	r0, sl
 8006804:	f7f9 feae 	bl	8000564 <__aeabi_i2d>
 8006808:	4632      	mov	r2, r6
 800680a:	463b      	mov	r3, r7
 800680c:	f7fa f97c 	bl	8000b08 <__aeabi_dcmpeq>
 8006810:	b908      	cbnz	r0, 8006816 <_dtoa_r+0x186>
 8006812:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006816:	f1ba 0f16 	cmp.w	sl, #22
 800681a:	d854      	bhi.n	80068c6 <_dtoa_r+0x236>
 800681c:	4b61      	ldr	r3, [pc, #388]	; (80069a4 <_dtoa_r+0x314>)
 800681e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006826:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800682a:	f7fa f977 	bl	8000b1c <__aeabi_dcmplt>
 800682e:	2800      	cmp	r0, #0
 8006830:	d04b      	beq.n	80068ca <_dtoa_r+0x23a>
 8006832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006836:	2300      	movs	r3, #0
 8006838:	930e      	str	r3, [sp, #56]	; 0x38
 800683a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800683c:	1b5d      	subs	r5, r3, r5
 800683e:	1e6b      	subs	r3, r5, #1
 8006840:	9304      	str	r3, [sp, #16]
 8006842:	bf43      	ittte	mi
 8006844:	2300      	movmi	r3, #0
 8006846:	f1c5 0801 	rsbmi	r8, r5, #1
 800684a:	9304      	strmi	r3, [sp, #16]
 800684c:	f04f 0800 	movpl.w	r8, #0
 8006850:	f1ba 0f00 	cmp.w	sl, #0
 8006854:	db3b      	blt.n	80068ce <_dtoa_r+0x23e>
 8006856:	9b04      	ldr	r3, [sp, #16]
 8006858:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800685c:	4453      	add	r3, sl
 800685e:	9304      	str	r3, [sp, #16]
 8006860:	2300      	movs	r3, #0
 8006862:	9306      	str	r3, [sp, #24]
 8006864:	9b05      	ldr	r3, [sp, #20]
 8006866:	2b09      	cmp	r3, #9
 8006868:	d869      	bhi.n	800693e <_dtoa_r+0x2ae>
 800686a:	2b05      	cmp	r3, #5
 800686c:	bfc4      	itt	gt
 800686e:	3b04      	subgt	r3, #4
 8006870:	9305      	strgt	r3, [sp, #20]
 8006872:	9b05      	ldr	r3, [sp, #20]
 8006874:	f1a3 0302 	sub.w	r3, r3, #2
 8006878:	bfcc      	ite	gt
 800687a:	2500      	movgt	r5, #0
 800687c:	2501      	movle	r5, #1
 800687e:	2b03      	cmp	r3, #3
 8006880:	d869      	bhi.n	8006956 <_dtoa_r+0x2c6>
 8006882:	e8df f003 	tbb	[pc, r3]
 8006886:	4e2c      	.short	0x4e2c
 8006888:	5a4c      	.short	0x5a4c
 800688a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800688e:	441d      	add	r5, r3
 8006890:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006894:	2b20      	cmp	r3, #32
 8006896:	bfc1      	itttt	gt
 8006898:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800689c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80068a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80068a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80068a8:	bfda      	itte	le
 80068aa:	f1c3 0320 	rsble	r3, r3, #32
 80068ae:	fa06 f003 	lslle.w	r0, r6, r3
 80068b2:	4318      	orrgt	r0, r3
 80068b4:	f7f9 fe46 	bl	8000544 <__aeabi_ui2d>
 80068b8:	2301      	movs	r3, #1
 80068ba:	4606      	mov	r6, r0
 80068bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80068c0:	3d01      	subs	r5, #1
 80068c2:	9310      	str	r3, [sp, #64]	; 0x40
 80068c4:	e771      	b.n	80067aa <_dtoa_r+0x11a>
 80068c6:	2301      	movs	r3, #1
 80068c8:	e7b6      	b.n	8006838 <_dtoa_r+0x1a8>
 80068ca:	900e      	str	r0, [sp, #56]	; 0x38
 80068cc:	e7b5      	b.n	800683a <_dtoa_r+0x1aa>
 80068ce:	f1ca 0300 	rsb	r3, sl, #0
 80068d2:	9306      	str	r3, [sp, #24]
 80068d4:	2300      	movs	r3, #0
 80068d6:	eba8 080a 	sub.w	r8, r8, sl
 80068da:	930d      	str	r3, [sp, #52]	; 0x34
 80068dc:	e7c2      	b.n	8006864 <_dtoa_r+0x1d4>
 80068de:	2300      	movs	r3, #0
 80068e0:	9308      	str	r3, [sp, #32]
 80068e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	dc39      	bgt.n	800695c <_dtoa_r+0x2cc>
 80068e8:	f04f 0901 	mov.w	r9, #1
 80068ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80068f0:	464b      	mov	r3, r9
 80068f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80068f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80068f8:	2200      	movs	r2, #0
 80068fa:	6042      	str	r2, [r0, #4]
 80068fc:	2204      	movs	r2, #4
 80068fe:	f102 0614 	add.w	r6, r2, #20
 8006902:	429e      	cmp	r6, r3
 8006904:	6841      	ldr	r1, [r0, #4]
 8006906:	d92f      	bls.n	8006968 <_dtoa_r+0x2d8>
 8006908:	4620      	mov	r0, r4
 800690a:	f000 fee7 	bl	80076dc <_Balloc>
 800690e:	9000      	str	r0, [sp, #0]
 8006910:	2800      	cmp	r0, #0
 8006912:	d14b      	bne.n	80069ac <_dtoa_r+0x31c>
 8006914:	4b24      	ldr	r3, [pc, #144]	; (80069a8 <_dtoa_r+0x318>)
 8006916:	4602      	mov	r2, r0
 8006918:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800691c:	e6d1      	b.n	80066c2 <_dtoa_r+0x32>
 800691e:	2301      	movs	r3, #1
 8006920:	e7de      	b.n	80068e0 <_dtoa_r+0x250>
 8006922:	2300      	movs	r3, #0
 8006924:	9308      	str	r3, [sp, #32]
 8006926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006928:	eb0a 0903 	add.w	r9, sl, r3
 800692c:	f109 0301 	add.w	r3, r9, #1
 8006930:	2b01      	cmp	r3, #1
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	bfb8      	it	lt
 8006936:	2301      	movlt	r3, #1
 8006938:	e7dd      	b.n	80068f6 <_dtoa_r+0x266>
 800693a:	2301      	movs	r3, #1
 800693c:	e7f2      	b.n	8006924 <_dtoa_r+0x294>
 800693e:	2501      	movs	r5, #1
 8006940:	2300      	movs	r3, #0
 8006942:	9305      	str	r3, [sp, #20]
 8006944:	9508      	str	r5, [sp, #32]
 8006946:	f04f 39ff 	mov.w	r9, #4294967295
 800694a:	2200      	movs	r2, #0
 800694c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006950:	2312      	movs	r3, #18
 8006952:	9209      	str	r2, [sp, #36]	; 0x24
 8006954:	e7cf      	b.n	80068f6 <_dtoa_r+0x266>
 8006956:	2301      	movs	r3, #1
 8006958:	9308      	str	r3, [sp, #32]
 800695a:	e7f4      	b.n	8006946 <_dtoa_r+0x2b6>
 800695c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006960:	f8cd 9004 	str.w	r9, [sp, #4]
 8006964:	464b      	mov	r3, r9
 8006966:	e7c6      	b.n	80068f6 <_dtoa_r+0x266>
 8006968:	3101      	adds	r1, #1
 800696a:	6041      	str	r1, [r0, #4]
 800696c:	0052      	lsls	r2, r2, #1
 800696e:	e7c6      	b.n	80068fe <_dtoa_r+0x26e>
 8006970:	636f4361 	.word	0x636f4361
 8006974:	3fd287a7 	.word	0x3fd287a7
 8006978:	8b60c8b3 	.word	0x8b60c8b3
 800697c:	3fc68a28 	.word	0x3fc68a28
 8006980:	509f79fb 	.word	0x509f79fb
 8006984:	3fd34413 	.word	0x3fd34413
 8006988:	08008c05 	.word	0x08008c05
 800698c:	08008c1c 	.word	0x08008c1c
 8006990:	7ff00000 	.word	0x7ff00000
 8006994:	08008c01 	.word	0x08008c01
 8006998:	08008bf8 	.word	0x08008bf8
 800699c:	08008bd5 	.word	0x08008bd5
 80069a0:	3ff80000 	.word	0x3ff80000
 80069a4:	08008d78 	.word	0x08008d78
 80069a8:	08008c7b 	.word	0x08008c7b
 80069ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069ae:	9a00      	ldr	r2, [sp, #0]
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	9b01      	ldr	r3, [sp, #4]
 80069b4:	2b0e      	cmp	r3, #14
 80069b6:	f200 80ad 	bhi.w	8006b14 <_dtoa_r+0x484>
 80069ba:	2d00      	cmp	r5, #0
 80069bc:	f000 80aa 	beq.w	8006b14 <_dtoa_r+0x484>
 80069c0:	f1ba 0f00 	cmp.w	sl, #0
 80069c4:	dd36      	ble.n	8006a34 <_dtoa_r+0x3a4>
 80069c6:	4ac3      	ldr	r2, [pc, #780]	; (8006cd4 <_dtoa_r+0x644>)
 80069c8:	f00a 030f 	and.w	r3, sl, #15
 80069cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069d0:	ed93 7b00 	vldr	d7, [r3]
 80069d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80069d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80069dc:	eeb0 8a47 	vmov.f32	s16, s14
 80069e0:	eef0 8a67 	vmov.f32	s17, s15
 80069e4:	d016      	beq.n	8006a14 <_dtoa_r+0x384>
 80069e6:	4bbc      	ldr	r3, [pc, #752]	; (8006cd8 <_dtoa_r+0x648>)
 80069e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069f0:	f7f9 ff4c 	bl	800088c <__aeabi_ddiv>
 80069f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069f8:	f007 070f 	and.w	r7, r7, #15
 80069fc:	2503      	movs	r5, #3
 80069fe:	4eb6      	ldr	r6, [pc, #728]	; (8006cd8 <_dtoa_r+0x648>)
 8006a00:	b957      	cbnz	r7, 8006a18 <_dtoa_r+0x388>
 8006a02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a06:	ec53 2b18 	vmov	r2, r3, d8
 8006a0a:	f7f9 ff3f 	bl	800088c <__aeabi_ddiv>
 8006a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a12:	e029      	b.n	8006a68 <_dtoa_r+0x3d8>
 8006a14:	2502      	movs	r5, #2
 8006a16:	e7f2      	b.n	80069fe <_dtoa_r+0x36e>
 8006a18:	07f9      	lsls	r1, r7, #31
 8006a1a:	d508      	bpl.n	8006a2e <_dtoa_r+0x39e>
 8006a1c:	ec51 0b18 	vmov	r0, r1, d8
 8006a20:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a24:	f7f9 fe08 	bl	8000638 <__aeabi_dmul>
 8006a28:	ec41 0b18 	vmov	d8, r0, r1
 8006a2c:	3501      	adds	r5, #1
 8006a2e:	107f      	asrs	r7, r7, #1
 8006a30:	3608      	adds	r6, #8
 8006a32:	e7e5      	b.n	8006a00 <_dtoa_r+0x370>
 8006a34:	f000 80a6 	beq.w	8006b84 <_dtoa_r+0x4f4>
 8006a38:	f1ca 0600 	rsb	r6, sl, #0
 8006a3c:	4ba5      	ldr	r3, [pc, #660]	; (8006cd4 <_dtoa_r+0x644>)
 8006a3e:	4fa6      	ldr	r7, [pc, #664]	; (8006cd8 <_dtoa_r+0x648>)
 8006a40:	f006 020f 	and.w	r2, r6, #15
 8006a44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a50:	f7f9 fdf2 	bl	8000638 <__aeabi_dmul>
 8006a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a58:	1136      	asrs	r6, r6, #4
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	2502      	movs	r5, #2
 8006a5e:	2e00      	cmp	r6, #0
 8006a60:	f040 8085 	bne.w	8006b6e <_dtoa_r+0x4de>
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1d2      	bne.n	8006a0e <_dtoa_r+0x37e>
 8006a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 808c 	beq.w	8006b88 <_dtoa_r+0x4f8>
 8006a70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a74:	4b99      	ldr	r3, [pc, #612]	; (8006cdc <_dtoa_r+0x64c>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	4630      	mov	r0, r6
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	f7fa f84e 	bl	8000b1c <__aeabi_dcmplt>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	f000 8081 	beq.w	8006b88 <_dtoa_r+0x4f8>
 8006a86:	9b01      	ldr	r3, [sp, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d07d      	beq.n	8006b88 <_dtoa_r+0x4f8>
 8006a8c:	f1b9 0f00 	cmp.w	r9, #0
 8006a90:	dd3c      	ble.n	8006b0c <_dtoa_r+0x47c>
 8006a92:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006a96:	9307      	str	r3, [sp, #28]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	4b91      	ldr	r3, [pc, #580]	; (8006ce0 <_dtoa_r+0x650>)
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	4639      	mov	r1, r7
 8006aa0:	f7f9 fdca 	bl	8000638 <__aeabi_dmul>
 8006aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aa8:	3501      	adds	r5, #1
 8006aaa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006aae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f7f9 fd56 	bl	8000564 <__aeabi_i2d>
 8006ab8:	4632      	mov	r2, r6
 8006aba:	463b      	mov	r3, r7
 8006abc:	f7f9 fdbc 	bl	8000638 <__aeabi_dmul>
 8006ac0:	4b88      	ldr	r3, [pc, #544]	; (8006ce4 <_dtoa_r+0x654>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f7f9 fc02 	bl	80002cc <__adddf3>
 8006ac8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ad0:	9303      	str	r3, [sp, #12]
 8006ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d15c      	bne.n	8006b92 <_dtoa_r+0x502>
 8006ad8:	4b83      	ldr	r3, [pc, #524]	; (8006ce8 <_dtoa_r+0x658>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	4630      	mov	r0, r6
 8006ade:	4639      	mov	r1, r7
 8006ae0:	f7f9 fbf2 	bl	80002c8 <__aeabi_dsub>
 8006ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ae8:	4606      	mov	r6, r0
 8006aea:	460f      	mov	r7, r1
 8006aec:	f7fa f834 	bl	8000b58 <__aeabi_dcmpgt>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	f040 8296 	bne.w	8007022 <_dtoa_r+0x992>
 8006af6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006afa:	4630      	mov	r0, r6
 8006afc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b00:	4639      	mov	r1, r7
 8006b02:	f7fa f80b 	bl	8000b1c <__aeabi_dcmplt>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	f040 8288 	bne.w	800701c <_dtoa_r+0x98c>
 8006b0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f2c0 8158 	blt.w	8006dcc <_dtoa_r+0x73c>
 8006b1c:	f1ba 0f0e 	cmp.w	sl, #14
 8006b20:	f300 8154 	bgt.w	8006dcc <_dtoa_r+0x73c>
 8006b24:	4b6b      	ldr	r3, [pc, #428]	; (8006cd4 <_dtoa_r+0x644>)
 8006b26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006b2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f280 80e3 	bge.w	8006cfc <_dtoa_r+0x66c>
 8006b36:	9b01      	ldr	r3, [sp, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f300 80df 	bgt.w	8006cfc <_dtoa_r+0x66c>
 8006b3e:	f040 826d 	bne.w	800701c <_dtoa_r+0x98c>
 8006b42:	4b69      	ldr	r3, [pc, #420]	; (8006ce8 <_dtoa_r+0x658>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	4640      	mov	r0, r8
 8006b48:	4649      	mov	r1, r9
 8006b4a:	f7f9 fd75 	bl	8000638 <__aeabi_dmul>
 8006b4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b52:	f7f9 fff7 	bl	8000b44 <__aeabi_dcmpge>
 8006b56:	9e01      	ldr	r6, [sp, #4]
 8006b58:	4637      	mov	r7, r6
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	f040 8243 	bne.w	8006fe6 <_dtoa_r+0x956>
 8006b60:	9d00      	ldr	r5, [sp, #0]
 8006b62:	2331      	movs	r3, #49	; 0x31
 8006b64:	f805 3b01 	strb.w	r3, [r5], #1
 8006b68:	f10a 0a01 	add.w	sl, sl, #1
 8006b6c:	e23f      	b.n	8006fee <_dtoa_r+0x95e>
 8006b6e:	07f2      	lsls	r2, r6, #31
 8006b70:	d505      	bpl.n	8006b7e <_dtoa_r+0x4ee>
 8006b72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b76:	f7f9 fd5f 	bl	8000638 <__aeabi_dmul>
 8006b7a:	3501      	adds	r5, #1
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	1076      	asrs	r6, r6, #1
 8006b80:	3708      	adds	r7, #8
 8006b82:	e76c      	b.n	8006a5e <_dtoa_r+0x3ce>
 8006b84:	2502      	movs	r5, #2
 8006b86:	e76f      	b.n	8006a68 <_dtoa_r+0x3d8>
 8006b88:	9b01      	ldr	r3, [sp, #4]
 8006b8a:	f8cd a01c 	str.w	sl, [sp, #28]
 8006b8e:	930c      	str	r3, [sp, #48]	; 0x30
 8006b90:	e78d      	b.n	8006aae <_dtoa_r+0x41e>
 8006b92:	9900      	ldr	r1, [sp, #0]
 8006b94:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006b96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b98:	4b4e      	ldr	r3, [pc, #312]	; (8006cd4 <_dtoa_r+0x644>)
 8006b9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b9e:	4401      	add	r1, r0
 8006ba0:	9102      	str	r1, [sp, #8]
 8006ba2:	9908      	ldr	r1, [sp, #32]
 8006ba4:	eeb0 8a47 	vmov.f32	s16, s14
 8006ba8:	eef0 8a67 	vmov.f32	s17, s15
 8006bac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006bb4:	2900      	cmp	r1, #0
 8006bb6:	d045      	beq.n	8006c44 <_dtoa_r+0x5b4>
 8006bb8:	494c      	ldr	r1, [pc, #304]	; (8006cec <_dtoa_r+0x65c>)
 8006bba:	2000      	movs	r0, #0
 8006bbc:	f7f9 fe66 	bl	800088c <__aeabi_ddiv>
 8006bc0:	ec53 2b18 	vmov	r2, r3, d8
 8006bc4:	f7f9 fb80 	bl	80002c8 <__aeabi_dsub>
 8006bc8:	9d00      	ldr	r5, [sp, #0]
 8006bca:	ec41 0b18 	vmov	d8, r0, r1
 8006bce:	4639      	mov	r1, r7
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f7f9 ffe1 	bl	8000b98 <__aeabi_d2iz>
 8006bd6:	900c      	str	r0, [sp, #48]	; 0x30
 8006bd8:	f7f9 fcc4 	bl	8000564 <__aeabi_i2d>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4630      	mov	r0, r6
 8006be2:	4639      	mov	r1, r7
 8006be4:	f7f9 fb70 	bl	80002c8 <__aeabi_dsub>
 8006be8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bea:	3330      	adds	r3, #48	; 0x30
 8006bec:	f805 3b01 	strb.w	r3, [r5], #1
 8006bf0:	ec53 2b18 	vmov	r2, r3, d8
 8006bf4:	4606      	mov	r6, r0
 8006bf6:	460f      	mov	r7, r1
 8006bf8:	f7f9 ff90 	bl	8000b1c <__aeabi_dcmplt>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d165      	bne.n	8006ccc <_dtoa_r+0x63c>
 8006c00:	4632      	mov	r2, r6
 8006c02:	463b      	mov	r3, r7
 8006c04:	4935      	ldr	r1, [pc, #212]	; (8006cdc <_dtoa_r+0x64c>)
 8006c06:	2000      	movs	r0, #0
 8006c08:	f7f9 fb5e 	bl	80002c8 <__aeabi_dsub>
 8006c0c:	ec53 2b18 	vmov	r2, r3, d8
 8006c10:	f7f9 ff84 	bl	8000b1c <__aeabi_dcmplt>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	f040 80b9 	bne.w	8006d8c <_dtoa_r+0x6fc>
 8006c1a:	9b02      	ldr	r3, [sp, #8]
 8006c1c:	429d      	cmp	r5, r3
 8006c1e:	f43f af75 	beq.w	8006b0c <_dtoa_r+0x47c>
 8006c22:	4b2f      	ldr	r3, [pc, #188]	; (8006ce0 <_dtoa_r+0x650>)
 8006c24:	ec51 0b18 	vmov	r0, r1, d8
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f7f9 fd05 	bl	8000638 <__aeabi_dmul>
 8006c2e:	4b2c      	ldr	r3, [pc, #176]	; (8006ce0 <_dtoa_r+0x650>)
 8006c30:	ec41 0b18 	vmov	d8, r0, r1
 8006c34:	2200      	movs	r2, #0
 8006c36:	4630      	mov	r0, r6
 8006c38:	4639      	mov	r1, r7
 8006c3a:	f7f9 fcfd 	bl	8000638 <__aeabi_dmul>
 8006c3e:	4606      	mov	r6, r0
 8006c40:	460f      	mov	r7, r1
 8006c42:	e7c4      	b.n	8006bce <_dtoa_r+0x53e>
 8006c44:	ec51 0b17 	vmov	r0, r1, d7
 8006c48:	f7f9 fcf6 	bl	8000638 <__aeabi_dmul>
 8006c4c:	9b02      	ldr	r3, [sp, #8]
 8006c4e:	9d00      	ldr	r5, [sp, #0]
 8006c50:	930c      	str	r3, [sp, #48]	; 0x30
 8006c52:	ec41 0b18 	vmov	d8, r0, r1
 8006c56:	4639      	mov	r1, r7
 8006c58:	4630      	mov	r0, r6
 8006c5a:	f7f9 ff9d 	bl	8000b98 <__aeabi_d2iz>
 8006c5e:	9011      	str	r0, [sp, #68]	; 0x44
 8006c60:	f7f9 fc80 	bl	8000564 <__aeabi_i2d>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4630      	mov	r0, r6
 8006c6a:	4639      	mov	r1, r7
 8006c6c:	f7f9 fb2c 	bl	80002c8 <__aeabi_dsub>
 8006c70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c72:	3330      	adds	r3, #48	; 0x30
 8006c74:	f805 3b01 	strb.w	r3, [r5], #1
 8006c78:	9b02      	ldr	r3, [sp, #8]
 8006c7a:	429d      	cmp	r5, r3
 8006c7c:	4606      	mov	r6, r0
 8006c7e:	460f      	mov	r7, r1
 8006c80:	f04f 0200 	mov.w	r2, #0
 8006c84:	d134      	bne.n	8006cf0 <_dtoa_r+0x660>
 8006c86:	4b19      	ldr	r3, [pc, #100]	; (8006cec <_dtoa_r+0x65c>)
 8006c88:	ec51 0b18 	vmov	r0, r1, d8
 8006c8c:	f7f9 fb1e 	bl	80002cc <__adddf3>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	4630      	mov	r0, r6
 8006c96:	4639      	mov	r1, r7
 8006c98:	f7f9 ff5e 	bl	8000b58 <__aeabi_dcmpgt>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d175      	bne.n	8006d8c <_dtoa_r+0x6fc>
 8006ca0:	ec53 2b18 	vmov	r2, r3, d8
 8006ca4:	4911      	ldr	r1, [pc, #68]	; (8006cec <_dtoa_r+0x65c>)
 8006ca6:	2000      	movs	r0, #0
 8006ca8:	f7f9 fb0e 	bl	80002c8 <__aeabi_dsub>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	4639      	mov	r1, r7
 8006cb4:	f7f9 ff32 	bl	8000b1c <__aeabi_dcmplt>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	f43f af27 	beq.w	8006b0c <_dtoa_r+0x47c>
 8006cbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006cc0:	1e6b      	subs	r3, r5, #1
 8006cc2:	930c      	str	r3, [sp, #48]	; 0x30
 8006cc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006cc8:	2b30      	cmp	r3, #48	; 0x30
 8006cca:	d0f8      	beq.n	8006cbe <_dtoa_r+0x62e>
 8006ccc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006cd0:	e04a      	b.n	8006d68 <_dtoa_r+0x6d8>
 8006cd2:	bf00      	nop
 8006cd4:	08008d78 	.word	0x08008d78
 8006cd8:	08008d50 	.word	0x08008d50
 8006cdc:	3ff00000 	.word	0x3ff00000
 8006ce0:	40240000 	.word	0x40240000
 8006ce4:	401c0000 	.word	0x401c0000
 8006ce8:	40140000 	.word	0x40140000
 8006cec:	3fe00000 	.word	0x3fe00000
 8006cf0:	4baf      	ldr	r3, [pc, #700]	; (8006fb0 <_dtoa_r+0x920>)
 8006cf2:	f7f9 fca1 	bl	8000638 <__aeabi_dmul>
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	460f      	mov	r7, r1
 8006cfa:	e7ac      	b.n	8006c56 <_dtoa_r+0x5c6>
 8006cfc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d00:	9d00      	ldr	r5, [sp, #0]
 8006d02:	4642      	mov	r2, r8
 8006d04:	464b      	mov	r3, r9
 8006d06:	4630      	mov	r0, r6
 8006d08:	4639      	mov	r1, r7
 8006d0a:	f7f9 fdbf 	bl	800088c <__aeabi_ddiv>
 8006d0e:	f7f9 ff43 	bl	8000b98 <__aeabi_d2iz>
 8006d12:	9002      	str	r0, [sp, #8]
 8006d14:	f7f9 fc26 	bl	8000564 <__aeabi_i2d>
 8006d18:	4642      	mov	r2, r8
 8006d1a:	464b      	mov	r3, r9
 8006d1c:	f7f9 fc8c 	bl	8000638 <__aeabi_dmul>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	4630      	mov	r0, r6
 8006d26:	4639      	mov	r1, r7
 8006d28:	f7f9 face 	bl	80002c8 <__aeabi_dsub>
 8006d2c:	9e02      	ldr	r6, [sp, #8]
 8006d2e:	9f01      	ldr	r7, [sp, #4]
 8006d30:	3630      	adds	r6, #48	; 0x30
 8006d32:	f805 6b01 	strb.w	r6, [r5], #1
 8006d36:	9e00      	ldr	r6, [sp, #0]
 8006d38:	1bae      	subs	r6, r5, r6
 8006d3a:	42b7      	cmp	r7, r6
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	d137      	bne.n	8006db2 <_dtoa_r+0x722>
 8006d42:	f7f9 fac3 	bl	80002cc <__adddf3>
 8006d46:	4642      	mov	r2, r8
 8006d48:	464b      	mov	r3, r9
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	460f      	mov	r7, r1
 8006d4e:	f7f9 ff03 	bl	8000b58 <__aeabi_dcmpgt>
 8006d52:	b9c8      	cbnz	r0, 8006d88 <_dtoa_r+0x6f8>
 8006d54:	4642      	mov	r2, r8
 8006d56:	464b      	mov	r3, r9
 8006d58:	4630      	mov	r0, r6
 8006d5a:	4639      	mov	r1, r7
 8006d5c:	f7f9 fed4 	bl	8000b08 <__aeabi_dcmpeq>
 8006d60:	b110      	cbz	r0, 8006d68 <_dtoa_r+0x6d8>
 8006d62:	9b02      	ldr	r3, [sp, #8]
 8006d64:	07d9      	lsls	r1, r3, #31
 8006d66:	d40f      	bmi.n	8006d88 <_dtoa_r+0x6f8>
 8006d68:	4620      	mov	r0, r4
 8006d6a:	4659      	mov	r1, fp
 8006d6c:	f000 fcf6 	bl	800775c <_Bfree>
 8006d70:	2300      	movs	r3, #0
 8006d72:	702b      	strb	r3, [r5, #0]
 8006d74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d76:	f10a 0001 	add.w	r0, sl, #1
 8006d7a:	6018      	str	r0, [r3, #0]
 8006d7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f43f acd8 	beq.w	8006734 <_dtoa_r+0xa4>
 8006d84:	601d      	str	r5, [r3, #0]
 8006d86:	e4d5      	b.n	8006734 <_dtoa_r+0xa4>
 8006d88:	f8cd a01c 	str.w	sl, [sp, #28]
 8006d8c:	462b      	mov	r3, r5
 8006d8e:	461d      	mov	r5, r3
 8006d90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d94:	2a39      	cmp	r2, #57	; 0x39
 8006d96:	d108      	bne.n	8006daa <_dtoa_r+0x71a>
 8006d98:	9a00      	ldr	r2, [sp, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d1f7      	bne.n	8006d8e <_dtoa_r+0x6fe>
 8006d9e:	9a07      	ldr	r2, [sp, #28]
 8006da0:	9900      	ldr	r1, [sp, #0]
 8006da2:	3201      	adds	r2, #1
 8006da4:	9207      	str	r2, [sp, #28]
 8006da6:	2230      	movs	r2, #48	; 0x30
 8006da8:	700a      	strb	r2, [r1, #0]
 8006daa:	781a      	ldrb	r2, [r3, #0]
 8006dac:	3201      	adds	r2, #1
 8006dae:	701a      	strb	r2, [r3, #0]
 8006db0:	e78c      	b.n	8006ccc <_dtoa_r+0x63c>
 8006db2:	4b7f      	ldr	r3, [pc, #508]	; (8006fb0 <_dtoa_r+0x920>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	f7f9 fc3f 	bl	8000638 <__aeabi_dmul>
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	460f      	mov	r7, r1
 8006dc2:	f7f9 fea1 	bl	8000b08 <__aeabi_dcmpeq>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d09b      	beq.n	8006d02 <_dtoa_r+0x672>
 8006dca:	e7cd      	b.n	8006d68 <_dtoa_r+0x6d8>
 8006dcc:	9a08      	ldr	r2, [sp, #32]
 8006dce:	2a00      	cmp	r2, #0
 8006dd0:	f000 80c4 	beq.w	8006f5c <_dtoa_r+0x8cc>
 8006dd4:	9a05      	ldr	r2, [sp, #20]
 8006dd6:	2a01      	cmp	r2, #1
 8006dd8:	f300 80a8 	bgt.w	8006f2c <_dtoa_r+0x89c>
 8006ddc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006dde:	2a00      	cmp	r2, #0
 8006de0:	f000 80a0 	beq.w	8006f24 <_dtoa_r+0x894>
 8006de4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006de8:	9e06      	ldr	r6, [sp, #24]
 8006dea:	4645      	mov	r5, r8
 8006dec:	9a04      	ldr	r2, [sp, #16]
 8006dee:	2101      	movs	r1, #1
 8006df0:	441a      	add	r2, r3
 8006df2:	4620      	mov	r0, r4
 8006df4:	4498      	add	r8, r3
 8006df6:	9204      	str	r2, [sp, #16]
 8006df8:	f000 fd6c 	bl	80078d4 <__i2b>
 8006dfc:	4607      	mov	r7, r0
 8006dfe:	2d00      	cmp	r5, #0
 8006e00:	dd0b      	ble.n	8006e1a <_dtoa_r+0x78a>
 8006e02:	9b04      	ldr	r3, [sp, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	dd08      	ble.n	8006e1a <_dtoa_r+0x78a>
 8006e08:	42ab      	cmp	r3, r5
 8006e0a:	9a04      	ldr	r2, [sp, #16]
 8006e0c:	bfa8      	it	ge
 8006e0e:	462b      	movge	r3, r5
 8006e10:	eba8 0803 	sub.w	r8, r8, r3
 8006e14:	1aed      	subs	r5, r5, r3
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	9304      	str	r3, [sp, #16]
 8006e1a:	9b06      	ldr	r3, [sp, #24]
 8006e1c:	b1fb      	cbz	r3, 8006e5e <_dtoa_r+0x7ce>
 8006e1e:	9b08      	ldr	r3, [sp, #32]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 809f 	beq.w	8006f64 <_dtoa_r+0x8d4>
 8006e26:	2e00      	cmp	r6, #0
 8006e28:	dd11      	ble.n	8006e4e <_dtoa_r+0x7be>
 8006e2a:	4639      	mov	r1, r7
 8006e2c:	4632      	mov	r2, r6
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f000 fe0c 	bl	8007a4c <__pow5mult>
 8006e34:	465a      	mov	r2, fp
 8006e36:	4601      	mov	r1, r0
 8006e38:	4607      	mov	r7, r0
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f000 fd60 	bl	8007900 <__multiply>
 8006e40:	4659      	mov	r1, fp
 8006e42:	9007      	str	r0, [sp, #28]
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 fc89 	bl	800775c <_Bfree>
 8006e4a:	9b07      	ldr	r3, [sp, #28]
 8006e4c:	469b      	mov	fp, r3
 8006e4e:	9b06      	ldr	r3, [sp, #24]
 8006e50:	1b9a      	subs	r2, r3, r6
 8006e52:	d004      	beq.n	8006e5e <_dtoa_r+0x7ce>
 8006e54:	4659      	mov	r1, fp
 8006e56:	4620      	mov	r0, r4
 8006e58:	f000 fdf8 	bl	8007a4c <__pow5mult>
 8006e5c:	4683      	mov	fp, r0
 8006e5e:	2101      	movs	r1, #1
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 fd37 	bl	80078d4 <__i2b>
 8006e66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	4606      	mov	r6, r0
 8006e6c:	dd7c      	ble.n	8006f68 <_dtoa_r+0x8d8>
 8006e6e:	461a      	mov	r2, r3
 8006e70:	4601      	mov	r1, r0
 8006e72:	4620      	mov	r0, r4
 8006e74:	f000 fdea 	bl	8007a4c <__pow5mult>
 8006e78:	9b05      	ldr	r3, [sp, #20]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	4606      	mov	r6, r0
 8006e7e:	dd76      	ble.n	8006f6e <_dtoa_r+0x8de>
 8006e80:	2300      	movs	r3, #0
 8006e82:	9306      	str	r3, [sp, #24]
 8006e84:	6933      	ldr	r3, [r6, #16]
 8006e86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e8a:	6918      	ldr	r0, [r3, #16]
 8006e8c:	f000 fcd2 	bl	8007834 <__hi0bits>
 8006e90:	f1c0 0020 	rsb	r0, r0, #32
 8006e94:	9b04      	ldr	r3, [sp, #16]
 8006e96:	4418      	add	r0, r3
 8006e98:	f010 001f 	ands.w	r0, r0, #31
 8006e9c:	f000 8086 	beq.w	8006fac <_dtoa_r+0x91c>
 8006ea0:	f1c0 0320 	rsb	r3, r0, #32
 8006ea4:	2b04      	cmp	r3, #4
 8006ea6:	dd7f      	ble.n	8006fa8 <_dtoa_r+0x918>
 8006ea8:	f1c0 001c 	rsb	r0, r0, #28
 8006eac:	9b04      	ldr	r3, [sp, #16]
 8006eae:	4403      	add	r3, r0
 8006eb0:	4480      	add	r8, r0
 8006eb2:	4405      	add	r5, r0
 8006eb4:	9304      	str	r3, [sp, #16]
 8006eb6:	f1b8 0f00 	cmp.w	r8, #0
 8006eba:	dd05      	ble.n	8006ec8 <_dtoa_r+0x838>
 8006ebc:	4659      	mov	r1, fp
 8006ebe:	4642      	mov	r2, r8
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f000 fe1d 	bl	8007b00 <__lshift>
 8006ec6:	4683      	mov	fp, r0
 8006ec8:	9b04      	ldr	r3, [sp, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	dd05      	ble.n	8006eda <_dtoa_r+0x84a>
 8006ece:	4631      	mov	r1, r6
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 fe14 	bl	8007b00 <__lshift>
 8006ed8:	4606      	mov	r6, r0
 8006eda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d069      	beq.n	8006fb4 <_dtoa_r+0x924>
 8006ee0:	4631      	mov	r1, r6
 8006ee2:	4658      	mov	r0, fp
 8006ee4:	f000 fe78 	bl	8007bd8 <__mcmp>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	da63      	bge.n	8006fb4 <_dtoa_r+0x924>
 8006eec:	2300      	movs	r3, #0
 8006eee:	4659      	mov	r1, fp
 8006ef0:	220a      	movs	r2, #10
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f000 fc54 	bl	80077a0 <__multadd>
 8006ef8:	9b08      	ldr	r3, [sp, #32]
 8006efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006efe:	4683      	mov	fp, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 818f 	beq.w	8007224 <_dtoa_r+0xb94>
 8006f06:	4639      	mov	r1, r7
 8006f08:	2300      	movs	r3, #0
 8006f0a:	220a      	movs	r2, #10
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f000 fc47 	bl	80077a0 <__multadd>
 8006f12:	f1b9 0f00 	cmp.w	r9, #0
 8006f16:	4607      	mov	r7, r0
 8006f18:	f300 808e 	bgt.w	8007038 <_dtoa_r+0x9a8>
 8006f1c:	9b05      	ldr	r3, [sp, #20]
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	dc50      	bgt.n	8006fc4 <_dtoa_r+0x934>
 8006f22:	e089      	b.n	8007038 <_dtoa_r+0x9a8>
 8006f24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f2a:	e75d      	b.n	8006de8 <_dtoa_r+0x758>
 8006f2c:	9b01      	ldr	r3, [sp, #4]
 8006f2e:	1e5e      	subs	r6, r3, #1
 8006f30:	9b06      	ldr	r3, [sp, #24]
 8006f32:	42b3      	cmp	r3, r6
 8006f34:	bfbf      	itttt	lt
 8006f36:	9b06      	ldrlt	r3, [sp, #24]
 8006f38:	9606      	strlt	r6, [sp, #24]
 8006f3a:	1af2      	sublt	r2, r6, r3
 8006f3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006f3e:	bfb6      	itet	lt
 8006f40:	189b      	addlt	r3, r3, r2
 8006f42:	1b9e      	subge	r6, r3, r6
 8006f44:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006f46:	9b01      	ldr	r3, [sp, #4]
 8006f48:	bfb8      	it	lt
 8006f4a:	2600      	movlt	r6, #0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	bfb5      	itete	lt
 8006f50:	eba8 0503 	sublt.w	r5, r8, r3
 8006f54:	9b01      	ldrge	r3, [sp, #4]
 8006f56:	2300      	movlt	r3, #0
 8006f58:	4645      	movge	r5, r8
 8006f5a:	e747      	b.n	8006dec <_dtoa_r+0x75c>
 8006f5c:	9e06      	ldr	r6, [sp, #24]
 8006f5e:	9f08      	ldr	r7, [sp, #32]
 8006f60:	4645      	mov	r5, r8
 8006f62:	e74c      	b.n	8006dfe <_dtoa_r+0x76e>
 8006f64:	9a06      	ldr	r2, [sp, #24]
 8006f66:	e775      	b.n	8006e54 <_dtoa_r+0x7c4>
 8006f68:	9b05      	ldr	r3, [sp, #20]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	dc18      	bgt.n	8006fa0 <_dtoa_r+0x910>
 8006f6e:	9b02      	ldr	r3, [sp, #8]
 8006f70:	b9b3      	cbnz	r3, 8006fa0 <_dtoa_r+0x910>
 8006f72:	9b03      	ldr	r3, [sp, #12]
 8006f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f78:	b9a3      	cbnz	r3, 8006fa4 <_dtoa_r+0x914>
 8006f7a:	9b03      	ldr	r3, [sp, #12]
 8006f7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f80:	0d1b      	lsrs	r3, r3, #20
 8006f82:	051b      	lsls	r3, r3, #20
 8006f84:	b12b      	cbz	r3, 8006f92 <_dtoa_r+0x902>
 8006f86:	9b04      	ldr	r3, [sp, #16]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	9304      	str	r3, [sp, #16]
 8006f8c:	f108 0801 	add.w	r8, r8, #1
 8006f90:	2301      	movs	r3, #1
 8006f92:	9306      	str	r3, [sp, #24]
 8006f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f47f af74 	bne.w	8006e84 <_dtoa_r+0x7f4>
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	e779      	b.n	8006e94 <_dtoa_r+0x804>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e7f6      	b.n	8006f92 <_dtoa_r+0x902>
 8006fa4:	9b02      	ldr	r3, [sp, #8]
 8006fa6:	e7f4      	b.n	8006f92 <_dtoa_r+0x902>
 8006fa8:	d085      	beq.n	8006eb6 <_dtoa_r+0x826>
 8006faa:	4618      	mov	r0, r3
 8006fac:	301c      	adds	r0, #28
 8006fae:	e77d      	b.n	8006eac <_dtoa_r+0x81c>
 8006fb0:	40240000 	.word	0x40240000
 8006fb4:	9b01      	ldr	r3, [sp, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	dc38      	bgt.n	800702c <_dtoa_r+0x99c>
 8006fba:	9b05      	ldr	r3, [sp, #20]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	dd35      	ble.n	800702c <_dtoa_r+0x99c>
 8006fc0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006fc4:	f1b9 0f00 	cmp.w	r9, #0
 8006fc8:	d10d      	bne.n	8006fe6 <_dtoa_r+0x956>
 8006fca:	4631      	mov	r1, r6
 8006fcc:	464b      	mov	r3, r9
 8006fce:	2205      	movs	r2, #5
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 fbe5 	bl	80077a0 <__multadd>
 8006fd6:	4601      	mov	r1, r0
 8006fd8:	4606      	mov	r6, r0
 8006fda:	4658      	mov	r0, fp
 8006fdc:	f000 fdfc 	bl	8007bd8 <__mcmp>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	f73f adbd 	bgt.w	8006b60 <_dtoa_r+0x4d0>
 8006fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe8:	9d00      	ldr	r5, [sp, #0]
 8006fea:	ea6f 0a03 	mvn.w	sl, r3
 8006fee:	f04f 0800 	mov.w	r8, #0
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f000 fbb1 	bl	800775c <_Bfree>
 8006ffa:	2f00      	cmp	r7, #0
 8006ffc:	f43f aeb4 	beq.w	8006d68 <_dtoa_r+0x6d8>
 8007000:	f1b8 0f00 	cmp.w	r8, #0
 8007004:	d005      	beq.n	8007012 <_dtoa_r+0x982>
 8007006:	45b8      	cmp	r8, r7
 8007008:	d003      	beq.n	8007012 <_dtoa_r+0x982>
 800700a:	4641      	mov	r1, r8
 800700c:	4620      	mov	r0, r4
 800700e:	f000 fba5 	bl	800775c <_Bfree>
 8007012:	4639      	mov	r1, r7
 8007014:	4620      	mov	r0, r4
 8007016:	f000 fba1 	bl	800775c <_Bfree>
 800701a:	e6a5      	b.n	8006d68 <_dtoa_r+0x6d8>
 800701c:	2600      	movs	r6, #0
 800701e:	4637      	mov	r7, r6
 8007020:	e7e1      	b.n	8006fe6 <_dtoa_r+0x956>
 8007022:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007024:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007028:	4637      	mov	r7, r6
 800702a:	e599      	b.n	8006b60 <_dtoa_r+0x4d0>
 800702c:	9b08      	ldr	r3, [sp, #32]
 800702e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 80fd 	beq.w	8007232 <_dtoa_r+0xba2>
 8007038:	2d00      	cmp	r5, #0
 800703a:	dd05      	ble.n	8007048 <_dtoa_r+0x9b8>
 800703c:	4639      	mov	r1, r7
 800703e:	462a      	mov	r2, r5
 8007040:	4620      	mov	r0, r4
 8007042:	f000 fd5d 	bl	8007b00 <__lshift>
 8007046:	4607      	mov	r7, r0
 8007048:	9b06      	ldr	r3, [sp, #24]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d05c      	beq.n	8007108 <_dtoa_r+0xa78>
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	4620      	mov	r0, r4
 8007052:	f000 fb43 	bl	80076dc <_Balloc>
 8007056:	4605      	mov	r5, r0
 8007058:	b928      	cbnz	r0, 8007066 <_dtoa_r+0x9d6>
 800705a:	4b80      	ldr	r3, [pc, #512]	; (800725c <_dtoa_r+0xbcc>)
 800705c:	4602      	mov	r2, r0
 800705e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007062:	f7ff bb2e 	b.w	80066c2 <_dtoa_r+0x32>
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	3202      	adds	r2, #2
 800706a:	0092      	lsls	r2, r2, #2
 800706c:	f107 010c 	add.w	r1, r7, #12
 8007070:	300c      	adds	r0, #12
 8007072:	f000 fb25 	bl	80076c0 <memcpy>
 8007076:	2201      	movs	r2, #1
 8007078:	4629      	mov	r1, r5
 800707a:	4620      	mov	r0, r4
 800707c:	f000 fd40 	bl	8007b00 <__lshift>
 8007080:	9b00      	ldr	r3, [sp, #0]
 8007082:	3301      	adds	r3, #1
 8007084:	9301      	str	r3, [sp, #4]
 8007086:	9b00      	ldr	r3, [sp, #0]
 8007088:	444b      	add	r3, r9
 800708a:	9307      	str	r3, [sp, #28]
 800708c:	9b02      	ldr	r3, [sp, #8]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	46b8      	mov	r8, r7
 8007094:	9306      	str	r3, [sp, #24]
 8007096:	4607      	mov	r7, r0
 8007098:	9b01      	ldr	r3, [sp, #4]
 800709a:	4631      	mov	r1, r6
 800709c:	3b01      	subs	r3, #1
 800709e:	4658      	mov	r0, fp
 80070a0:	9302      	str	r3, [sp, #8]
 80070a2:	f7ff fa67 	bl	8006574 <quorem>
 80070a6:	4603      	mov	r3, r0
 80070a8:	3330      	adds	r3, #48	; 0x30
 80070aa:	9004      	str	r0, [sp, #16]
 80070ac:	4641      	mov	r1, r8
 80070ae:	4658      	mov	r0, fp
 80070b0:	9308      	str	r3, [sp, #32]
 80070b2:	f000 fd91 	bl	8007bd8 <__mcmp>
 80070b6:	463a      	mov	r2, r7
 80070b8:	4681      	mov	r9, r0
 80070ba:	4631      	mov	r1, r6
 80070bc:	4620      	mov	r0, r4
 80070be:	f000 fda7 	bl	8007c10 <__mdiff>
 80070c2:	68c2      	ldr	r2, [r0, #12]
 80070c4:	9b08      	ldr	r3, [sp, #32]
 80070c6:	4605      	mov	r5, r0
 80070c8:	bb02      	cbnz	r2, 800710c <_dtoa_r+0xa7c>
 80070ca:	4601      	mov	r1, r0
 80070cc:	4658      	mov	r0, fp
 80070ce:	f000 fd83 	bl	8007bd8 <__mcmp>
 80070d2:	9b08      	ldr	r3, [sp, #32]
 80070d4:	4602      	mov	r2, r0
 80070d6:	4629      	mov	r1, r5
 80070d8:	4620      	mov	r0, r4
 80070da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80070de:	f000 fb3d 	bl	800775c <_Bfree>
 80070e2:	9b05      	ldr	r3, [sp, #20]
 80070e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070e6:	9d01      	ldr	r5, [sp, #4]
 80070e8:	ea43 0102 	orr.w	r1, r3, r2
 80070ec:	9b06      	ldr	r3, [sp, #24]
 80070ee:	430b      	orrs	r3, r1
 80070f0:	9b08      	ldr	r3, [sp, #32]
 80070f2:	d10d      	bne.n	8007110 <_dtoa_r+0xa80>
 80070f4:	2b39      	cmp	r3, #57	; 0x39
 80070f6:	d029      	beq.n	800714c <_dtoa_r+0xabc>
 80070f8:	f1b9 0f00 	cmp.w	r9, #0
 80070fc:	dd01      	ble.n	8007102 <_dtoa_r+0xa72>
 80070fe:	9b04      	ldr	r3, [sp, #16]
 8007100:	3331      	adds	r3, #49	; 0x31
 8007102:	9a02      	ldr	r2, [sp, #8]
 8007104:	7013      	strb	r3, [r2, #0]
 8007106:	e774      	b.n	8006ff2 <_dtoa_r+0x962>
 8007108:	4638      	mov	r0, r7
 800710a:	e7b9      	b.n	8007080 <_dtoa_r+0x9f0>
 800710c:	2201      	movs	r2, #1
 800710e:	e7e2      	b.n	80070d6 <_dtoa_r+0xa46>
 8007110:	f1b9 0f00 	cmp.w	r9, #0
 8007114:	db06      	blt.n	8007124 <_dtoa_r+0xa94>
 8007116:	9905      	ldr	r1, [sp, #20]
 8007118:	ea41 0909 	orr.w	r9, r1, r9
 800711c:	9906      	ldr	r1, [sp, #24]
 800711e:	ea59 0101 	orrs.w	r1, r9, r1
 8007122:	d120      	bne.n	8007166 <_dtoa_r+0xad6>
 8007124:	2a00      	cmp	r2, #0
 8007126:	ddec      	ble.n	8007102 <_dtoa_r+0xa72>
 8007128:	4659      	mov	r1, fp
 800712a:	2201      	movs	r2, #1
 800712c:	4620      	mov	r0, r4
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	f000 fce6 	bl	8007b00 <__lshift>
 8007134:	4631      	mov	r1, r6
 8007136:	4683      	mov	fp, r0
 8007138:	f000 fd4e 	bl	8007bd8 <__mcmp>
 800713c:	2800      	cmp	r0, #0
 800713e:	9b01      	ldr	r3, [sp, #4]
 8007140:	dc02      	bgt.n	8007148 <_dtoa_r+0xab8>
 8007142:	d1de      	bne.n	8007102 <_dtoa_r+0xa72>
 8007144:	07da      	lsls	r2, r3, #31
 8007146:	d5dc      	bpl.n	8007102 <_dtoa_r+0xa72>
 8007148:	2b39      	cmp	r3, #57	; 0x39
 800714a:	d1d8      	bne.n	80070fe <_dtoa_r+0xa6e>
 800714c:	9a02      	ldr	r2, [sp, #8]
 800714e:	2339      	movs	r3, #57	; 0x39
 8007150:	7013      	strb	r3, [r2, #0]
 8007152:	462b      	mov	r3, r5
 8007154:	461d      	mov	r5, r3
 8007156:	3b01      	subs	r3, #1
 8007158:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800715c:	2a39      	cmp	r2, #57	; 0x39
 800715e:	d050      	beq.n	8007202 <_dtoa_r+0xb72>
 8007160:	3201      	adds	r2, #1
 8007162:	701a      	strb	r2, [r3, #0]
 8007164:	e745      	b.n	8006ff2 <_dtoa_r+0x962>
 8007166:	2a00      	cmp	r2, #0
 8007168:	dd03      	ble.n	8007172 <_dtoa_r+0xae2>
 800716a:	2b39      	cmp	r3, #57	; 0x39
 800716c:	d0ee      	beq.n	800714c <_dtoa_r+0xabc>
 800716e:	3301      	adds	r3, #1
 8007170:	e7c7      	b.n	8007102 <_dtoa_r+0xa72>
 8007172:	9a01      	ldr	r2, [sp, #4]
 8007174:	9907      	ldr	r1, [sp, #28]
 8007176:	f802 3c01 	strb.w	r3, [r2, #-1]
 800717a:	428a      	cmp	r2, r1
 800717c:	d02a      	beq.n	80071d4 <_dtoa_r+0xb44>
 800717e:	4659      	mov	r1, fp
 8007180:	2300      	movs	r3, #0
 8007182:	220a      	movs	r2, #10
 8007184:	4620      	mov	r0, r4
 8007186:	f000 fb0b 	bl	80077a0 <__multadd>
 800718a:	45b8      	cmp	r8, r7
 800718c:	4683      	mov	fp, r0
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	f04f 020a 	mov.w	r2, #10
 8007196:	4641      	mov	r1, r8
 8007198:	4620      	mov	r0, r4
 800719a:	d107      	bne.n	80071ac <_dtoa_r+0xb1c>
 800719c:	f000 fb00 	bl	80077a0 <__multadd>
 80071a0:	4680      	mov	r8, r0
 80071a2:	4607      	mov	r7, r0
 80071a4:	9b01      	ldr	r3, [sp, #4]
 80071a6:	3301      	adds	r3, #1
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	e775      	b.n	8007098 <_dtoa_r+0xa08>
 80071ac:	f000 faf8 	bl	80077a0 <__multadd>
 80071b0:	4639      	mov	r1, r7
 80071b2:	4680      	mov	r8, r0
 80071b4:	2300      	movs	r3, #0
 80071b6:	220a      	movs	r2, #10
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 faf1 	bl	80077a0 <__multadd>
 80071be:	4607      	mov	r7, r0
 80071c0:	e7f0      	b.n	80071a4 <_dtoa_r+0xb14>
 80071c2:	f1b9 0f00 	cmp.w	r9, #0
 80071c6:	9a00      	ldr	r2, [sp, #0]
 80071c8:	bfcc      	ite	gt
 80071ca:	464d      	movgt	r5, r9
 80071cc:	2501      	movle	r5, #1
 80071ce:	4415      	add	r5, r2
 80071d0:	f04f 0800 	mov.w	r8, #0
 80071d4:	4659      	mov	r1, fp
 80071d6:	2201      	movs	r2, #1
 80071d8:	4620      	mov	r0, r4
 80071da:	9301      	str	r3, [sp, #4]
 80071dc:	f000 fc90 	bl	8007b00 <__lshift>
 80071e0:	4631      	mov	r1, r6
 80071e2:	4683      	mov	fp, r0
 80071e4:	f000 fcf8 	bl	8007bd8 <__mcmp>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	dcb2      	bgt.n	8007152 <_dtoa_r+0xac2>
 80071ec:	d102      	bne.n	80071f4 <_dtoa_r+0xb64>
 80071ee:	9b01      	ldr	r3, [sp, #4]
 80071f0:	07db      	lsls	r3, r3, #31
 80071f2:	d4ae      	bmi.n	8007152 <_dtoa_r+0xac2>
 80071f4:	462b      	mov	r3, r5
 80071f6:	461d      	mov	r5, r3
 80071f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071fc:	2a30      	cmp	r2, #48	; 0x30
 80071fe:	d0fa      	beq.n	80071f6 <_dtoa_r+0xb66>
 8007200:	e6f7      	b.n	8006ff2 <_dtoa_r+0x962>
 8007202:	9a00      	ldr	r2, [sp, #0]
 8007204:	429a      	cmp	r2, r3
 8007206:	d1a5      	bne.n	8007154 <_dtoa_r+0xac4>
 8007208:	f10a 0a01 	add.w	sl, sl, #1
 800720c:	2331      	movs	r3, #49	; 0x31
 800720e:	e779      	b.n	8007104 <_dtoa_r+0xa74>
 8007210:	4b13      	ldr	r3, [pc, #76]	; (8007260 <_dtoa_r+0xbd0>)
 8007212:	f7ff baaf 	b.w	8006774 <_dtoa_r+0xe4>
 8007216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007218:	2b00      	cmp	r3, #0
 800721a:	f47f aa86 	bne.w	800672a <_dtoa_r+0x9a>
 800721e:	4b11      	ldr	r3, [pc, #68]	; (8007264 <_dtoa_r+0xbd4>)
 8007220:	f7ff baa8 	b.w	8006774 <_dtoa_r+0xe4>
 8007224:	f1b9 0f00 	cmp.w	r9, #0
 8007228:	dc03      	bgt.n	8007232 <_dtoa_r+0xba2>
 800722a:	9b05      	ldr	r3, [sp, #20]
 800722c:	2b02      	cmp	r3, #2
 800722e:	f73f aec9 	bgt.w	8006fc4 <_dtoa_r+0x934>
 8007232:	9d00      	ldr	r5, [sp, #0]
 8007234:	4631      	mov	r1, r6
 8007236:	4658      	mov	r0, fp
 8007238:	f7ff f99c 	bl	8006574 <quorem>
 800723c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007240:	f805 3b01 	strb.w	r3, [r5], #1
 8007244:	9a00      	ldr	r2, [sp, #0]
 8007246:	1aaa      	subs	r2, r5, r2
 8007248:	4591      	cmp	r9, r2
 800724a:	ddba      	ble.n	80071c2 <_dtoa_r+0xb32>
 800724c:	4659      	mov	r1, fp
 800724e:	2300      	movs	r3, #0
 8007250:	220a      	movs	r2, #10
 8007252:	4620      	mov	r0, r4
 8007254:	f000 faa4 	bl	80077a0 <__multadd>
 8007258:	4683      	mov	fp, r0
 800725a:	e7eb      	b.n	8007234 <_dtoa_r+0xba4>
 800725c:	08008c7b 	.word	0x08008c7b
 8007260:	08008bd4 	.word	0x08008bd4
 8007264:	08008bf8 	.word	0x08008bf8

08007268 <__sflush_r>:
 8007268:	898a      	ldrh	r2, [r1, #12]
 800726a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800726e:	4605      	mov	r5, r0
 8007270:	0710      	lsls	r0, r2, #28
 8007272:	460c      	mov	r4, r1
 8007274:	d458      	bmi.n	8007328 <__sflush_r+0xc0>
 8007276:	684b      	ldr	r3, [r1, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	dc05      	bgt.n	8007288 <__sflush_r+0x20>
 800727c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800727e:	2b00      	cmp	r3, #0
 8007280:	dc02      	bgt.n	8007288 <__sflush_r+0x20>
 8007282:	2000      	movs	r0, #0
 8007284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800728a:	2e00      	cmp	r6, #0
 800728c:	d0f9      	beq.n	8007282 <__sflush_r+0x1a>
 800728e:	2300      	movs	r3, #0
 8007290:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007294:	682f      	ldr	r7, [r5, #0]
 8007296:	602b      	str	r3, [r5, #0]
 8007298:	d032      	beq.n	8007300 <__sflush_r+0x98>
 800729a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800729c:	89a3      	ldrh	r3, [r4, #12]
 800729e:	075a      	lsls	r2, r3, #29
 80072a0:	d505      	bpl.n	80072ae <__sflush_r+0x46>
 80072a2:	6863      	ldr	r3, [r4, #4]
 80072a4:	1ac0      	subs	r0, r0, r3
 80072a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072a8:	b10b      	cbz	r3, 80072ae <__sflush_r+0x46>
 80072aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072ac:	1ac0      	subs	r0, r0, r3
 80072ae:	2300      	movs	r3, #0
 80072b0:	4602      	mov	r2, r0
 80072b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072b4:	6a21      	ldr	r1, [r4, #32]
 80072b6:	4628      	mov	r0, r5
 80072b8:	47b0      	blx	r6
 80072ba:	1c43      	adds	r3, r0, #1
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	d106      	bne.n	80072ce <__sflush_r+0x66>
 80072c0:	6829      	ldr	r1, [r5, #0]
 80072c2:	291d      	cmp	r1, #29
 80072c4:	d82c      	bhi.n	8007320 <__sflush_r+0xb8>
 80072c6:	4a2a      	ldr	r2, [pc, #168]	; (8007370 <__sflush_r+0x108>)
 80072c8:	40ca      	lsrs	r2, r1
 80072ca:	07d6      	lsls	r6, r2, #31
 80072cc:	d528      	bpl.n	8007320 <__sflush_r+0xb8>
 80072ce:	2200      	movs	r2, #0
 80072d0:	6062      	str	r2, [r4, #4]
 80072d2:	04d9      	lsls	r1, r3, #19
 80072d4:	6922      	ldr	r2, [r4, #16]
 80072d6:	6022      	str	r2, [r4, #0]
 80072d8:	d504      	bpl.n	80072e4 <__sflush_r+0x7c>
 80072da:	1c42      	adds	r2, r0, #1
 80072dc:	d101      	bne.n	80072e2 <__sflush_r+0x7a>
 80072de:	682b      	ldr	r3, [r5, #0]
 80072e0:	b903      	cbnz	r3, 80072e4 <__sflush_r+0x7c>
 80072e2:	6560      	str	r0, [r4, #84]	; 0x54
 80072e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072e6:	602f      	str	r7, [r5, #0]
 80072e8:	2900      	cmp	r1, #0
 80072ea:	d0ca      	beq.n	8007282 <__sflush_r+0x1a>
 80072ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072f0:	4299      	cmp	r1, r3
 80072f2:	d002      	beq.n	80072fa <__sflush_r+0x92>
 80072f4:	4628      	mov	r0, r5
 80072f6:	f000 fd7f 	bl	8007df8 <_free_r>
 80072fa:	2000      	movs	r0, #0
 80072fc:	6360      	str	r0, [r4, #52]	; 0x34
 80072fe:	e7c1      	b.n	8007284 <__sflush_r+0x1c>
 8007300:	6a21      	ldr	r1, [r4, #32]
 8007302:	2301      	movs	r3, #1
 8007304:	4628      	mov	r0, r5
 8007306:	47b0      	blx	r6
 8007308:	1c41      	adds	r1, r0, #1
 800730a:	d1c7      	bne.n	800729c <__sflush_r+0x34>
 800730c:	682b      	ldr	r3, [r5, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0c4      	beq.n	800729c <__sflush_r+0x34>
 8007312:	2b1d      	cmp	r3, #29
 8007314:	d001      	beq.n	800731a <__sflush_r+0xb2>
 8007316:	2b16      	cmp	r3, #22
 8007318:	d101      	bne.n	800731e <__sflush_r+0xb6>
 800731a:	602f      	str	r7, [r5, #0]
 800731c:	e7b1      	b.n	8007282 <__sflush_r+0x1a>
 800731e:	89a3      	ldrh	r3, [r4, #12]
 8007320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007324:	81a3      	strh	r3, [r4, #12]
 8007326:	e7ad      	b.n	8007284 <__sflush_r+0x1c>
 8007328:	690f      	ldr	r7, [r1, #16]
 800732a:	2f00      	cmp	r7, #0
 800732c:	d0a9      	beq.n	8007282 <__sflush_r+0x1a>
 800732e:	0793      	lsls	r3, r2, #30
 8007330:	680e      	ldr	r6, [r1, #0]
 8007332:	bf08      	it	eq
 8007334:	694b      	ldreq	r3, [r1, #20]
 8007336:	600f      	str	r7, [r1, #0]
 8007338:	bf18      	it	ne
 800733a:	2300      	movne	r3, #0
 800733c:	eba6 0807 	sub.w	r8, r6, r7
 8007340:	608b      	str	r3, [r1, #8]
 8007342:	f1b8 0f00 	cmp.w	r8, #0
 8007346:	dd9c      	ble.n	8007282 <__sflush_r+0x1a>
 8007348:	6a21      	ldr	r1, [r4, #32]
 800734a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800734c:	4643      	mov	r3, r8
 800734e:	463a      	mov	r2, r7
 8007350:	4628      	mov	r0, r5
 8007352:	47b0      	blx	r6
 8007354:	2800      	cmp	r0, #0
 8007356:	dc06      	bgt.n	8007366 <__sflush_r+0xfe>
 8007358:	89a3      	ldrh	r3, [r4, #12]
 800735a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800735e:	81a3      	strh	r3, [r4, #12]
 8007360:	f04f 30ff 	mov.w	r0, #4294967295
 8007364:	e78e      	b.n	8007284 <__sflush_r+0x1c>
 8007366:	4407      	add	r7, r0
 8007368:	eba8 0800 	sub.w	r8, r8, r0
 800736c:	e7e9      	b.n	8007342 <__sflush_r+0xda>
 800736e:	bf00      	nop
 8007370:	20400001 	.word	0x20400001

08007374 <_fflush_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	690b      	ldr	r3, [r1, #16]
 8007378:	4605      	mov	r5, r0
 800737a:	460c      	mov	r4, r1
 800737c:	b913      	cbnz	r3, 8007384 <_fflush_r+0x10>
 800737e:	2500      	movs	r5, #0
 8007380:	4628      	mov	r0, r5
 8007382:	bd38      	pop	{r3, r4, r5, pc}
 8007384:	b118      	cbz	r0, 800738e <_fflush_r+0x1a>
 8007386:	6983      	ldr	r3, [r0, #24]
 8007388:	b90b      	cbnz	r3, 800738e <_fflush_r+0x1a>
 800738a:	f000 f887 	bl	800749c <__sinit>
 800738e:	4b14      	ldr	r3, [pc, #80]	; (80073e0 <_fflush_r+0x6c>)
 8007390:	429c      	cmp	r4, r3
 8007392:	d11b      	bne.n	80073cc <_fflush_r+0x58>
 8007394:	686c      	ldr	r4, [r5, #4]
 8007396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0ef      	beq.n	800737e <_fflush_r+0xa>
 800739e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073a0:	07d0      	lsls	r0, r2, #31
 80073a2:	d404      	bmi.n	80073ae <_fflush_r+0x3a>
 80073a4:	0599      	lsls	r1, r3, #22
 80073a6:	d402      	bmi.n	80073ae <_fflush_r+0x3a>
 80073a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073aa:	f000 f91a 	bl	80075e2 <__retarget_lock_acquire_recursive>
 80073ae:	4628      	mov	r0, r5
 80073b0:	4621      	mov	r1, r4
 80073b2:	f7ff ff59 	bl	8007268 <__sflush_r>
 80073b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073b8:	07da      	lsls	r2, r3, #31
 80073ba:	4605      	mov	r5, r0
 80073bc:	d4e0      	bmi.n	8007380 <_fflush_r+0xc>
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	059b      	lsls	r3, r3, #22
 80073c2:	d4dd      	bmi.n	8007380 <_fflush_r+0xc>
 80073c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073c6:	f000 f90d 	bl	80075e4 <__retarget_lock_release_recursive>
 80073ca:	e7d9      	b.n	8007380 <_fflush_r+0xc>
 80073cc:	4b05      	ldr	r3, [pc, #20]	; (80073e4 <_fflush_r+0x70>)
 80073ce:	429c      	cmp	r4, r3
 80073d0:	d101      	bne.n	80073d6 <_fflush_r+0x62>
 80073d2:	68ac      	ldr	r4, [r5, #8]
 80073d4:	e7df      	b.n	8007396 <_fflush_r+0x22>
 80073d6:	4b04      	ldr	r3, [pc, #16]	; (80073e8 <_fflush_r+0x74>)
 80073d8:	429c      	cmp	r4, r3
 80073da:	bf08      	it	eq
 80073dc:	68ec      	ldreq	r4, [r5, #12]
 80073de:	e7da      	b.n	8007396 <_fflush_r+0x22>
 80073e0:	08008cac 	.word	0x08008cac
 80073e4:	08008ccc 	.word	0x08008ccc
 80073e8:	08008c8c 	.word	0x08008c8c

080073ec <std>:
 80073ec:	2300      	movs	r3, #0
 80073ee:	b510      	push	{r4, lr}
 80073f0:	4604      	mov	r4, r0
 80073f2:	e9c0 3300 	strd	r3, r3, [r0]
 80073f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073fa:	6083      	str	r3, [r0, #8]
 80073fc:	8181      	strh	r1, [r0, #12]
 80073fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007400:	81c2      	strh	r2, [r0, #14]
 8007402:	6183      	str	r3, [r0, #24]
 8007404:	4619      	mov	r1, r3
 8007406:	2208      	movs	r2, #8
 8007408:	305c      	adds	r0, #92	; 0x5c
 800740a:	f7fe fb69 	bl	8005ae0 <memset>
 800740e:	4b05      	ldr	r3, [pc, #20]	; (8007424 <std+0x38>)
 8007410:	6263      	str	r3, [r4, #36]	; 0x24
 8007412:	4b05      	ldr	r3, [pc, #20]	; (8007428 <std+0x3c>)
 8007414:	62a3      	str	r3, [r4, #40]	; 0x28
 8007416:	4b05      	ldr	r3, [pc, #20]	; (800742c <std+0x40>)
 8007418:	62e3      	str	r3, [r4, #44]	; 0x2c
 800741a:	4b05      	ldr	r3, [pc, #20]	; (8007430 <std+0x44>)
 800741c:	6224      	str	r4, [r4, #32]
 800741e:	6323      	str	r3, [r4, #48]	; 0x30
 8007420:	bd10      	pop	{r4, pc}
 8007422:	bf00      	nop
 8007424:	08008221 	.word	0x08008221
 8007428:	08008243 	.word	0x08008243
 800742c:	0800827b 	.word	0x0800827b
 8007430:	0800829f 	.word	0x0800829f

08007434 <_cleanup_r>:
 8007434:	4901      	ldr	r1, [pc, #4]	; (800743c <_cleanup_r+0x8>)
 8007436:	f000 b8af 	b.w	8007598 <_fwalk_reent>
 800743a:	bf00      	nop
 800743c:	08007375 	.word	0x08007375

08007440 <__sfmoreglue>:
 8007440:	b570      	push	{r4, r5, r6, lr}
 8007442:	1e4a      	subs	r2, r1, #1
 8007444:	2568      	movs	r5, #104	; 0x68
 8007446:	4355      	muls	r5, r2
 8007448:	460e      	mov	r6, r1
 800744a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800744e:	f000 fd23 	bl	8007e98 <_malloc_r>
 8007452:	4604      	mov	r4, r0
 8007454:	b140      	cbz	r0, 8007468 <__sfmoreglue+0x28>
 8007456:	2100      	movs	r1, #0
 8007458:	e9c0 1600 	strd	r1, r6, [r0]
 800745c:	300c      	adds	r0, #12
 800745e:	60a0      	str	r0, [r4, #8]
 8007460:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007464:	f7fe fb3c 	bl	8005ae0 <memset>
 8007468:	4620      	mov	r0, r4
 800746a:	bd70      	pop	{r4, r5, r6, pc}

0800746c <__sfp_lock_acquire>:
 800746c:	4801      	ldr	r0, [pc, #4]	; (8007474 <__sfp_lock_acquire+0x8>)
 800746e:	f000 b8b8 	b.w	80075e2 <__retarget_lock_acquire_recursive>
 8007472:	bf00      	nop
 8007474:	200003b4 	.word	0x200003b4

08007478 <__sfp_lock_release>:
 8007478:	4801      	ldr	r0, [pc, #4]	; (8007480 <__sfp_lock_release+0x8>)
 800747a:	f000 b8b3 	b.w	80075e4 <__retarget_lock_release_recursive>
 800747e:	bf00      	nop
 8007480:	200003b4 	.word	0x200003b4

08007484 <__sinit_lock_acquire>:
 8007484:	4801      	ldr	r0, [pc, #4]	; (800748c <__sinit_lock_acquire+0x8>)
 8007486:	f000 b8ac 	b.w	80075e2 <__retarget_lock_acquire_recursive>
 800748a:	bf00      	nop
 800748c:	200003af 	.word	0x200003af

08007490 <__sinit_lock_release>:
 8007490:	4801      	ldr	r0, [pc, #4]	; (8007498 <__sinit_lock_release+0x8>)
 8007492:	f000 b8a7 	b.w	80075e4 <__retarget_lock_release_recursive>
 8007496:	bf00      	nop
 8007498:	200003af 	.word	0x200003af

0800749c <__sinit>:
 800749c:	b510      	push	{r4, lr}
 800749e:	4604      	mov	r4, r0
 80074a0:	f7ff fff0 	bl	8007484 <__sinit_lock_acquire>
 80074a4:	69a3      	ldr	r3, [r4, #24]
 80074a6:	b11b      	cbz	r3, 80074b0 <__sinit+0x14>
 80074a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ac:	f7ff bff0 	b.w	8007490 <__sinit_lock_release>
 80074b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80074b4:	6523      	str	r3, [r4, #80]	; 0x50
 80074b6:	4b13      	ldr	r3, [pc, #76]	; (8007504 <__sinit+0x68>)
 80074b8:	4a13      	ldr	r2, [pc, #76]	; (8007508 <__sinit+0x6c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80074be:	42a3      	cmp	r3, r4
 80074c0:	bf04      	itt	eq
 80074c2:	2301      	moveq	r3, #1
 80074c4:	61a3      	streq	r3, [r4, #24]
 80074c6:	4620      	mov	r0, r4
 80074c8:	f000 f820 	bl	800750c <__sfp>
 80074cc:	6060      	str	r0, [r4, #4]
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 f81c 	bl	800750c <__sfp>
 80074d4:	60a0      	str	r0, [r4, #8]
 80074d6:	4620      	mov	r0, r4
 80074d8:	f000 f818 	bl	800750c <__sfp>
 80074dc:	2200      	movs	r2, #0
 80074de:	60e0      	str	r0, [r4, #12]
 80074e0:	2104      	movs	r1, #4
 80074e2:	6860      	ldr	r0, [r4, #4]
 80074e4:	f7ff ff82 	bl	80073ec <std>
 80074e8:	68a0      	ldr	r0, [r4, #8]
 80074ea:	2201      	movs	r2, #1
 80074ec:	2109      	movs	r1, #9
 80074ee:	f7ff ff7d 	bl	80073ec <std>
 80074f2:	68e0      	ldr	r0, [r4, #12]
 80074f4:	2202      	movs	r2, #2
 80074f6:	2112      	movs	r1, #18
 80074f8:	f7ff ff78 	bl	80073ec <std>
 80074fc:	2301      	movs	r3, #1
 80074fe:	61a3      	str	r3, [r4, #24]
 8007500:	e7d2      	b.n	80074a8 <__sinit+0xc>
 8007502:	bf00      	nop
 8007504:	08008bc0 	.word	0x08008bc0
 8007508:	08007435 	.word	0x08007435

0800750c <__sfp>:
 800750c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750e:	4607      	mov	r7, r0
 8007510:	f7ff ffac 	bl	800746c <__sfp_lock_acquire>
 8007514:	4b1e      	ldr	r3, [pc, #120]	; (8007590 <__sfp+0x84>)
 8007516:	681e      	ldr	r6, [r3, #0]
 8007518:	69b3      	ldr	r3, [r6, #24]
 800751a:	b913      	cbnz	r3, 8007522 <__sfp+0x16>
 800751c:	4630      	mov	r0, r6
 800751e:	f7ff ffbd 	bl	800749c <__sinit>
 8007522:	3648      	adds	r6, #72	; 0x48
 8007524:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007528:	3b01      	subs	r3, #1
 800752a:	d503      	bpl.n	8007534 <__sfp+0x28>
 800752c:	6833      	ldr	r3, [r6, #0]
 800752e:	b30b      	cbz	r3, 8007574 <__sfp+0x68>
 8007530:	6836      	ldr	r6, [r6, #0]
 8007532:	e7f7      	b.n	8007524 <__sfp+0x18>
 8007534:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007538:	b9d5      	cbnz	r5, 8007570 <__sfp+0x64>
 800753a:	4b16      	ldr	r3, [pc, #88]	; (8007594 <__sfp+0x88>)
 800753c:	60e3      	str	r3, [r4, #12]
 800753e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007542:	6665      	str	r5, [r4, #100]	; 0x64
 8007544:	f000 f84c 	bl	80075e0 <__retarget_lock_init_recursive>
 8007548:	f7ff ff96 	bl	8007478 <__sfp_lock_release>
 800754c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007550:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007554:	6025      	str	r5, [r4, #0]
 8007556:	61a5      	str	r5, [r4, #24]
 8007558:	2208      	movs	r2, #8
 800755a:	4629      	mov	r1, r5
 800755c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007560:	f7fe fabe 	bl	8005ae0 <memset>
 8007564:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007568:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800756c:	4620      	mov	r0, r4
 800756e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007570:	3468      	adds	r4, #104	; 0x68
 8007572:	e7d9      	b.n	8007528 <__sfp+0x1c>
 8007574:	2104      	movs	r1, #4
 8007576:	4638      	mov	r0, r7
 8007578:	f7ff ff62 	bl	8007440 <__sfmoreglue>
 800757c:	4604      	mov	r4, r0
 800757e:	6030      	str	r0, [r6, #0]
 8007580:	2800      	cmp	r0, #0
 8007582:	d1d5      	bne.n	8007530 <__sfp+0x24>
 8007584:	f7ff ff78 	bl	8007478 <__sfp_lock_release>
 8007588:	230c      	movs	r3, #12
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	e7ee      	b.n	800756c <__sfp+0x60>
 800758e:	bf00      	nop
 8007590:	08008bc0 	.word	0x08008bc0
 8007594:	ffff0001 	.word	0xffff0001

08007598 <_fwalk_reent>:
 8007598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800759c:	4606      	mov	r6, r0
 800759e:	4688      	mov	r8, r1
 80075a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80075a4:	2700      	movs	r7, #0
 80075a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075aa:	f1b9 0901 	subs.w	r9, r9, #1
 80075ae:	d505      	bpl.n	80075bc <_fwalk_reent+0x24>
 80075b0:	6824      	ldr	r4, [r4, #0]
 80075b2:	2c00      	cmp	r4, #0
 80075b4:	d1f7      	bne.n	80075a6 <_fwalk_reent+0xe>
 80075b6:	4638      	mov	r0, r7
 80075b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075bc:	89ab      	ldrh	r3, [r5, #12]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d907      	bls.n	80075d2 <_fwalk_reent+0x3a>
 80075c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075c6:	3301      	adds	r3, #1
 80075c8:	d003      	beq.n	80075d2 <_fwalk_reent+0x3a>
 80075ca:	4629      	mov	r1, r5
 80075cc:	4630      	mov	r0, r6
 80075ce:	47c0      	blx	r8
 80075d0:	4307      	orrs	r7, r0
 80075d2:	3568      	adds	r5, #104	; 0x68
 80075d4:	e7e9      	b.n	80075aa <_fwalk_reent+0x12>
	...

080075d8 <_localeconv_r>:
 80075d8:	4800      	ldr	r0, [pc, #0]	; (80075dc <_localeconv_r+0x4>)
 80075da:	4770      	bx	lr
 80075dc:	200001ac 	.word	0x200001ac

080075e0 <__retarget_lock_init_recursive>:
 80075e0:	4770      	bx	lr

080075e2 <__retarget_lock_acquire_recursive>:
 80075e2:	4770      	bx	lr

080075e4 <__retarget_lock_release_recursive>:
 80075e4:	4770      	bx	lr

080075e6 <__swhatbuf_r>:
 80075e6:	b570      	push	{r4, r5, r6, lr}
 80075e8:	460e      	mov	r6, r1
 80075ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ee:	2900      	cmp	r1, #0
 80075f0:	b096      	sub	sp, #88	; 0x58
 80075f2:	4614      	mov	r4, r2
 80075f4:	461d      	mov	r5, r3
 80075f6:	da07      	bge.n	8007608 <__swhatbuf_r+0x22>
 80075f8:	2300      	movs	r3, #0
 80075fa:	602b      	str	r3, [r5, #0]
 80075fc:	89b3      	ldrh	r3, [r6, #12]
 80075fe:	061a      	lsls	r2, r3, #24
 8007600:	d410      	bmi.n	8007624 <__swhatbuf_r+0x3e>
 8007602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007606:	e00e      	b.n	8007626 <__swhatbuf_r+0x40>
 8007608:	466a      	mov	r2, sp
 800760a:	f000 fe9f 	bl	800834c <_fstat_r>
 800760e:	2800      	cmp	r0, #0
 8007610:	dbf2      	blt.n	80075f8 <__swhatbuf_r+0x12>
 8007612:	9a01      	ldr	r2, [sp, #4]
 8007614:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007618:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800761c:	425a      	negs	r2, r3
 800761e:	415a      	adcs	r2, r3
 8007620:	602a      	str	r2, [r5, #0]
 8007622:	e7ee      	b.n	8007602 <__swhatbuf_r+0x1c>
 8007624:	2340      	movs	r3, #64	; 0x40
 8007626:	2000      	movs	r0, #0
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	b016      	add	sp, #88	; 0x58
 800762c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007630 <__smakebuf_r>:
 8007630:	898b      	ldrh	r3, [r1, #12]
 8007632:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007634:	079d      	lsls	r5, r3, #30
 8007636:	4606      	mov	r6, r0
 8007638:	460c      	mov	r4, r1
 800763a:	d507      	bpl.n	800764c <__smakebuf_r+0x1c>
 800763c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	6123      	str	r3, [r4, #16]
 8007644:	2301      	movs	r3, #1
 8007646:	6163      	str	r3, [r4, #20]
 8007648:	b002      	add	sp, #8
 800764a:	bd70      	pop	{r4, r5, r6, pc}
 800764c:	ab01      	add	r3, sp, #4
 800764e:	466a      	mov	r2, sp
 8007650:	f7ff ffc9 	bl	80075e6 <__swhatbuf_r>
 8007654:	9900      	ldr	r1, [sp, #0]
 8007656:	4605      	mov	r5, r0
 8007658:	4630      	mov	r0, r6
 800765a:	f000 fc1d 	bl	8007e98 <_malloc_r>
 800765e:	b948      	cbnz	r0, 8007674 <__smakebuf_r+0x44>
 8007660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007664:	059a      	lsls	r2, r3, #22
 8007666:	d4ef      	bmi.n	8007648 <__smakebuf_r+0x18>
 8007668:	f023 0303 	bic.w	r3, r3, #3
 800766c:	f043 0302 	orr.w	r3, r3, #2
 8007670:	81a3      	strh	r3, [r4, #12]
 8007672:	e7e3      	b.n	800763c <__smakebuf_r+0xc>
 8007674:	4b0d      	ldr	r3, [pc, #52]	; (80076ac <__smakebuf_r+0x7c>)
 8007676:	62b3      	str	r3, [r6, #40]	; 0x28
 8007678:	89a3      	ldrh	r3, [r4, #12]
 800767a:	6020      	str	r0, [r4, #0]
 800767c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007680:	81a3      	strh	r3, [r4, #12]
 8007682:	9b00      	ldr	r3, [sp, #0]
 8007684:	6163      	str	r3, [r4, #20]
 8007686:	9b01      	ldr	r3, [sp, #4]
 8007688:	6120      	str	r0, [r4, #16]
 800768a:	b15b      	cbz	r3, 80076a4 <__smakebuf_r+0x74>
 800768c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007690:	4630      	mov	r0, r6
 8007692:	f000 fe6d 	bl	8008370 <_isatty_r>
 8007696:	b128      	cbz	r0, 80076a4 <__smakebuf_r+0x74>
 8007698:	89a3      	ldrh	r3, [r4, #12]
 800769a:	f023 0303 	bic.w	r3, r3, #3
 800769e:	f043 0301 	orr.w	r3, r3, #1
 80076a2:	81a3      	strh	r3, [r4, #12]
 80076a4:	89a0      	ldrh	r0, [r4, #12]
 80076a6:	4305      	orrs	r5, r0
 80076a8:	81a5      	strh	r5, [r4, #12]
 80076aa:	e7cd      	b.n	8007648 <__smakebuf_r+0x18>
 80076ac:	08007435 	.word	0x08007435

080076b0 <malloc>:
 80076b0:	4b02      	ldr	r3, [pc, #8]	; (80076bc <malloc+0xc>)
 80076b2:	4601      	mov	r1, r0
 80076b4:	6818      	ldr	r0, [r3, #0]
 80076b6:	f000 bbef 	b.w	8007e98 <_malloc_r>
 80076ba:	bf00      	nop
 80076bc:	20000058 	.word	0x20000058

080076c0 <memcpy>:
 80076c0:	440a      	add	r2, r1
 80076c2:	4291      	cmp	r1, r2
 80076c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80076c8:	d100      	bne.n	80076cc <memcpy+0xc>
 80076ca:	4770      	bx	lr
 80076cc:	b510      	push	{r4, lr}
 80076ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076d6:	4291      	cmp	r1, r2
 80076d8:	d1f9      	bne.n	80076ce <memcpy+0xe>
 80076da:	bd10      	pop	{r4, pc}

080076dc <_Balloc>:
 80076dc:	b570      	push	{r4, r5, r6, lr}
 80076de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076e0:	4604      	mov	r4, r0
 80076e2:	460d      	mov	r5, r1
 80076e4:	b976      	cbnz	r6, 8007704 <_Balloc+0x28>
 80076e6:	2010      	movs	r0, #16
 80076e8:	f7ff ffe2 	bl	80076b0 <malloc>
 80076ec:	4602      	mov	r2, r0
 80076ee:	6260      	str	r0, [r4, #36]	; 0x24
 80076f0:	b920      	cbnz	r0, 80076fc <_Balloc+0x20>
 80076f2:	4b18      	ldr	r3, [pc, #96]	; (8007754 <_Balloc+0x78>)
 80076f4:	4818      	ldr	r0, [pc, #96]	; (8007758 <_Balloc+0x7c>)
 80076f6:	2166      	movs	r1, #102	; 0x66
 80076f8:	f000 fde8 	bl	80082cc <__assert_func>
 80076fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007700:	6006      	str	r6, [r0, #0]
 8007702:	60c6      	str	r6, [r0, #12]
 8007704:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007706:	68f3      	ldr	r3, [r6, #12]
 8007708:	b183      	cbz	r3, 800772c <_Balloc+0x50>
 800770a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007712:	b9b8      	cbnz	r0, 8007744 <_Balloc+0x68>
 8007714:	2101      	movs	r1, #1
 8007716:	fa01 f605 	lsl.w	r6, r1, r5
 800771a:	1d72      	adds	r2, r6, #5
 800771c:	0092      	lsls	r2, r2, #2
 800771e:	4620      	mov	r0, r4
 8007720:	f000 fb5a 	bl	8007dd8 <_calloc_r>
 8007724:	b160      	cbz	r0, 8007740 <_Balloc+0x64>
 8007726:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800772a:	e00e      	b.n	800774a <_Balloc+0x6e>
 800772c:	2221      	movs	r2, #33	; 0x21
 800772e:	2104      	movs	r1, #4
 8007730:	4620      	mov	r0, r4
 8007732:	f000 fb51 	bl	8007dd8 <_calloc_r>
 8007736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007738:	60f0      	str	r0, [r6, #12]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e4      	bne.n	800770a <_Balloc+0x2e>
 8007740:	2000      	movs	r0, #0
 8007742:	bd70      	pop	{r4, r5, r6, pc}
 8007744:	6802      	ldr	r2, [r0, #0]
 8007746:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800774a:	2300      	movs	r3, #0
 800774c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007750:	e7f7      	b.n	8007742 <_Balloc+0x66>
 8007752:	bf00      	nop
 8007754:	08008c05 	.word	0x08008c05
 8007758:	08008cec 	.word	0x08008cec

0800775c <_Bfree>:
 800775c:	b570      	push	{r4, r5, r6, lr}
 800775e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007760:	4605      	mov	r5, r0
 8007762:	460c      	mov	r4, r1
 8007764:	b976      	cbnz	r6, 8007784 <_Bfree+0x28>
 8007766:	2010      	movs	r0, #16
 8007768:	f7ff ffa2 	bl	80076b0 <malloc>
 800776c:	4602      	mov	r2, r0
 800776e:	6268      	str	r0, [r5, #36]	; 0x24
 8007770:	b920      	cbnz	r0, 800777c <_Bfree+0x20>
 8007772:	4b09      	ldr	r3, [pc, #36]	; (8007798 <_Bfree+0x3c>)
 8007774:	4809      	ldr	r0, [pc, #36]	; (800779c <_Bfree+0x40>)
 8007776:	218a      	movs	r1, #138	; 0x8a
 8007778:	f000 fda8 	bl	80082cc <__assert_func>
 800777c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007780:	6006      	str	r6, [r0, #0]
 8007782:	60c6      	str	r6, [r0, #12]
 8007784:	b13c      	cbz	r4, 8007796 <_Bfree+0x3a>
 8007786:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007788:	6862      	ldr	r2, [r4, #4]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007790:	6021      	str	r1, [r4, #0]
 8007792:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007796:	bd70      	pop	{r4, r5, r6, pc}
 8007798:	08008c05 	.word	0x08008c05
 800779c:	08008cec 	.word	0x08008cec

080077a0 <__multadd>:
 80077a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077a4:	690e      	ldr	r6, [r1, #16]
 80077a6:	4607      	mov	r7, r0
 80077a8:	4698      	mov	r8, r3
 80077aa:	460c      	mov	r4, r1
 80077ac:	f101 0014 	add.w	r0, r1, #20
 80077b0:	2300      	movs	r3, #0
 80077b2:	6805      	ldr	r5, [r0, #0]
 80077b4:	b2a9      	uxth	r1, r5
 80077b6:	fb02 8101 	mla	r1, r2, r1, r8
 80077ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80077be:	0c2d      	lsrs	r5, r5, #16
 80077c0:	fb02 c505 	mla	r5, r2, r5, ip
 80077c4:	b289      	uxth	r1, r1
 80077c6:	3301      	adds	r3, #1
 80077c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80077cc:	429e      	cmp	r6, r3
 80077ce:	f840 1b04 	str.w	r1, [r0], #4
 80077d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80077d6:	dcec      	bgt.n	80077b2 <__multadd+0x12>
 80077d8:	f1b8 0f00 	cmp.w	r8, #0
 80077dc:	d022      	beq.n	8007824 <__multadd+0x84>
 80077de:	68a3      	ldr	r3, [r4, #8]
 80077e0:	42b3      	cmp	r3, r6
 80077e2:	dc19      	bgt.n	8007818 <__multadd+0x78>
 80077e4:	6861      	ldr	r1, [r4, #4]
 80077e6:	4638      	mov	r0, r7
 80077e8:	3101      	adds	r1, #1
 80077ea:	f7ff ff77 	bl	80076dc <_Balloc>
 80077ee:	4605      	mov	r5, r0
 80077f0:	b928      	cbnz	r0, 80077fe <__multadd+0x5e>
 80077f2:	4602      	mov	r2, r0
 80077f4:	4b0d      	ldr	r3, [pc, #52]	; (800782c <__multadd+0x8c>)
 80077f6:	480e      	ldr	r0, [pc, #56]	; (8007830 <__multadd+0x90>)
 80077f8:	21b5      	movs	r1, #181	; 0xb5
 80077fa:	f000 fd67 	bl	80082cc <__assert_func>
 80077fe:	6922      	ldr	r2, [r4, #16]
 8007800:	3202      	adds	r2, #2
 8007802:	f104 010c 	add.w	r1, r4, #12
 8007806:	0092      	lsls	r2, r2, #2
 8007808:	300c      	adds	r0, #12
 800780a:	f7ff ff59 	bl	80076c0 <memcpy>
 800780e:	4621      	mov	r1, r4
 8007810:	4638      	mov	r0, r7
 8007812:	f7ff ffa3 	bl	800775c <_Bfree>
 8007816:	462c      	mov	r4, r5
 8007818:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800781c:	3601      	adds	r6, #1
 800781e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007822:	6126      	str	r6, [r4, #16]
 8007824:	4620      	mov	r0, r4
 8007826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800782a:	bf00      	nop
 800782c:	08008c7b 	.word	0x08008c7b
 8007830:	08008cec 	.word	0x08008cec

08007834 <__hi0bits>:
 8007834:	0c03      	lsrs	r3, r0, #16
 8007836:	041b      	lsls	r3, r3, #16
 8007838:	b9d3      	cbnz	r3, 8007870 <__hi0bits+0x3c>
 800783a:	0400      	lsls	r0, r0, #16
 800783c:	2310      	movs	r3, #16
 800783e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007842:	bf04      	itt	eq
 8007844:	0200      	lsleq	r0, r0, #8
 8007846:	3308      	addeq	r3, #8
 8007848:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800784c:	bf04      	itt	eq
 800784e:	0100      	lsleq	r0, r0, #4
 8007850:	3304      	addeq	r3, #4
 8007852:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007856:	bf04      	itt	eq
 8007858:	0080      	lsleq	r0, r0, #2
 800785a:	3302      	addeq	r3, #2
 800785c:	2800      	cmp	r0, #0
 800785e:	db05      	blt.n	800786c <__hi0bits+0x38>
 8007860:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007864:	f103 0301 	add.w	r3, r3, #1
 8007868:	bf08      	it	eq
 800786a:	2320      	moveq	r3, #32
 800786c:	4618      	mov	r0, r3
 800786e:	4770      	bx	lr
 8007870:	2300      	movs	r3, #0
 8007872:	e7e4      	b.n	800783e <__hi0bits+0xa>

08007874 <__lo0bits>:
 8007874:	6803      	ldr	r3, [r0, #0]
 8007876:	f013 0207 	ands.w	r2, r3, #7
 800787a:	4601      	mov	r1, r0
 800787c:	d00b      	beq.n	8007896 <__lo0bits+0x22>
 800787e:	07da      	lsls	r2, r3, #31
 8007880:	d424      	bmi.n	80078cc <__lo0bits+0x58>
 8007882:	0798      	lsls	r0, r3, #30
 8007884:	bf49      	itett	mi
 8007886:	085b      	lsrmi	r3, r3, #1
 8007888:	089b      	lsrpl	r3, r3, #2
 800788a:	2001      	movmi	r0, #1
 800788c:	600b      	strmi	r3, [r1, #0]
 800788e:	bf5c      	itt	pl
 8007890:	600b      	strpl	r3, [r1, #0]
 8007892:	2002      	movpl	r0, #2
 8007894:	4770      	bx	lr
 8007896:	b298      	uxth	r0, r3
 8007898:	b9b0      	cbnz	r0, 80078c8 <__lo0bits+0x54>
 800789a:	0c1b      	lsrs	r3, r3, #16
 800789c:	2010      	movs	r0, #16
 800789e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80078a2:	bf04      	itt	eq
 80078a4:	0a1b      	lsreq	r3, r3, #8
 80078a6:	3008      	addeq	r0, #8
 80078a8:	071a      	lsls	r2, r3, #28
 80078aa:	bf04      	itt	eq
 80078ac:	091b      	lsreq	r3, r3, #4
 80078ae:	3004      	addeq	r0, #4
 80078b0:	079a      	lsls	r2, r3, #30
 80078b2:	bf04      	itt	eq
 80078b4:	089b      	lsreq	r3, r3, #2
 80078b6:	3002      	addeq	r0, #2
 80078b8:	07da      	lsls	r2, r3, #31
 80078ba:	d403      	bmi.n	80078c4 <__lo0bits+0x50>
 80078bc:	085b      	lsrs	r3, r3, #1
 80078be:	f100 0001 	add.w	r0, r0, #1
 80078c2:	d005      	beq.n	80078d0 <__lo0bits+0x5c>
 80078c4:	600b      	str	r3, [r1, #0]
 80078c6:	4770      	bx	lr
 80078c8:	4610      	mov	r0, r2
 80078ca:	e7e8      	b.n	800789e <__lo0bits+0x2a>
 80078cc:	2000      	movs	r0, #0
 80078ce:	4770      	bx	lr
 80078d0:	2020      	movs	r0, #32
 80078d2:	4770      	bx	lr

080078d4 <__i2b>:
 80078d4:	b510      	push	{r4, lr}
 80078d6:	460c      	mov	r4, r1
 80078d8:	2101      	movs	r1, #1
 80078da:	f7ff feff 	bl	80076dc <_Balloc>
 80078de:	4602      	mov	r2, r0
 80078e0:	b928      	cbnz	r0, 80078ee <__i2b+0x1a>
 80078e2:	4b05      	ldr	r3, [pc, #20]	; (80078f8 <__i2b+0x24>)
 80078e4:	4805      	ldr	r0, [pc, #20]	; (80078fc <__i2b+0x28>)
 80078e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80078ea:	f000 fcef 	bl	80082cc <__assert_func>
 80078ee:	2301      	movs	r3, #1
 80078f0:	6144      	str	r4, [r0, #20]
 80078f2:	6103      	str	r3, [r0, #16]
 80078f4:	bd10      	pop	{r4, pc}
 80078f6:	bf00      	nop
 80078f8:	08008c7b 	.word	0x08008c7b
 80078fc:	08008cec 	.word	0x08008cec

08007900 <__multiply>:
 8007900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007904:	4614      	mov	r4, r2
 8007906:	690a      	ldr	r2, [r1, #16]
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	429a      	cmp	r2, r3
 800790c:	bfb8      	it	lt
 800790e:	460b      	movlt	r3, r1
 8007910:	460d      	mov	r5, r1
 8007912:	bfbc      	itt	lt
 8007914:	4625      	movlt	r5, r4
 8007916:	461c      	movlt	r4, r3
 8007918:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800791c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007920:	68ab      	ldr	r3, [r5, #8]
 8007922:	6869      	ldr	r1, [r5, #4]
 8007924:	eb0a 0709 	add.w	r7, sl, r9
 8007928:	42bb      	cmp	r3, r7
 800792a:	b085      	sub	sp, #20
 800792c:	bfb8      	it	lt
 800792e:	3101      	addlt	r1, #1
 8007930:	f7ff fed4 	bl	80076dc <_Balloc>
 8007934:	b930      	cbnz	r0, 8007944 <__multiply+0x44>
 8007936:	4602      	mov	r2, r0
 8007938:	4b42      	ldr	r3, [pc, #264]	; (8007a44 <__multiply+0x144>)
 800793a:	4843      	ldr	r0, [pc, #268]	; (8007a48 <__multiply+0x148>)
 800793c:	f240 115d 	movw	r1, #349	; 0x15d
 8007940:	f000 fcc4 	bl	80082cc <__assert_func>
 8007944:	f100 0614 	add.w	r6, r0, #20
 8007948:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800794c:	4633      	mov	r3, r6
 800794e:	2200      	movs	r2, #0
 8007950:	4543      	cmp	r3, r8
 8007952:	d31e      	bcc.n	8007992 <__multiply+0x92>
 8007954:	f105 0c14 	add.w	ip, r5, #20
 8007958:	f104 0314 	add.w	r3, r4, #20
 800795c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007960:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007964:	9202      	str	r2, [sp, #8]
 8007966:	ebac 0205 	sub.w	r2, ip, r5
 800796a:	3a15      	subs	r2, #21
 800796c:	f022 0203 	bic.w	r2, r2, #3
 8007970:	3204      	adds	r2, #4
 8007972:	f105 0115 	add.w	r1, r5, #21
 8007976:	458c      	cmp	ip, r1
 8007978:	bf38      	it	cc
 800797a:	2204      	movcc	r2, #4
 800797c:	9201      	str	r2, [sp, #4]
 800797e:	9a02      	ldr	r2, [sp, #8]
 8007980:	9303      	str	r3, [sp, #12]
 8007982:	429a      	cmp	r2, r3
 8007984:	d808      	bhi.n	8007998 <__multiply+0x98>
 8007986:	2f00      	cmp	r7, #0
 8007988:	dc55      	bgt.n	8007a36 <__multiply+0x136>
 800798a:	6107      	str	r7, [r0, #16]
 800798c:	b005      	add	sp, #20
 800798e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007992:	f843 2b04 	str.w	r2, [r3], #4
 8007996:	e7db      	b.n	8007950 <__multiply+0x50>
 8007998:	f8b3 a000 	ldrh.w	sl, [r3]
 800799c:	f1ba 0f00 	cmp.w	sl, #0
 80079a0:	d020      	beq.n	80079e4 <__multiply+0xe4>
 80079a2:	f105 0e14 	add.w	lr, r5, #20
 80079a6:	46b1      	mov	r9, r6
 80079a8:	2200      	movs	r2, #0
 80079aa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80079ae:	f8d9 b000 	ldr.w	fp, [r9]
 80079b2:	b2a1      	uxth	r1, r4
 80079b4:	fa1f fb8b 	uxth.w	fp, fp
 80079b8:	fb0a b101 	mla	r1, sl, r1, fp
 80079bc:	4411      	add	r1, r2
 80079be:	f8d9 2000 	ldr.w	r2, [r9]
 80079c2:	0c24      	lsrs	r4, r4, #16
 80079c4:	0c12      	lsrs	r2, r2, #16
 80079c6:	fb0a 2404 	mla	r4, sl, r4, r2
 80079ca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80079ce:	b289      	uxth	r1, r1
 80079d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80079d4:	45f4      	cmp	ip, lr
 80079d6:	f849 1b04 	str.w	r1, [r9], #4
 80079da:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80079de:	d8e4      	bhi.n	80079aa <__multiply+0xaa>
 80079e0:	9901      	ldr	r1, [sp, #4]
 80079e2:	5072      	str	r2, [r6, r1]
 80079e4:	9a03      	ldr	r2, [sp, #12]
 80079e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80079ea:	3304      	adds	r3, #4
 80079ec:	f1b9 0f00 	cmp.w	r9, #0
 80079f0:	d01f      	beq.n	8007a32 <__multiply+0x132>
 80079f2:	6834      	ldr	r4, [r6, #0]
 80079f4:	f105 0114 	add.w	r1, r5, #20
 80079f8:	46b6      	mov	lr, r6
 80079fa:	f04f 0a00 	mov.w	sl, #0
 80079fe:	880a      	ldrh	r2, [r1, #0]
 8007a00:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007a04:	fb09 b202 	mla	r2, r9, r2, fp
 8007a08:	4492      	add	sl, r2
 8007a0a:	b2a4      	uxth	r4, r4
 8007a0c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007a10:	f84e 4b04 	str.w	r4, [lr], #4
 8007a14:	f851 4b04 	ldr.w	r4, [r1], #4
 8007a18:	f8be 2000 	ldrh.w	r2, [lr]
 8007a1c:	0c24      	lsrs	r4, r4, #16
 8007a1e:	fb09 2404 	mla	r4, r9, r4, r2
 8007a22:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007a26:	458c      	cmp	ip, r1
 8007a28:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007a2c:	d8e7      	bhi.n	80079fe <__multiply+0xfe>
 8007a2e:	9a01      	ldr	r2, [sp, #4]
 8007a30:	50b4      	str	r4, [r6, r2]
 8007a32:	3604      	adds	r6, #4
 8007a34:	e7a3      	b.n	800797e <__multiply+0x7e>
 8007a36:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1a5      	bne.n	800798a <__multiply+0x8a>
 8007a3e:	3f01      	subs	r7, #1
 8007a40:	e7a1      	b.n	8007986 <__multiply+0x86>
 8007a42:	bf00      	nop
 8007a44:	08008c7b 	.word	0x08008c7b
 8007a48:	08008cec 	.word	0x08008cec

08007a4c <__pow5mult>:
 8007a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a50:	4615      	mov	r5, r2
 8007a52:	f012 0203 	ands.w	r2, r2, #3
 8007a56:	4606      	mov	r6, r0
 8007a58:	460f      	mov	r7, r1
 8007a5a:	d007      	beq.n	8007a6c <__pow5mult+0x20>
 8007a5c:	4c25      	ldr	r4, [pc, #148]	; (8007af4 <__pow5mult+0xa8>)
 8007a5e:	3a01      	subs	r2, #1
 8007a60:	2300      	movs	r3, #0
 8007a62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a66:	f7ff fe9b 	bl	80077a0 <__multadd>
 8007a6a:	4607      	mov	r7, r0
 8007a6c:	10ad      	asrs	r5, r5, #2
 8007a6e:	d03d      	beq.n	8007aec <__pow5mult+0xa0>
 8007a70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007a72:	b97c      	cbnz	r4, 8007a94 <__pow5mult+0x48>
 8007a74:	2010      	movs	r0, #16
 8007a76:	f7ff fe1b 	bl	80076b0 <malloc>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	6270      	str	r0, [r6, #36]	; 0x24
 8007a7e:	b928      	cbnz	r0, 8007a8c <__pow5mult+0x40>
 8007a80:	4b1d      	ldr	r3, [pc, #116]	; (8007af8 <__pow5mult+0xac>)
 8007a82:	481e      	ldr	r0, [pc, #120]	; (8007afc <__pow5mult+0xb0>)
 8007a84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007a88:	f000 fc20 	bl	80082cc <__assert_func>
 8007a8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a90:	6004      	str	r4, [r0, #0]
 8007a92:	60c4      	str	r4, [r0, #12]
 8007a94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007a98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a9c:	b94c      	cbnz	r4, 8007ab2 <__pow5mult+0x66>
 8007a9e:	f240 2171 	movw	r1, #625	; 0x271
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f7ff ff16 	bl	80078d4 <__i2b>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f8c8 0008 	str.w	r0, [r8, #8]
 8007aae:	4604      	mov	r4, r0
 8007ab0:	6003      	str	r3, [r0, #0]
 8007ab2:	f04f 0900 	mov.w	r9, #0
 8007ab6:	07eb      	lsls	r3, r5, #31
 8007ab8:	d50a      	bpl.n	8007ad0 <__pow5mult+0x84>
 8007aba:	4639      	mov	r1, r7
 8007abc:	4622      	mov	r2, r4
 8007abe:	4630      	mov	r0, r6
 8007ac0:	f7ff ff1e 	bl	8007900 <__multiply>
 8007ac4:	4639      	mov	r1, r7
 8007ac6:	4680      	mov	r8, r0
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f7ff fe47 	bl	800775c <_Bfree>
 8007ace:	4647      	mov	r7, r8
 8007ad0:	106d      	asrs	r5, r5, #1
 8007ad2:	d00b      	beq.n	8007aec <__pow5mult+0xa0>
 8007ad4:	6820      	ldr	r0, [r4, #0]
 8007ad6:	b938      	cbnz	r0, 8007ae8 <__pow5mult+0x9c>
 8007ad8:	4622      	mov	r2, r4
 8007ada:	4621      	mov	r1, r4
 8007adc:	4630      	mov	r0, r6
 8007ade:	f7ff ff0f 	bl	8007900 <__multiply>
 8007ae2:	6020      	str	r0, [r4, #0]
 8007ae4:	f8c0 9000 	str.w	r9, [r0]
 8007ae8:	4604      	mov	r4, r0
 8007aea:	e7e4      	b.n	8007ab6 <__pow5mult+0x6a>
 8007aec:	4638      	mov	r0, r7
 8007aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007af2:	bf00      	nop
 8007af4:	08008e40 	.word	0x08008e40
 8007af8:	08008c05 	.word	0x08008c05
 8007afc:	08008cec 	.word	0x08008cec

08007b00 <__lshift>:
 8007b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b04:	460c      	mov	r4, r1
 8007b06:	6849      	ldr	r1, [r1, #4]
 8007b08:	6923      	ldr	r3, [r4, #16]
 8007b0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b0e:	68a3      	ldr	r3, [r4, #8]
 8007b10:	4607      	mov	r7, r0
 8007b12:	4691      	mov	r9, r2
 8007b14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b18:	f108 0601 	add.w	r6, r8, #1
 8007b1c:	42b3      	cmp	r3, r6
 8007b1e:	db0b      	blt.n	8007b38 <__lshift+0x38>
 8007b20:	4638      	mov	r0, r7
 8007b22:	f7ff fddb 	bl	80076dc <_Balloc>
 8007b26:	4605      	mov	r5, r0
 8007b28:	b948      	cbnz	r0, 8007b3e <__lshift+0x3e>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	4b28      	ldr	r3, [pc, #160]	; (8007bd0 <__lshift+0xd0>)
 8007b2e:	4829      	ldr	r0, [pc, #164]	; (8007bd4 <__lshift+0xd4>)
 8007b30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007b34:	f000 fbca 	bl	80082cc <__assert_func>
 8007b38:	3101      	adds	r1, #1
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	e7ee      	b.n	8007b1c <__lshift+0x1c>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f100 0114 	add.w	r1, r0, #20
 8007b44:	f100 0210 	add.w	r2, r0, #16
 8007b48:	4618      	mov	r0, r3
 8007b4a:	4553      	cmp	r3, sl
 8007b4c:	db33      	blt.n	8007bb6 <__lshift+0xb6>
 8007b4e:	6920      	ldr	r0, [r4, #16]
 8007b50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b54:	f104 0314 	add.w	r3, r4, #20
 8007b58:	f019 091f 	ands.w	r9, r9, #31
 8007b5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b64:	d02b      	beq.n	8007bbe <__lshift+0xbe>
 8007b66:	f1c9 0e20 	rsb	lr, r9, #32
 8007b6a:	468a      	mov	sl, r1
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	6818      	ldr	r0, [r3, #0]
 8007b70:	fa00 f009 	lsl.w	r0, r0, r9
 8007b74:	4302      	orrs	r2, r0
 8007b76:	f84a 2b04 	str.w	r2, [sl], #4
 8007b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b7e:	459c      	cmp	ip, r3
 8007b80:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b84:	d8f3      	bhi.n	8007b6e <__lshift+0x6e>
 8007b86:	ebac 0304 	sub.w	r3, ip, r4
 8007b8a:	3b15      	subs	r3, #21
 8007b8c:	f023 0303 	bic.w	r3, r3, #3
 8007b90:	3304      	adds	r3, #4
 8007b92:	f104 0015 	add.w	r0, r4, #21
 8007b96:	4584      	cmp	ip, r0
 8007b98:	bf38      	it	cc
 8007b9a:	2304      	movcc	r3, #4
 8007b9c:	50ca      	str	r2, [r1, r3]
 8007b9e:	b10a      	cbz	r2, 8007ba4 <__lshift+0xa4>
 8007ba0:	f108 0602 	add.w	r6, r8, #2
 8007ba4:	3e01      	subs	r6, #1
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	612e      	str	r6, [r5, #16]
 8007baa:	4621      	mov	r1, r4
 8007bac:	f7ff fdd6 	bl	800775c <_Bfree>
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007bba:	3301      	adds	r3, #1
 8007bbc:	e7c5      	b.n	8007b4a <__lshift+0x4a>
 8007bbe:	3904      	subs	r1, #4
 8007bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007bc8:	459c      	cmp	ip, r3
 8007bca:	d8f9      	bhi.n	8007bc0 <__lshift+0xc0>
 8007bcc:	e7ea      	b.n	8007ba4 <__lshift+0xa4>
 8007bce:	bf00      	nop
 8007bd0:	08008c7b 	.word	0x08008c7b
 8007bd4:	08008cec 	.word	0x08008cec

08007bd8 <__mcmp>:
 8007bd8:	b530      	push	{r4, r5, lr}
 8007bda:	6902      	ldr	r2, [r0, #16]
 8007bdc:	690c      	ldr	r4, [r1, #16]
 8007bde:	1b12      	subs	r2, r2, r4
 8007be0:	d10e      	bne.n	8007c00 <__mcmp+0x28>
 8007be2:	f100 0314 	add.w	r3, r0, #20
 8007be6:	3114      	adds	r1, #20
 8007be8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007bec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007bf0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007bf4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007bf8:	42a5      	cmp	r5, r4
 8007bfa:	d003      	beq.n	8007c04 <__mcmp+0x2c>
 8007bfc:	d305      	bcc.n	8007c0a <__mcmp+0x32>
 8007bfe:	2201      	movs	r2, #1
 8007c00:	4610      	mov	r0, r2
 8007c02:	bd30      	pop	{r4, r5, pc}
 8007c04:	4283      	cmp	r3, r0
 8007c06:	d3f3      	bcc.n	8007bf0 <__mcmp+0x18>
 8007c08:	e7fa      	b.n	8007c00 <__mcmp+0x28>
 8007c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0e:	e7f7      	b.n	8007c00 <__mcmp+0x28>

08007c10 <__mdiff>:
 8007c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c14:	460c      	mov	r4, r1
 8007c16:	4606      	mov	r6, r0
 8007c18:	4611      	mov	r1, r2
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	4617      	mov	r7, r2
 8007c1e:	f7ff ffdb 	bl	8007bd8 <__mcmp>
 8007c22:	1e05      	subs	r5, r0, #0
 8007c24:	d110      	bne.n	8007c48 <__mdiff+0x38>
 8007c26:	4629      	mov	r1, r5
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f7ff fd57 	bl	80076dc <_Balloc>
 8007c2e:	b930      	cbnz	r0, 8007c3e <__mdiff+0x2e>
 8007c30:	4b39      	ldr	r3, [pc, #228]	; (8007d18 <__mdiff+0x108>)
 8007c32:	4602      	mov	r2, r0
 8007c34:	f240 2132 	movw	r1, #562	; 0x232
 8007c38:	4838      	ldr	r0, [pc, #224]	; (8007d1c <__mdiff+0x10c>)
 8007c3a:	f000 fb47 	bl	80082cc <__assert_func>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c48:	bfa4      	itt	ge
 8007c4a:	463b      	movge	r3, r7
 8007c4c:	4627      	movge	r7, r4
 8007c4e:	4630      	mov	r0, r6
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	bfa6      	itte	ge
 8007c54:	461c      	movge	r4, r3
 8007c56:	2500      	movge	r5, #0
 8007c58:	2501      	movlt	r5, #1
 8007c5a:	f7ff fd3f 	bl	80076dc <_Balloc>
 8007c5e:	b920      	cbnz	r0, 8007c6a <__mdiff+0x5a>
 8007c60:	4b2d      	ldr	r3, [pc, #180]	; (8007d18 <__mdiff+0x108>)
 8007c62:	4602      	mov	r2, r0
 8007c64:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007c68:	e7e6      	b.n	8007c38 <__mdiff+0x28>
 8007c6a:	693e      	ldr	r6, [r7, #16]
 8007c6c:	60c5      	str	r5, [r0, #12]
 8007c6e:	6925      	ldr	r5, [r4, #16]
 8007c70:	f107 0114 	add.w	r1, r7, #20
 8007c74:	f104 0914 	add.w	r9, r4, #20
 8007c78:	f100 0e14 	add.w	lr, r0, #20
 8007c7c:	f107 0210 	add.w	r2, r7, #16
 8007c80:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007c84:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007c88:	46f2      	mov	sl, lr
 8007c8a:	2700      	movs	r7, #0
 8007c8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007c90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007c94:	fa1f f883 	uxth.w	r8, r3
 8007c98:	fa17 f78b 	uxtah	r7, r7, fp
 8007c9c:	0c1b      	lsrs	r3, r3, #16
 8007c9e:	eba7 0808 	sub.w	r8, r7, r8
 8007ca2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ca6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007caa:	fa1f f888 	uxth.w	r8, r8
 8007cae:	141f      	asrs	r7, r3, #16
 8007cb0:	454d      	cmp	r5, r9
 8007cb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007cb6:	f84a 3b04 	str.w	r3, [sl], #4
 8007cba:	d8e7      	bhi.n	8007c8c <__mdiff+0x7c>
 8007cbc:	1b2b      	subs	r3, r5, r4
 8007cbe:	3b15      	subs	r3, #21
 8007cc0:	f023 0303 	bic.w	r3, r3, #3
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	3415      	adds	r4, #21
 8007cc8:	42a5      	cmp	r5, r4
 8007cca:	bf38      	it	cc
 8007ccc:	2304      	movcc	r3, #4
 8007cce:	4419      	add	r1, r3
 8007cd0:	4473      	add	r3, lr
 8007cd2:	469e      	mov	lr, r3
 8007cd4:	460d      	mov	r5, r1
 8007cd6:	4565      	cmp	r5, ip
 8007cd8:	d30e      	bcc.n	8007cf8 <__mdiff+0xe8>
 8007cda:	f10c 0203 	add.w	r2, ip, #3
 8007cde:	1a52      	subs	r2, r2, r1
 8007ce0:	f022 0203 	bic.w	r2, r2, #3
 8007ce4:	3903      	subs	r1, #3
 8007ce6:	458c      	cmp	ip, r1
 8007ce8:	bf38      	it	cc
 8007cea:	2200      	movcc	r2, #0
 8007cec:	441a      	add	r2, r3
 8007cee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007cf2:	b17b      	cbz	r3, 8007d14 <__mdiff+0x104>
 8007cf4:	6106      	str	r6, [r0, #16]
 8007cf6:	e7a5      	b.n	8007c44 <__mdiff+0x34>
 8007cf8:	f855 8b04 	ldr.w	r8, [r5], #4
 8007cfc:	fa17 f488 	uxtah	r4, r7, r8
 8007d00:	1422      	asrs	r2, r4, #16
 8007d02:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007d06:	b2a4      	uxth	r4, r4
 8007d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007d0c:	f84e 4b04 	str.w	r4, [lr], #4
 8007d10:	1417      	asrs	r7, r2, #16
 8007d12:	e7e0      	b.n	8007cd6 <__mdiff+0xc6>
 8007d14:	3e01      	subs	r6, #1
 8007d16:	e7ea      	b.n	8007cee <__mdiff+0xde>
 8007d18:	08008c7b 	.word	0x08008c7b
 8007d1c:	08008cec 	.word	0x08008cec

08007d20 <__d2b>:
 8007d20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d24:	4689      	mov	r9, r1
 8007d26:	2101      	movs	r1, #1
 8007d28:	ec57 6b10 	vmov	r6, r7, d0
 8007d2c:	4690      	mov	r8, r2
 8007d2e:	f7ff fcd5 	bl	80076dc <_Balloc>
 8007d32:	4604      	mov	r4, r0
 8007d34:	b930      	cbnz	r0, 8007d44 <__d2b+0x24>
 8007d36:	4602      	mov	r2, r0
 8007d38:	4b25      	ldr	r3, [pc, #148]	; (8007dd0 <__d2b+0xb0>)
 8007d3a:	4826      	ldr	r0, [pc, #152]	; (8007dd4 <__d2b+0xb4>)
 8007d3c:	f240 310a 	movw	r1, #778	; 0x30a
 8007d40:	f000 fac4 	bl	80082cc <__assert_func>
 8007d44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007d48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d4c:	bb35      	cbnz	r5, 8007d9c <__d2b+0x7c>
 8007d4e:	2e00      	cmp	r6, #0
 8007d50:	9301      	str	r3, [sp, #4]
 8007d52:	d028      	beq.n	8007da6 <__d2b+0x86>
 8007d54:	4668      	mov	r0, sp
 8007d56:	9600      	str	r6, [sp, #0]
 8007d58:	f7ff fd8c 	bl	8007874 <__lo0bits>
 8007d5c:	9900      	ldr	r1, [sp, #0]
 8007d5e:	b300      	cbz	r0, 8007da2 <__d2b+0x82>
 8007d60:	9a01      	ldr	r2, [sp, #4]
 8007d62:	f1c0 0320 	rsb	r3, r0, #32
 8007d66:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6a:	430b      	orrs	r3, r1
 8007d6c:	40c2      	lsrs	r2, r0
 8007d6e:	6163      	str	r3, [r4, #20]
 8007d70:	9201      	str	r2, [sp, #4]
 8007d72:	9b01      	ldr	r3, [sp, #4]
 8007d74:	61a3      	str	r3, [r4, #24]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bf14      	ite	ne
 8007d7a:	2202      	movne	r2, #2
 8007d7c:	2201      	moveq	r2, #1
 8007d7e:	6122      	str	r2, [r4, #16]
 8007d80:	b1d5      	cbz	r5, 8007db8 <__d2b+0x98>
 8007d82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d86:	4405      	add	r5, r0
 8007d88:	f8c9 5000 	str.w	r5, [r9]
 8007d8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d90:	f8c8 0000 	str.w	r0, [r8]
 8007d94:	4620      	mov	r0, r4
 8007d96:	b003      	add	sp, #12
 8007d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007da0:	e7d5      	b.n	8007d4e <__d2b+0x2e>
 8007da2:	6161      	str	r1, [r4, #20]
 8007da4:	e7e5      	b.n	8007d72 <__d2b+0x52>
 8007da6:	a801      	add	r0, sp, #4
 8007da8:	f7ff fd64 	bl	8007874 <__lo0bits>
 8007dac:	9b01      	ldr	r3, [sp, #4]
 8007dae:	6163      	str	r3, [r4, #20]
 8007db0:	2201      	movs	r2, #1
 8007db2:	6122      	str	r2, [r4, #16]
 8007db4:	3020      	adds	r0, #32
 8007db6:	e7e3      	b.n	8007d80 <__d2b+0x60>
 8007db8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007dbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007dc0:	f8c9 0000 	str.w	r0, [r9]
 8007dc4:	6918      	ldr	r0, [r3, #16]
 8007dc6:	f7ff fd35 	bl	8007834 <__hi0bits>
 8007dca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007dce:	e7df      	b.n	8007d90 <__d2b+0x70>
 8007dd0:	08008c7b 	.word	0x08008c7b
 8007dd4:	08008cec 	.word	0x08008cec

08007dd8 <_calloc_r>:
 8007dd8:	b513      	push	{r0, r1, r4, lr}
 8007dda:	434a      	muls	r2, r1
 8007ddc:	4611      	mov	r1, r2
 8007dde:	9201      	str	r2, [sp, #4]
 8007de0:	f000 f85a 	bl	8007e98 <_malloc_r>
 8007de4:	4604      	mov	r4, r0
 8007de6:	b118      	cbz	r0, 8007df0 <_calloc_r+0x18>
 8007de8:	9a01      	ldr	r2, [sp, #4]
 8007dea:	2100      	movs	r1, #0
 8007dec:	f7fd fe78 	bl	8005ae0 <memset>
 8007df0:	4620      	mov	r0, r4
 8007df2:	b002      	add	sp, #8
 8007df4:	bd10      	pop	{r4, pc}
	...

08007df8 <_free_r>:
 8007df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dfa:	2900      	cmp	r1, #0
 8007dfc:	d048      	beq.n	8007e90 <_free_r+0x98>
 8007dfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e02:	9001      	str	r0, [sp, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f1a1 0404 	sub.w	r4, r1, #4
 8007e0a:	bfb8      	it	lt
 8007e0c:	18e4      	addlt	r4, r4, r3
 8007e0e:	f000 fae3 	bl	80083d8 <__malloc_lock>
 8007e12:	4a20      	ldr	r2, [pc, #128]	; (8007e94 <_free_r+0x9c>)
 8007e14:	9801      	ldr	r0, [sp, #4]
 8007e16:	6813      	ldr	r3, [r2, #0]
 8007e18:	4615      	mov	r5, r2
 8007e1a:	b933      	cbnz	r3, 8007e2a <_free_r+0x32>
 8007e1c:	6063      	str	r3, [r4, #4]
 8007e1e:	6014      	str	r4, [r2, #0]
 8007e20:	b003      	add	sp, #12
 8007e22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e26:	f000 badd 	b.w	80083e4 <__malloc_unlock>
 8007e2a:	42a3      	cmp	r3, r4
 8007e2c:	d90b      	bls.n	8007e46 <_free_r+0x4e>
 8007e2e:	6821      	ldr	r1, [r4, #0]
 8007e30:	1862      	adds	r2, r4, r1
 8007e32:	4293      	cmp	r3, r2
 8007e34:	bf04      	itt	eq
 8007e36:	681a      	ldreq	r2, [r3, #0]
 8007e38:	685b      	ldreq	r3, [r3, #4]
 8007e3a:	6063      	str	r3, [r4, #4]
 8007e3c:	bf04      	itt	eq
 8007e3e:	1852      	addeq	r2, r2, r1
 8007e40:	6022      	streq	r2, [r4, #0]
 8007e42:	602c      	str	r4, [r5, #0]
 8007e44:	e7ec      	b.n	8007e20 <_free_r+0x28>
 8007e46:	461a      	mov	r2, r3
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	b10b      	cbz	r3, 8007e50 <_free_r+0x58>
 8007e4c:	42a3      	cmp	r3, r4
 8007e4e:	d9fa      	bls.n	8007e46 <_free_r+0x4e>
 8007e50:	6811      	ldr	r1, [r2, #0]
 8007e52:	1855      	adds	r5, r2, r1
 8007e54:	42a5      	cmp	r5, r4
 8007e56:	d10b      	bne.n	8007e70 <_free_r+0x78>
 8007e58:	6824      	ldr	r4, [r4, #0]
 8007e5a:	4421      	add	r1, r4
 8007e5c:	1854      	adds	r4, r2, r1
 8007e5e:	42a3      	cmp	r3, r4
 8007e60:	6011      	str	r1, [r2, #0]
 8007e62:	d1dd      	bne.n	8007e20 <_free_r+0x28>
 8007e64:	681c      	ldr	r4, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	6053      	str	r3, [r2, #4]
 8007e6a:	4421      	add	r1, r4
 8007e6c:	6011      	str	r1, [r2, #0]
 8007e6e:	e7d7      	b.n	8007e20 <_free_r+0x28>
 8007e70:	d902      	bls.n	8007e78 <_free_r+0x80>
 8007e72:	230c      	movs	r3, #12
 8007e74:	6003      	str	r3, [r0, #0]
 8007e76:	e7d3      	b.n	8007e20 <_free_r+0x28>
 8007e78:	6825      	ldr	r5, [r4, #0]
 8007e7a:	1961      	adds	r1, r4, r5
 8007e7c:	428b      	cmp	r3, r1
 8007e7e:	bf04      	itt	eq
 8007e80:	6819      	ldreq	r1, [r3, #0]
 8007e82:	685b      	ldreq	r3, [r3, #4]
 8007e84:	6063      	str	r3, [r4, #4]
 8007e86:	bf04      	itt	eq
 8007e88:	1949      	addeq	r1, r1, r5
 8007e8a:	6021      	streq	r1, [r4, #0]
 8007e8c:	6054      	str	r4, [r2, #4]
 8007e8e:	e7c7      	b.n	8007e20 <_free_r+0x28>
 8007e90:	b003      	add	sp, #12
 8007e92:	bd30      	pop	{r4, r5, pc}
 8007e94:	200002c0 	.word	0x200002c0

08007e98 <_malloc_r>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	1ccd      	adds	r5, r1, #3
 8007e9c:	f025 0503 	bic.w	r5, r5, #3
 8007ea0:	3508      	adds	r5, #8
 8007ea2:	2d0c      	cmp	r5, #12
 8007ea4:	bf38      	it	cc
 8007ea6:	250c      	movcc	r5, #12
 8007ea8:	2d00      	cmp	r5, #0
 8007eaa:	4606      	mov	r6, r0
 8007eac:	db01      	blt.n	8007eb2 <_malloc_r+0x1a>
 8007eae:	42a9      	cmp	r1, r5
 8007eb0:	d903      	bls.n	8007eba <_malloc_r+0x22>
 8007eb2:	230c      	movs	r3, #12
 8007eb4:	6033      	str	r3, [r6, #0]
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eba:	f000 fa8d 	bl	80083d8 <__malloc_lock>
 8007ebe:	4921      	ldr	r1, [pc, #132]	; (8007f44 <_malloc_r+0xac>)
 8007ec0:	680a      	ldr	r2, [r1, #0]
 8007ec2:	4614      	mov	r4, r2
 8007ec4:	b99c      	cbnz	r4, 8007eee <_malloc_r+0x56>
 8007ec6:	4f20      	ldr	r7, [pc, #128]	; (8007f48 <_malloc_r+0xb0>)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	b923      	cbnz	r3, 8007ed6 <_malloc_r+0x3e>
 8007ecc:	4621      	mov	r1, r4
 8007ece:	4630      	mov	r0, r6
 8007ed0:	f000 f996 	bl	8008200 <_sbrk_r>
 8007ed4:	6038      	str	r0, [r7, #0]
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f000 f991 	bl	8008200 <_sbrk_r>
 8007ede:	1c43      	adds	r3, r0, #1
 8007ee0:	d123      	bne.n	8007f2a <_malloc_r+0x92>
 8007ee2:	230c      	movs	r3, #12
 8007ee4:	6033      	str	r3, [r6, #0]
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	f000 fa7c 	bl	80083e4 <__malloc_unlock>
 8007eec:	e7e3      	b.n	8007eb6 <_malloc_r+0x1e>
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	1b5b      	subs	r3, r3, r5
 8007ef2:	d417      	bmi.n	8007f24 <_malloc_r+0x8c>
 8007ef4:	2b0b      	cmp	r3, #11
 8007ef6:	d903      	bls.n	8007f00 <_malloc_r+0x68>
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	441c      	add	r4, r3
 8007efc:	6025      	str	r5, [r4, #0]
 8007efe:	e004      	b.n	8007f0a <_malloc_r+0x72>
 8007f00:	6863      	ldr	r3, [r4, #4]
 8007f02:	42a2      	cmp	r2, r4
 8007f04:	bf0c      	ite	eq
 8007f06:	600b      	streq	r3, [r1, #0]
 8007f08:	6053      	strne	r3, [r2, #4]
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f000 fa6a 	bl	80083e4 <__malloc_unlock>
 8007f10:	f104 000b 	add.w	r0, r4, #11
 8007f14:	1d23      	adds	r3, r4, #4
 8007f16:	f020 0007 	bic.w	r0, r0, #7
 8007f1a:	1ac2      	subs	r2, r0, r3
 8007f1c:	d0cc      	beq.n	8007eb8 <_malloc_r+0x20>
 8007f1e:	1a1b      	subs	r3, r3, r0
 8007f20:	50a3      	str	r3, [r4, r2]
 8007f22:	e7c9      	b.n	8007eb8 <_malloc_r+0x20>
 8007f24:	4622      	mov	r2, r4
 8007f26:	6864      	ldr	r4, [r4, #4]
 8007f28:	e7cc      	b.n	8007ec4 <_malloc_r+0x2c>
 8007f2a:	1cc4      	adds	r4, r0, #3
 8007f2c:	f024 0403 	bic.w	r4, r4, #3
 8007f30:	42a0      	cmp	r0, r4
 8007f32:	d0e3      	beq.n	8007efc <_malloc_r+0x64>
 8007f34:	1a21      	subs	r1, r4, r0
 8007f36:	4630      	mov	r0, r6
 8007f38:	f000 f962 	bl	8008200 <_sbrk_r>
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	d1dd      	bne.n	8007efc <_malloc_r+0x64>
 8007f40:	e7cf      	b.n	8007ee2 <_malloc_r+0x4a>
 8007f42:	bf00      	nop
 8007f44:	200002c0 	.word	0x200002c0
 8007f48:	200002c4 	.word	0x200002c4

08007f4c <__sfputc_r>:
 8007f4c:	6893      	ldr	r3, [r2, #8]
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	b410      	push	{r4}
 8007f54:	6093      	str	r3, [r2, #8]
 8007f56:	da08      	bge.n	8007f6a <__sfputc_r+0x1e>
 8007f58:	6994      	ldr	r4, [r2, #24]
 8007f5a:	42a3      	cmp	r3, r4
 8007f5c:	db01      	blt.n	8007f62 <__sfputc_r+0x16>
 8007f5e:	290a      	cmp	r1, #10
 8007f60:	d103      	bne.n	8007f6a <__sfputc_r+0x1e>
 8007f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f66:	f7fe ba45 	b.w	80063f4 <__swbuf_r>
 8007f6a:	6813      	ldr	r3, [r2, #0]
 8007f6c:	1c58      	adds	r0, r3, #1
 8007f6e:	6010      	str	r0, [r2, #0]
 8007f70:	7019      	strb	r1, [r3, #0]
 8007f72:	4608      	mov	r0, r1
 8007f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <__sfputs_r>:
 8007f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	460f      	mov	r7, r1
 8007f80:	4614      	mov	r4, r2
 8007f82:	18d5      	adds	r5, r2, r3
 8007f84:	42ac      	cmp	r4, r5
 8007f86:	d101      	bne.n	8007f8c <__sfputs_r+0x12>
 8007f88:	2000      	movs	r0, #0
 8007f8a:	e007      	b.n	8007f9c <__sfputs_r+0x22>
 8007f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f90:	463a      	mov	r2, r7
 8007f92:	4630      	mov	r0, r6
 8007f94:	f7ff ffda 	bl	8007f4c <__sfputc_r>
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	d1f3      	bne.n	8007f84 <__sfputs_r+0xa>
 8007f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fa0 <_vfiprintf_r>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	460d      	mov	r5, r1
 8007fa6:	b09d      	sub	sp, #116	; 0x74
 8007fa8:	4614      	mov	r4, r2
 8007faa:	4698      	mov	r8, r3
 8007fac:	4606      	mov	r6, r0
 8007fae:	b118      	cbz	r0, 8007fb8 <_vfiprintf_r+0x18>
 8007fb0:	6983      	ldr	r3, [r0, #24]
 8007fb2:	b90b      	cbnz	r3, 8007fb8 <_vfiprintf_r+0x18>
 8007fb4:	f7ff fa72 	bl	800749c <__sinit>
 8007fb8:	4b89      	ldr	r3, [pc, #548]	; (80081e0 <_vfiprintf_r+0x240>)
 8007fba:	429d      	cmp	r5, r3
 8007fbc:	d11b      	bne.n	8007ff6 <_vfiprintf_r+0x56>
 8007fbe:	6875      	ldr	r5, [r6, #4]
 8007fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fc2:	07d9      	lsls	r1, r3, #31
 8007fc4:	d405      	bmi.n	8007fd2 <_vfiprintf_r+0x32>
 8007fc6:	89ab      	ldrh	r3, [r5, #12]
 8007fc8:	059a      	lsls	r2, r3, #22
 8007fca:	d402      	bmi.n	8007fd2 <_vfiprintf_r+0x32>
 8007fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fce:	f7ff fb08 	bl	80075e2 <__retarget_lock_acquire_recursive>
 8007fd2:	89ab      	ldrh	r3, [r5, #12]
 8007fd4:	071b      	lsls	r3, r3, #28
 8007fd6:	d501      	bpl.n	8007fdc <_vfiprintf_r+0x3c>
 8007fd8:	692b      	ldr	r3, [r5, #16]
 8007fda:	b9eb      	cbnz	r3, 8008018 <_vfiprintf_r+0x78>
 8007fdc:	4629      	mov	r1, r5
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f7fe fa5a 	bl	8006498 <__swsetup_r>
 8007fe4:	b1c0      	cbz	r0, 8008018 <_vfiprintf_r+0x78>
 8007fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fe8:	07dc      	lsls	r4, r3, #31
 8007fea:	d50e      	bpl.n	800800a <_vfiprintf_r+0x6a>
 8007fec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff0:	b01d      	add	sp, #116	; 0x74
 8007ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff6:	4b7b      	ldr	r3, [pc, #492]	; (80081e4 <_vfiprintf_r+0x244>)
 8007ff8:	429d      	cmp	r5, r3
 8007ffa:	d101      	bne.n	8008000 <_vfiprintf_r+0x60>
 8007ffc:	68b5      	ldr	r5, [r6, #8]
 8007ffe:	e7df      	b.n	8007fc0 <_vfiprintf_r+0x20>
 8008000:	4b79      	ldr	r3, [pc, #484]	; (80081e8 <_vfiprintf_r+0x248>)
 8008002:	429d      	cmp	r5, r3
 8008004:	bf08      	it	eq
 8008006:	68f5      	ldreq	r5, [r6, #12]
 8008008:	e7da      	b.n	8007fc0 <_vfiprintf_r+0x20>
 800800a:	89ab      	ldrh	r3, [r5, #12]
 800800c:	0598      	lsls	r0, r3, #22
 800800e:	d4ed      	bmi.n	8007fec <_vfiprintf_r+0x4c>
 8008010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008012:	f7ff fae7 	bl	80075e4 <__retarget_lock_release_recursive>
 8008016:	e7e9      	b.n	8007fec <_vfiprintf_r+0x4c>
 8008018:	2300      	movs	r3, #0
 800801a:	9309      	str	r3, [sp, #36]	; 0x24
 800801c:	2320      	movs	r3, #32
 800801e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008022:	f8cd 800c 	str.w	r8, [sp, #12]
 8008026:	2330      	movs	r3, #48	; 0x30
 8008028:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80081ec <_vfiprintf_r+0x24c>
 800802c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008030:	f04f 0901 	mov.w	r9, #1
 8008034:	4623      	mov	r3, r4
 8008036:	469a      	mov	sl, r3
 8008038:	f813 2b01 	ldrb.w	r2, [r3], #1
 800803c:	b10a      	cbz	r2, 8008042 <_vfiprintf_r+0xa2>
 800803e:	2a25      	cmp	r2, #37	; 0x25
 8008040:	d1f9      	bne.n	8008036 <_vfiprintf_r+0x96>
 8008042:	ebba 0b04 	subs.w	fp, sl, r4
 8008046:	d00b      	beq.n	8008060 <_vfiprintf_r+0xc0>
 8008048:	465b      	mov	r3, fp
 800804a:	4622      	mov	r2, r4
 800804c:	4629      	mov	r1, r5
 800804e:	4630      	mov	r0, r6
 8008050:	f7ff ff93 	bl	8007f7a <__sfputs_r>
 8008054:	3001      	adds	r0, #1
 8008056:	f000 80aa 	beq.w	80081ae <_vfiprintf_r+0x20e>
 800805a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800805c:	445a      	add	r2, fp
 800805e:	9209      	str	r2, [sp, #36]	; 0x24
 8008060:	f89a 3000 	ldrb.w	r3, [sl]
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 80a2 	beq.w	80081ae <_vfiprintf_r+0x20e>
 800806a:	2300      	movs	r3, #0
 800806c:	f04f 32ff 	mov.w	r2, #4294967295
 8008070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008074:	f10a 0a01 	add.w	sl, sl, #1
 8008078:	9304      	str	r3, [sp, #16]
 800807a:	9307      	str	r3, [sp, #28]
 800807c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008080:	931a      	str	r3, [sp, #104]	; 0x68
 8008082:	4654      	mov	r4, sl
 8008084:	2205      	movs	r2, #5
 8008086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800808a:	4858      	ldr	r0, [pc, #352]	; (80081ec <_vfiprintf_r+0x24c>)
 800808c:	f7f8 f8c8 	bl	8000220 <memchr>
 8008090:	9a04      	ldr	r2, [sp, #16]
 8008092:	b9d8      	cbnz	r0, 80080cc <_vfiprintf_r+0x12c>
 8008094:	06d1      	lsls	r1, r2, #27
 8008096:	bf44      	itt	mi
 8008098:	2320      	movmi	r3, #32
 800809a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800809e:	0713      	lsls	r3, r2, #28
 80080a0:	bf44      	itt	mi
 80080a2:	232b      	movmi	r3, #43	; 0x2b
 80080a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080a8:	f89a 3000 	ldrb.w	r3, [sl]
 80080ac:	2b2a      	cmp	r3, #42	; 0x2a
 80080ae:	d015      	beq.n	80080dc <_vfiprintf_r+0x13c>
 80080b0:	9a07      	ldr	r2, [sp, #28]
 80080b2:	4654      	mov	r4, sl
 80080b4:	2000      	movs	r0, #0
 80080b6:	f04f 0c0a 	mov.w	ip, #10
 80080ba:	4621      	mov	r1, r4
 80080bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080c0:	3b30      	subs	r3, #48	; 0x30
 80080c2:	2b09      	cmp	r3, #9
 80080c4:	d94e      	bls.n	8008164 <_vfiprintf_r+0x1c4>
 80080c6:	b1b0      	cbz	r0, 80080f6 <_vfiprintf_r+0x156>
 80080c8:	9207      	str	r2, [sp, #28]
 80080ca:	e014      	b.n	80080f6 <_vfiprintf_r+0x156>
 80080cc:	eba0 0308 	sub.w	r3, r0, r8
 80080d0:	fa09 f303 	lsl.w	r3, r9, r3
 80080d4:	4313      	orrs	r3, r2
 80080d6:	9304      	str	r3, [sp, #16]
 80080d8:	46a2      	mov	sl, r4
 80080da:	e7d2      	b.n	8008082 <_vfiprintf_r+0xe2>
 80080dc:	9b03      	ldr	r3, [sp, #12]
 80080de:	1d19      	adds	r1, r3, #4
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	9103      	str	r1, [sp, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	bfbb      	ittet	lt
 80080e8:	425b      	neglt	r3, r3
 80080ea:	f042 0202 	orrlt.w	r2, r2, #2
 80080ee:	9307      	strge	r3, [sp, #28]
 80080f0:	9307      	strlt	r3, [sp, #28]
 80080f2:	bfb8      	it	lt
 80080f4:	9204      	strlt	r2, [sp, #16]
 80080f6:	7823      	ldrb	r3, [r4, #0]
 80080f8:	2b2e      	cmp	r3, #46	; 0x2e
 80080fa:	d10c      	bne.n	8008116 <_vfiprintf_r+0x176>
 80080fc:	7863      	ldrb	r3, [r4, #1]
 80080fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008100:	d135      	bne.n	800816e <_vfiprintf_r+0x1ce>
 8008102:	9b03      	ldr	r3, [sp, #12]
 8008104:	1d1a      	adds	r2, r3, #4
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	9203      	str	r2, [sp, #12]
 800810a:	2b00      	cmp	r3, #0
 800810c:	bfb8      	it	lt
 800810e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008112:	3402      	adds	r4, #2
 8008114:	9305      	str	r3, [sp, #20]
 8008116:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80081fc <_vfiprintf_r+0x25c>
 800811a:	7821      	ldrb	r1, [r4, #0]
 800811c:	2203      	movs	r2, #3
 800811e:	4650      	mov	r0, sl
 8008120:	f7f8 f87e 	bl	8000220 <memchr>
 8008124:	b140      	cbz	r0, 8008138 <_vfiprintf_r+0x198>
 8008126:	2340      	movs	r3, #64	; 0x40
 8008128:	eba0 000a 	sub.w	r0, r0, sl
 800812c:	fa03 f000 	lsl.w	r0, r3, r0
 8008130:	9b04      	ldr	r3, [sp, #16]
 8008132:	4303      	orrs	r3, r0
 8008134:	3401      	adds	r4, #1
 8008136:	9304      	str	r3, [sp, #16]
 8008138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800813c:	482c      	ldr	r0, [pc, #176]	; (80081f0 <_vfiprintf_r+0x250>)
 800813e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008142:	2206      	movs	r2, #6
 8008144:	f7f8 f86c 	bl	8000220 <memchr>
 8008148:	2800      	cmp	r0, #0
 800814a:	d03f      	beq.n	80081cc <_vfiprintf_r+0x22c>
 800814c:	4b29      	ldr	r3, [pc, #164]	; (80081f4 <_vfiprintf_r+0x254>)
 800814e:	bb1b      	cbnz	r3, 8008198 <_vfiprintf_r+0x1f8>
 8008150:	9b03      	ldr	r3, [sp, #12]
 8008152:	3307      	adds	r3, #7
 8008154:	f023 0307 	bic.w	r3, r3, #7
 8008158:	3308      	adds	r3, #8
 800815a:	9303      	str	r3, [sp, #12]
 800815c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815e:	443b      	add	r3, r7
 8008160:	9309      	str	r3, [sp, #36]	; 0x24
 8008162:	e767      	b.n	8008034 <_vfiprintf_r+0x94>
 8008164:	fb0c 3202 	mla	r2, ip, r2, r3
 8008168:	460c      	mov	r4, r1
 800816a:	2001      	movs	r0, #1
 800816c:	e7a5      	b.n	80080ba <_vfiprintf_r+0x11a>
 800816e:	2300      	movs	r3, #0
 8008170:	3401      	adds	r4, #1
 8008172:	9305      	str	r3, [sp, #20]
 8008174:	4619      	mov	r1, r3
 8008176:	f04f 0c0a 	mov.w	ip, #10
 800817a:	4620      	mov	r0, r4
 800817c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008180:	3a30      	subs	r2, #48	; 0x30
 8008182:	2a09      	cmp	r2, #9
 8008184:	d903      	bls.n	800818e <_vfiprintf_r+0x1ee>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0c5      	beq.n	8008116 <_vfiprintf_r+0x176>
 800818a:	9105      	str	r1, [sp, #20]
 800818c:	e7c3      	b.n	8008116 <_vfiprintf_r+0x176>
 800818e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008192:	4604      	mov	r4, r0
 8008194:	2301      	movs	r3, #1
 8008196:	e7f0      	b.n	800817a <_vfiprintf_r+0x1da>
 8008198:	ab03      	add	r3, sp, #12
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	462a      	mov	r2, r5
 800819e:	4b16      	ldr	r3, [pc, #88]	; (80081f8 <_vfiprintf_r+0x258>)
 80081a0:	a904      	add	r1, sp, #16
 80081a2:	4630      	mov	r0, r6
 80081a4:	f7fd fd44 	bl	8005c30 <_printf_float>
 80081a8:	4607      	mov	r7, r0
 80081aa:	1c78      	adds	r0, r7, #1
 80081ac:	d1d6      	bne.n	800815c <_vfiprintf_r+0x1bc>
 80081ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081b0:	07d9      	lsls	r1, r3, #31
 80081b2:	d405      	bmi.n	80081c0 <_vfiprintf_r+0x220>
 80081b4:	89ab      	ldrh	r3, [r5, #12]
 80081b6:	059a      	lsls	r2, r3, #22
 80081b8:	d402      	bmi.n	80081c0 <_vfiprintf_r+0x220>
 80081ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081bc:	f7ff fa12 	bl	80075e4 <__retarget_lock_release_recursive>
 80081c0:	89ab      	ldrh	r3, [r5, #12]
 80081c2:	065b      	lsls	r3, r3, #25
 80081c4:	f53f af12 	bmi.w	8007fec <_vfiprintf_r+0x4c>
 80081c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081ca:	e711      	b.n	8007ff0 <_vfiprintf_r+0x50>
 80081cc:	ab03      	add	r3, sp, #12
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	462a      	mov	r2, r5
 80081d2:	4b09      	ldr	r3, [pc, #36]	; (80081f8 <_vfiprintf_r+0x258>)
 80081d4:	a904      	add	r1, sp, #16
 80081d6:	4630      	mov	r0, r6
 80081d8:	f7fd ffce 	bl	8006178 <_printf_i>
 80081dc:	e7e4      	b.n	80081a8 <_vfiprintf_r+0x208>
 80081de:	bf00      	nop
 80081e0:	08008cac 	.word	0x08008cac
 80081e4:	08008ccc 	.word	0x08008ccc
 80081e8:	08008c8c 	.word	0x08008c8c
 80081ec:	08008e4c 	.word	0x08008e4c
 80081f0:	08008e56 	.word	0x08008e56
 80081f4:	08005c31 	.word	0x08005c31
 80081f8:	08007f7b 	.word	0x08007f7b
 80081fc:	08008e52 	.word	0x08008e52

08008200 <_sbrk_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4d06      	ldr	r5, [pc, #24]	; (800821c <_sbrk_r+0x1c>)
 8008204:	2300      	movs	r3, #0
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	f7fa f9d4 	bl	80025b8 <_sbrk>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_sbrk_r+0x1a>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_sbrk_r+0x1a>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	200003b8 	.word	0x200003b8

08008220 <__sread>:
 8008220:	b510      	push	{r4, lr}
 8008222:	460c      	mov	r4, r1
 8008224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008228:	f000 f8e2 	bl	80083f0 <_read_r>
 800822c:	2800      	cmp	r0, #0
 800822e:	bfab      	itete	ge
 8008230:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008232:	89a3      	ldrhlt	r3, [r4, #12]
 8008234:	181b      	addge	r3, r3, r0
 8008236:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800823a:	bfac      	ite	ge
 800823c:	6563      	strge	r3, [r4, #84]	; 0x54
 800823e:	81a3      	strhlt	r3, [r4, #12]
 8008240:	bd10      	pop	{r4, pc}

08008242 <__swrite>:
 8008242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008246:	461f      	mov	r7, r3
 8008248:	898b      	ldrh	r3, [r1, #12]
 800824a:	05db      	lsls	r3, r3, #23
 800824c:	4605      	mov	r5, r0
 800824e:	460c      	mov	r4, r1
 8008250:	4616      	mov	r6, r2
 8008252:	d505      	bpl.n	8008260 <__swrite+0x1e>
 8008254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008258:	2302      	movs	r3, #2
 800825a:	2200      	movs	r2, #0
 800825c:	f000 f898 	bl	8008390 <_lseek_r>
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800826a:	81a3      	strh	r3, [r4, #12]
 800826c:	4632      	mov	r2, r6
 800826e:	463b      	mov	r3, r7
 8008270:	4628      	mov	r0, r5
 8008272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008276:	f000 b817 	b.w	80082a8 <_write_r>

0800827a <__sseek>:
 800827a:	b510      	push	{r4, lr}
 800827c:	460c      	mov	r4, r1
 800827e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008282:	f000 f885 	bl	8008390 <_lseek_r>
 8008286:	1c43      	adds	r3, r0, #1
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	bf15      	itete	ne
 800828c:	6560      	strne	r0, [r4, #84]	; 0x54
 800828e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008296:	81a3      	strheq	r3, [r4, #12]
 8008298:	bf18      	it	ne
 800829a:	81a3      	strhne	r3, [r4, #12]
 800829c:	bd10      	pop	{r4, pc}

0800829e <__sclose>:
 800829e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a2:	f000 b831 	b.w	8008308 <_close_r>
	...

080082a8 <_write_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d07      	ldr	r5, [pc, #28]	; (80082c8 <_write_r+0x20>)
 80082ac:	4604      	mov	r4, r0
 80082ae:	4608      	mov	r0, r1
 80082b0:	4611      	mov	r1, r2
 80082b2:	2200      	movs	r2, #0
 80082b4:	602a      	str	r2, [r5, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	f7fa f92d 	bl	8002516 <_write>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d102      	bne.n	80082c6 <_write_r+0x1e>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	b103      	cbz	r3, 80082c6 <_write_r+0x1e>
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	200003b8 	.word	0x200003b8

080082cc <__assert_func>:
 80082cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082ce:	4614      	mov	r4, r2
 80082d0:	461a      	mov	r2, r3
 80082d2:	4b09      	ldr	r3, [pc, #36]	; (80082f8 <__assert_func+0x2c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4605      	mov	r5, r0
 80082d8:	68d8      	ldr	r0, [r3, #12]
 80082da:	b14c      	cbz	r4, 80082f0 <__assert_func+0x24>
 80082dc:	4b07      	ldr	r3, [pc, #28]	; (80082fc <__assert_func+0x30>)
 80082de:	9100      	str	r1, [sp, #0]
 80082e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082e4:	4906      	ldr	r1, [pc, #24]	; (8008300 <__assert_func+0x34>)
 80082e6:	462b      	mov	r3, r5
 80082e8:	f000 f81e 	bl	8008328 <fiprintf>
 80082ec:	f000 f89f 	bl	800842e <abort>
 80082f0:	4b04      	ldr	r3, [pc, #16]	; (8008304 <__assert_func+0x38>)
 80082f2:	461c      	mov	r4, r3
 80082f4:	e7f3      	b.n	80082de <__assert_func+0x12>
 80082f6:	bf00      	nop
 80082f8:	20000058 	.word	0x20000058
 80082fc:	08008e5d 	.word	0x08008e5d
 8008300:	08008e6a 	.word	0x08008e6a
 8008304:	08008e98 	.word	0x08008e98

08008308 <_close_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4d06      	ldr	r5, [pc, #24]	; (8008324 <_close_r+0x1c>)
 800830c:	2300      	movs	r3, #0
 800830e:	4604      	mov	r4, r0
 8008310:	4608      	mov	r0, r1
 8008312:	602b      	str	r3, [r5, #0]
 8008314:	f7fa f91b 	bl	800254e <_close>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d102      	bne.n	8008322 <_close_r+0x1a>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b103      	cbz	r3, 8008322 <_close_r+0x1a>
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	bd38      	pop	{r3, r4, r5, pc}
 8008324:	200003b8 	.word	0x200003b8

08008328 <fiprintf>:
 8008328:	b40e      	push	{r1, r2, r3}
 800832a:	b503      	push	{r0, r1, lr}
 800832c:	4601      	mov	r1, r0
 800832e:	ab03      	add	r3, sp, #12
 8008330:	4805      	ldr	r0, [pc, #20]	; (8008348 <fiprintf+0x20>)
 8008332:	f853 2b04 	ldr.w	r2, [r3], #4
 8008336:	6800      	ldr	r0, [r0, #0]
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	f7ff fe31 	bl	8007fa0 <_vfiprintf_r>
 800833e:	b002      	add	sp, #8
 8008340:	f85d eb04 	ldr.w	lr, [sp], #4
 8008344:	b003      	add	sp, #12
 8008346:	4770      	bx	lr
 8008348:	20000058 	.word	0x20000058

0800834c <_fstat_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4d07      	ldr	r5, [pc, #28]	; (800836c <_fstat_r+0x20>)
 8008350:	2300      	movs	r3, #0
 8008352:	4604      	mov	r4, r0
 8008354:	4608      	mov	r0, r1
 8008356:	4611      	mov	r1, r2
 8008358:	602b      	str	r3, [r5, #0]
 800835a:	f7fa f904 	bl	8002566 <_fstat>
 800835e:	1c43      	adds	r3, r0, #1
 8008360:	d102      	bne.n	8008368 <_fstat_r+0x1c>
 8008362:	682b      	ldr	r3, [r5, #0]
 8008364:	b103      	cbz	r3, 8008368 <_fstat_r+0x1c>
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	bd38      	pop	{r3, r4, r5, pc}
 800836a:	bf00      	nop
 800836c:	200003b8 	.word	0x200003b8

08008370 <_isatty_r>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	4d06      	ldr	r5, [pc, #24]	; (800838c <_isatty_r+0x1c>)
 8008374:	2300      	movs	r3, #0
 8008376:	4604      	mov	r4, r0
 8008378:	4608      	mov	r0, r1
 800837a:	602b      	str	r3, [r5, #0]
 800837c:	f7fa f903 	bl	8002586 <_isatty>
 8008380:	1c43      	adds	r3, r0, #1
 8008382:	d102      	bne.n	800838a <_isatty_r+0x1a>
 8008384:	682b      	ldr	r3, [r5, #0]
 8008386:	b103      	cbz	r3, 800838a <_isatty_r+0x1a>
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	bd38      	pop	{r3, r4, r5, pc}
 800838c:	200003b8 	.word	0x200003b8

08008390 <_lseek_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4d07      	ldr	r5, [pc, #28]	; (80083b0 <_lseek_r+0x20>)
 8008394:	4604      	mov	r4, r0
 8008396:	4608      	mov	r0, r1
 8008398:	4611      	mov	r1, r2
 800839a:	2200      	movs	r2, #0
 800839c:	602a      	str	r2, [r5, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	f7fa f8fc 	bl	800259c <_lseek>
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	d102      	bne.n	80083ae <_lseek_r+0x1e>
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	b103      	cbz	r3, 80083ae <_lseek_r+0x1e>
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	bd38      	pop	{r3, r4, r5, pc}
 80083b0:	200003b8 	.word	0x200003b8

080083b4 <__ascii_mbtowc>:
 80083b4:	b082      	sub	sp, #8
 80083b6:	b901      	cbnz	r1, 80083ba <__ascii_mbtowc+0x6>
 80083b8:	a901      	add	r1, sp, #4
 80083ba:	b142      	cbz	r2, 80083ce <__ascii_mbtowc+0x1a>
 80083bc:	b14b      	cbz	r3, 80083d2 <__ascii_mbtowc+0x1e>
 80083be:	7813      	ldrb	r3, [r2, #0]
 80083c0:	600b      	str	r3, [r1, #0]
 80083c2:	7812      	ldrb	r2, [r2, #0]
 80083c4:	1e10      	subs	r0, r2, #0
 80083c6:	bf18      	it	ne
 80083c8:	2001      	movne	r0, #1
 80083ca:	b002      	add	sp, #8
 80083cc:	4770      	bx	lr
 80083ce:	4610      	mov	r0, r2
 80083d0:	e7fb      	b.n	80083ca <__ascii_mbtowc+0x16>
 80083d2:	f06f 0001 	mvn.w	r0, #1
 80083d6:	e7f8      	b.n	80083ca <__ascii_mbtowc+0x16>

080083d8 <__malloc_lock>:
 80083d8:	4801      	ldr	r0, [pc, #4]	; (80083e0 <__malloc_lock+0x8>)
 80083da:	f7ff b902 	b.w	80075e2 <__retarget_lock_acquire_recursive>
 80083de:	bf00      	nop
 80083e0:	200003b0 	.word	0x200003b0

080083e4 <__malloc_unlock>:
 80083e4:	4801      	ldr	r0, [pc, #4]	; (80083ec <__malloc_unlock+0x8>)
 80083e6:	f7ff b8fd 	b.w	80075e4 <__retarget_lock_release_recursive>
 80083ea:	bf00      	nop
 80083ec:	200003b0 	.word	0x200003b0

080083f0 <_read_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d07      	ldr	r5, [pc, #28]	; (8008410 <_read_r+0x20>)
 80083f4:	4604      	mov	r4, r0
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	602a      	str	r2, [r5, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	f7fa f86c 	bl	80024dc <_read>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_read_r+0x1e>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_read_r+0x1e>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	200003b8 	.word	0x200003b8

08008414 <__ascii_wctomb>:
 8008414:	b149      	cbz	r1, 800842a <__ascii_wctomb+0x16>
 8008416:	2aff      	cmp	r2, #255	; 0xff
 8008418:	bf85      	ittet	hi
 800841a:	238a      	movhi	r3, #138	; 0x8a
 800841c:	6003      	strhi	r3, [r0, #0]
 800841e:	700a      	strbls	r2, [r1, #0]
 8008420:	f04f 30ff 	movhi.w	r0, #4294967295
 8008424:	bf98      	it	ls
 8008426:	2001      	movls	r0, #1
 8008428:	4770      	bx	lr
 800842a:	4608      	mov	r0, r1
 800842c:	4770      	bx	lr

0800842e <abort>:
 800842e:	b508      	push	{r3, lr}
 8008430:	2006      	movs	r0, #6
 8008432:	f000 f82b 	bl	800848c <raise>
 8008436:	2001      	movs	r0, #1
 8008438:	f7fa f846 	bl	80024c8 <_exit>

0800843c <_raise_r>:
 800843c:	291f      	cmp	r1, #31
 800843e:	b538      	push	{r3, r4, r5, lr}
 8008440:	4604      	mov	r4, r0
 8008442:	460d      	mov	r5, r1
 8008444:	d904      	bls.n	8008450 <_raise_r+0x14>
 8008446:	2316      	movs	r3, #22
 8008448:	6003      	str	r3, [r0, #0]
 800844a:	f04f 30ff 	mov.w	r0, #4294967295
 800844e:	bd38      	pop	{r3, r4, r5, pc}
 8008450:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008452:	b112      	cbz	r2, 800845a <_raise_r+0x1e>
 8008454:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008458:	b94b      	cbnz	r3, 800846e <_raise_r+0x32>
 800845a:	4620      	mov	r0, r4
 800845c:	f000 f830 	bl	80084c0 <_getpid_r>
 8008460:	462a      	mov	r2, r5
 8008462:	4601      	mov	r1, r0
 8008464:	4620      	mov	r0, r4
 8008466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800846a:	f000 b817 	b.w	800849c <_kill_r>
 800846e:	2b01      	cmp	r3, #1
 8008470:	d00a      	beq.n	8008488 <_raise_r+0x4c>
 8008472:	1c59      	adds	r1, r3, #1
 8008474:	d103      	bne.n	800847e <_raise_r+0x42>
 8008476:	2316      	movs	r3, #22
 8008478:	6003      	str	r3, [r0, #0]
 800847a:	2001      	movs	r0, #1
 800847c:	e7e7      	b.n	800844e <_raise_r+0x12>
 800847e:	2400      	movs	r4, #0
 8008480:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008484:	4628      	mov	r0, r5
 8008486:	4798      	blx	r3
 8008488:	2000      	movs	r0, #0
 800848a:	e7e0      	b.n	800844e <_raise_r+0x12>

0800848c <raise>:
 800848c:	4b02      	ldr	r3, [pc, #8]	; (8008498 <raise+0xc>)
 800848e:	4601      	mov	r1, r0
 8008490:	6818      	ldr	r0, [r3, #0]
 8008492:	f7ff bfd3 	b.w	800843c <_raise_r>
 8008496:	bf00      	nop
 8008498:	20000058 	.word	0x20000058

0800849c <_kill_r>:
 800849c:	b538      	push	{r3, r4, r5, lr}
 800849e:	4d07      	ldr	r5, [pc, #28]	; (80084bc <_kill_r+0x20>)
 80084a0:	2300      	movs	r3, #0
 80084a2:	4604      	mov	r4, r0
 80084a4:	4608      	mov	r0, r1
 80084a6:	4611      	mov	r1, r2
 80084a8:	602b      	str	r3, [r5, #0]
 80084aa:	f7f9 fffd 	bl	80024a8 <_kill>
 80084ae:	1c43      	adds	r3, r0, #1
 80084b0:	d102      	bne.n	80084b8 <_kill_r+0x1c>
 80084b2:	682b      	ldr	r3, [r5, #0]
 80084b4:	b103      	cbz	r3, 80084b8 <_kill_r+0x1c>
 80084b6:	6023      	str	r3, [r4, #0]
 80084b8:	bd38      	pop	{r3, r4, r5, pc}
 80084ba:	bf00      	nop
 80084bc:	200003b8 	.word	0x200003b8

080084c0 <_getpid_r>:
 80084c0:	f7f9 bfea 	b.w	8002498 <_getpid>

080084c4 <atan2>:
 80084c4:	f000 b834 	b.w	8008530 <__ieee754_atan2>

080084c8 <sqrt>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	ed2d 8b02 	vpush	{d8}
 80084ce:	ec55 4b10 	vmov	r4, r5, d0
 80084d2:	f000 f8f7 	bl	80086c4 <__ieee754_sqrt>
 80084d6:	4b15      	ldr	r3, [pc, #84]	; (800852c <sqrt+0x64>)
 80084d8:	eeb0 8a40 	vmov.f32	s16, s0
 80084dc:	eef0 8a60 	vmov.f32	s17, s1
 80084e0:	f993 3000 	ldrsb.w	r3, [r3]
 80084e4:	3301      	adds	r3, #1
 80084e6:	d019      	beq.n	800851c <sqrt+0x54>
 80084e8:	4622      	mov	r2, r4
 80084ea:	462b      	mov	r3, r5
 80084ec:	4620      	mov	r0, r4
 80084ee:	4629      	mov	r1, r5
 80084f0:	f7f8 fb3c 	bl	8000b6c <__aeabi_dcmpun>
 80084f4:	b990      	cbnz	r0, 800851c <sqrt+0x54>
 80084f6:	2200      	movs	r2, #0
 80084f8:	2300      	movs	r3, #0
 80084fa:	4620      	mov	r0, r4
 80084fc:	4629      	mov	r1, r5
 80084fe:	f7f8 fb0d 	bl	8000b1c <__aeabi_dcmplt>
 8008502:	b158      	cbz	r0, 800851c <sqrt+0x54>
 8008504:	f7fd fac2 	bl	8005a8c <__errno>
 8008508:	2321      	movs	r3, #33	; 0x21
 800850a:	6003      	str	r3, [r0, #0]
 800850c:	2200      	movs	r2, #0
 800850e:	2300      	movs	r3, #0
 8008510:	4610      	mov	r0, r2
 8008512:	4619      	mov	r1, r3
 8008514:	f7f8 f9ba 	bl	800088c <__aeabi_ddiv>
 8008518:	ec41 0b18 	vmov	d8, r0, r1
 800851c:	eeb0 0a48 	vmov.f32	s0, s16
 8008520:	eef0 0a68 	vmov.f32	s1, s17
 8008524:	ecbd 8b02 	vpop	{d8}
 8008528:	bd38      	pop	{r3, r4, r5, pc}
 800852a:	bf00      	nop
 800852c:	20000228 	.word	0x20000228

08008530 <__ieee754_atan2>:
 8008530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008534:	ec57 6b11 	vmov	r6, r7, d1
 8008538:	4273      	negs	r3, r6
 800853a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80086c0 <__ieee754_atan2+0x190>
 800853e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008542:	4333      	orrs	r3, r6
 8008544:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008548:	4573      	cmp	r3, lr
 800854a:	ec51 0b10 	vmov	r0, r1, d0
 800854e:	ee11 8a10 	vmov	r8, s2
 8008552:	d80a      	bhi.n	800856a <__ieee754_atan2+0x3a>
 8008554:	4244      	negs	r4, r0
 8008556:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800855a:	4304      	orrs	r4, r0
 800855c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008560:	4574      	cmp	r4, lr
 8008562:	ee10 9a10 	vmov	r9, s0
 8008566:	468c      	mov	ip, r1
 8008568:	d907      	bls.n	800857a <__ieee754_atan2+0x4a>
 800856a:	4632      	mov	r2, r6
 800856c:	463b      	mov	r3, r7
 800856e:	f7f7 fead 	bl	80002cc <__adddf3>
 8008572:	ec41 0b10 	vmov	d0, r0, r1
 8008576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800857a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800857e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008582:	4334      	orrs	r4, r6
 8008584:	d103      	bne.n	800858e <__ieee754_atan2+0x5e>
 8008586:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800858a:	f000 b951 	b.w	8008830 <atan>
 800858e:	17bc      	asrs	r4, r7, #30
 8008590:	f004 0402 	and.w	r4, r4, #2
 8008594:	ea53 0909 	orrs.w	r9, r3, r9
 8008598:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800859c:	d107      	bne.n	80085ae <__ieee754_atan2+0x7e>
 800859e:	2c02      	cmp	r4, #2
 80085a0:	d060      	beq.n	8008664 <__ieee754_atan2+0x134>
 80085a2:	2c03      	cmp	r4, #3
 80085a4:	d1e5      	bne.n	8008572 <__ieee754_atan2+0x42>
 80085a6:	a142      	add	r1, pc, #264	; (adr r1, 80086b0 <__ieee754_atan2+0x180>)
 80085a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085ac:	e7e1      	b.n	8008572 <__ieee754_atan2+0x42>
 80085ae:	ea52 0808 	orrs.w	r8, r2, r8
 80085b2:	d106      	bne.n	80085c2 <__ieee754_atan2+0x92>
 80085b4:	f1bc 0f00 	cmp.w	ip, #0
 80085b8:	da5f      	bge.n	800867a <__ieee754_atan2+0x14a>
 80085ba:	a13f      	add	r1, pc, #252	; (adr r1, 80086b8 <__ieee754_atan2+0x188>)
 80085bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085c0:	e7d7      	b.n	8008572 <__ieee754_atan2+0x42>
 80085c2:	4572      	cmp	r2, lr
 80085c4:	d10f      	bne.n	80085e6 <__ieee754_atan2+0xb6>
 80085c6:	4293      	cmp	r3, r2
 80085c8:	f104 34ff 	add.w	r4, r4, #4294967295
 80085cc:	d107      	bne.n	80085de <__ieee754_atan2+0xae>
 80085ce:	2c02      	cmp	r4, #2
 80085d0:	d84c      	bhi.n	800866c <__ieee754_atan2+0x13c>
 80085d2:	4b35      	ldr	r3, [pc, #212]	; (80086a8 <__ieee754_atan2+0x178>)
 80085d4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80085d8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80085dc:	e7c9      	b.n	8008572 <__ieee754_atan2+0x42>
 80085de:	2c02      	cmp	r4, #2
 80085e0:	d848      	bhi.n	8008674 <__ieee754_atan2+0x144>
 80085e2:	4b32      	ldr	r3, [pc, #200]	; (80086ac <__ieee754_atan2+0x17c>)
 80085e4:	e7f6      	b.n	80085d4 <__ieee754_atan2+0xa4>
 80085e6:	4573      	cmp	r3, lr
 80085e8:	d0e4      	beq.n	80085b4 <__ieee754_atan2+0x84>
 80085ea:	1a9b      	subs	r3, r3, r2
 80085ec:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80085f0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80085f4:	da1e      	bge.n	8008634 <__ieee754_atan2+0x104>
 80085f6:	2f00      	cmp	r7, #0
 80085f8:	da01      	bge.n	80085fe <__ieee754_atan2+0xce>
 80085fa:	323c      	adds	r2, #60	; 0x3c
 80085fc:	db1e      	blt.n	800863c <__ieee754_atan2+0x10c>
 80085fe:	4632      	mov	r2, r6
 8008600:	463b      	mov	r3, r7
 8008602:	f7f8 f943 	bl	800088c <__aeabi_ddiv>
 8008606:	ec41 0b10 	vmov	d0, r0, r1
 800860a:	f000 fab1 	bl	8008b70 <fabs>
 800860e:	f000 f90f 	bl	8008830 <atan>
 8008612:	ec51 0b10 	vmov	r0, r1, d0
 8008616:	2c01      	cmp	r4, #1
 8008618:	d013      	beq.n	8008642 <__ieee754_atan2+0x112>
 800861a:	2c02      	cmp	r4, #2
 800861c:	d015      	beq.n	800864a <__ieee754_atan2+0x11a>
 800861e:	2c00      	cmp	r4, #0
 8008620:	d0a7      	beq.n	8008572 <__ieee754_atan2+0x42>
 8008622:	a319      	add	r3, pc, #100	; (adr r3, 8008688 <__ieee754_atan2+0x158>)
 8008624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008628:	f7f7 fe4e 	bl	80002c8 <__aeabi_dsub>
 800862c:	a318      	add	r3, pc, #96	; (adr r3, 8008690 <__ieee754_atan2+0x160>)
 800862e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008632:	e014      	b.n	800865e <__ieee754_atan2+0x12e>
 8008634:	a118      	add	r1, pc, #96	; (adr r1, 8008698 <__ieee754_atan2+0x168>)
 8008636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800863a:	e7ec      	b.n	8008616 <__ieee754_atan2+0xe6>
 800863c:	2000      	movs	r0, #0
 800863e:	2100      	movs	r1, #0
 8008640:	e7e9      	b.n	8008616 <__ieee754_atan2+0xe6>
 8008642:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008646:	4619      	mov	r1, r3
 8008648:	e793      	b.n	8008572 <__ieee754_atan2+0x42>
 800864a:	a30f      	add	r3, pc, #60	; (adr r3, 8008688 <__ieee754_atan2+0x158>)
 800864c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008650:	f7f7 fe3a 	bl	80002c8 <__aeabi_dsub>
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	a10d      	add	r1, pc, #52	; (adr r1, 8008690 <__ieee754_atan2+0x160>)
 800865a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800865e:	f7f7 fe33 	bl	80002c8 <__aeabi_dsub>
 8008662:	e786      	b.n	8008572 <__ieee754_atan2+0x42>
 8008664:	a10a      	add	r1, pc, #40	; (adr r1, 8008690 <__ieee754_atan2+0x160>)
 8008666:	e9d1 0100 	ldrd	r0, r1, [r1]
 800866a:	e782      	b.n	8008572 <__ieee754_atan2+0x42>
 800866c:	a10c      	add	r1, pc, #48	; (adr r1, 80086a0 <__ieee754_atan2+0x170>)
 800866e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008672:	e77e      	b.n	8008572 <__ieee754_atan2+0x42>
 8008674:	2000      	movs	r0, #0
 8008676:	2100      	movs	r1, #0
 8008678:	e77b      	b.n	8008572 <__ieee754_atan2+0x42>
 800867a:	a107      	add	r1, pc, #28	; (adr r1, 8008698 <__ieee754_atan2+0x168>)
 800867c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008680:	e777      	b.n	8008572 <__ieee754_atan2+0x42>
 8008682:	bf00      	nop
 8008684:	f3af 8000 	nop.w
 8008688:	33145c07 	.word	0x33145c07
 800868c:	3ca1a626 	.word	0x3ca1a626
 8008690:	54442d18 	.word	0x54442d18
 8008694:	400921fb 	.word	0x400921fb
 8008698:	54442d18 	.word	0x54442d18
 800869c:	3ff921fb 	.word	0x3ff921fb
 80086a0:	54442d18 	.word	0x54442d18
 80086a4:	3fe921fb 	.word	0x3fe921fb
 80086a8:	08008fa8 	.word	0x08008fa8
 80086ac:	08008fc0 	.word	0x08008fc0
 80086b0:	54442d18 	.word	0x54442d18
 80086b4:	c00921fb 	.word	0xc00921fb
 80086b8:	54442d18 	.word	0x54442d18
 80086bc:	bff921fb 	.word	0xbff921fb
 80086c0:	7ff00000 	.word	0x7ff00000

080086c4 <__ieee754_sqrt>:
 80086c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c8:	ec55 4b10 	vmov	r4, r5, d0
 80086cc:	4e56      	ldr	r6, [pc, #344]	; (8008828 <__ieee754_sqrt+0x164>)
 80086ce:	43ae      	bics	r6, r5
 80086d0:	ee10 0a10 	vmov	r0, s0
 80086d4:	ee10 3a10 	vmov	r3, s0
 80086d8:	4629      	mov	r1, r5
 80086da:	462a      	mov	r2, r5
 80086dc:	d110      	bne.n	8008700 <__ieee754_sqrt+0x3c>
 80086de:	ee10 2a10 	vmov	r2, s0
 80086e2:	462b      	mov	r3, r5
 80086e4:	f7f7 ffa8 	bl	8000638 <__aeabi_dmul>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	4620      	mov	r0, r4
 80086ee:	4629      	mov	r1, r5
 80086f0:	f7f7 fdec 	bl	80002cc <__adddf3>
 80086f4:	4604      	mov	r4, r0
 80086f6:	460d      	mov	r5, r1
 80086f8:	ec45 4b10 	vmov	d0, r4, r5
 80086fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008700:	2d00      	cmp	r5, #0
 8008702:	dc10      	bgt.n	8008726 <__ieee754_sqrt+0x62>
 8008704:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008708:	4330      	orrs	r0, r6
 800870a:	d0f5      	beq.n	80086f8 <__ieee754_sqrt+0x34>
 800870c:	b15d      	cbz	r5, 8008726 <__ieee754_sqrt+0x62>
 800870e:	ee10 2a10 	vmov	r2, s0
 8008712:	462b      	mov	r3, r5
 8008714:	ee10 0a10 	vmov	r0, s0
 8008718:	f7f7 fdd6 	bl	80002c8 <__aeabi_dsub>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	f7f8 f8b4 	bl	800088c <__aeabi_ddiv>
 8008724:	e7e6      	b.n	80086f4 <__ieee754_sqrt+0x30>
 8008726:	1509      	asrs	r1, r1, #20
 8008728:	d076      	beq.n	8008818 <__ieee754_sqrt+0x154>
 800872a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800872e:	07ce      	lsls	r6, r1, #31
 8008730:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8008734:	bf5e      	ittt	pl
 8008736:	0fda      	lsrpl	r2, r3, #31
 8008738:	005b      	lslpl	r3, r3, #1
 800873a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800873e:	0fda      	lsrs	r2, r3, #31
 8008740:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8008744:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008748:	2000      	movs	r0, #0
 800874a:	106d      	asrs	r5, r5, #1
 800874c:	005b      	lsls	r3, r3, #1
 800874e:	f04f 0e16 	mov.w	lr, #22
 8008752:	4684      	mov	ip, r0
 8008754:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008758:	eb0c 0401 	add.w	r4, ip, r1
 800875c:	4294      	cmp	r4, r2
 800875e:	bfde      	ittt	le
 8008760:	1b12      	suble	r2, r2, r4
 8008762:	eb04 0c01 	addle.w	ip, r4, r1
 8008766:	1840      	addle	r0, r0, r1
 8008768:	0052      	lsls	r2, r2, #1
 800876a:	f1be 0e01 	subs.w	lr, lr, #1
 800876e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008772:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008776:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800877a:	d1ed      	bne.n	8008758 <__ieee754_sqrt+0x94>
 800877c:	4671      	mov	r1, lr
 800877e:	2720      	movs	r7, #32
 8008780:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008784:	4562      	cmp	r2, ip
 8008786:	eb04 060e 	add.w	r6, r4, lr
 800878a:	dc02      	bgt.n	8008792 <__ieee754_sqrt+0xce>
 800878c:	d113      	bne.n	80087b6 <__ieee754_sqrt+0xf2>
 800878e:	429e      	cmp	r6, r3
 8008790:	d811      	bhi.n	80087b6 <__ieee754_sqrt+0xf2>
 8008792:	2e00      	cmp	r6, #0
 8008794:	eb06 0e04 	add.w	lr, r6, r4
 8008798:	da43      	bge.n	8008822 <__ieee754_sqrt+0x15e>
 800879a:	f1be 0f00 	cmp.w	lr, #0
 800879e:	db40      	blt.n	8008822 <__ieee754_sqrt+0x15e>
 80087a0:	f10c 0801 	add.w	r8, ip, #1
 80087a4:	eba2 020c 	sub.w	r2, r2, ip
 80087a8:	429e      	cmp	r6, r3
 80087aa:	bf88      	it	hi
 80087ac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80087b0:	1b9b      	subs	r3, r3, r6
 80087b2:	4421      	add	r1, r4
 80087b4:	46c4      	mov	ip, r8
 80087b6:	0052      	lsls	r2, r2, #1
 80087b8:	3f01      	subs	r7, #1
 80087ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80087be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80087c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80087c6:	d1dd      	bne.n	8008784 <__ieee754_sqrt+0xc0>
 80087c8:	4313      	orrs	r3, r2
 80087ca:	d006      	beq.n	80087da <__ieee754_sqrt+0x116>
 80087cc:	1c4c      	adds	r4, r1, #1
 80087ce:	bf13      	iteet	ne
 80087d0:	3101      	addne	r1, #1
 80087d2:	3001      	addeq	r0, #1
 80087d4:	4639      	moveq	r1, r7
 80087d6:	f021 0101 	bicne.w	r1, r1, #1
 80087da:	1043      	asrs	r3, r0, #1
 80087dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80087e0:	0849      	lsrs	r1, r1, #1
 80087e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80087e6:	07c2      	lsls	r2, r0, #31
 80087e8:	bf48      	it	mi
 80087ea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80087ee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80087f2:	460c      	mov	r4, r1
 80087f4:	463d      	mov	r5, r7
 80087f6:	e77f      	b.n	80086f8 <__ieee754_sqrt+0x34>
 80087f8:	0ada      	lsrs	r2, r3, #11
 80087fa:	3815      	subs	r0, #21
 80087fc:	055b      	lsls	r3, r3, #21
 80087fe:	2a00      	cmp	r2, #0
 8008800:	d0fa      	beq.n	80087f8 <__ieee754_sqrt+0x134>
 8008802:	02d7      	lsls	r7, r2, #11
 8008804:	d50a      	bpl.n	800881c <__ieee754_sqrt+0x158>
 8008806:	f1c1 0420 	rsb	r4, r1, #32
 800880a:	fa23 f404 	lsr.w	r4, r3, r4
 800880e:	1e4d      	subs	r5, r1, #1
 8008810:	408b      	lsls	r3, r1
 8008812:	4322      	orrs	r2, r4
 8008814:	1b41      	subs	r1, r0, r5
 8008816:	e788      	b.n	800872a <__ieee754_sqrt+0x66>
 8008818:	4608      	mov	r0, r1
 800881a:	e7f0      	b.n	80087fe <__ieee754_sqrt+0x13a>
 800881c:	0052      	lsls	r2, r2, #1
 800881e:	3101      	adds	r1, #1
 8008820:	e7ef      	b.n	8008802 <__ieee754_sqrt+0x13e>
 8008822:	46e0      	mov	r8, ip
 8008824:	e7be      	b.n	80087a4 <__ieee754_sqrt+0xe0>
 8008826:	bf00      	nop
 8008828:	7ff00000 	.word	0x7ff00000
 800882c:	00000000 	.word	0x00000000

08008830 <atan>:
 8008830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	ec55 4b10 	vmov	r4, r5, d0
 8008838:	4bc3      	ldr	r3, [pc, #780]	; (8008b48 <atan+0x318>)
 800883a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800883e:	429e      	cmp	r6, r3
 8008840:	46ab      	mov	fp, r5
 8008842:	dd18      	ble.n	8008876 <atan+0x46>
 8008844:	4bc1      	ldr	r3, [pc, #772]	; (8008b4c <atan+0x31c>)
 8008846:	429e      	cmp	r6, r3
 8008848:	dc01      	bgt.n	800884e <atan+0x1e>
 800884a:	d109      	bne.n	8008860 <atan+0x30>
 800884c:	b144      	cbz	r4, 8008860 <atan+0x30>
 800884e:	4622      	mov	r2, r4
 8008850:	462b      	mov	r3, r5
 8008852:	4620      	mov	r0, r4
 8008854:	4629      	mov	r1, r5
 8008856:	f7f7 fd39 	bl	80002cc <__adddf3>
 800885a:	4604      	mov	r4, r0
 800885c:	460d      	mov	r5, r1
 800885e:	e006      	b.n	800886e <atan+0x3e>
 8008860:	f1bb 0f00 	cmp.w	fp, #0
 8008864:	f300 8131 	bgt.w	8008aca <atan+0x29a>
 8008868:	a59b      	add	r5, pc, #620	; (adr r5, 8008ad8 <atan+0x2a8>)
 800886a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800886e:	ec45 4b10 	vmov	d0, r4, r5
 8008872:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008876:	4bb6      	ldr	r3, [pc, #728]	; (8008b50 <atan+0x320>)
 8008878:	429e      	cmp	r6, r3
 800887a:	dc14      	bgt.n	80088a6 <atan+0x76>
 800887c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008880:	429e      	cmp	r6, r3
 8008882:	dc0d      	bgt.n	80088a0 <atan+0x70>
 8008884:	a396      	add	r3, pc, #600	; (adr r3, 8008ae0 <atan+0x2b0>)
 8008886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888a:	ee10 0a10 	vmov	r0, s0
 800888e:	4629      	mov	r1, r5
 8008890:	f7f7 fd1c 	bl	80002cc <__adddf3>
 8008894:	4baf      	ldr	r3, [pc, #700]	; (8008b54 <atan+0x324>)
 8008896:	2200      	movs	r2, #0
 8008898:	f7f8 f95e 	bl	8000b58 <__aeabi_dcmpgt>
 800889c:	2800      	cmp	r0, #0
 800889e:	d1e6      	bne.n	800886e <atan+0x3e>
 80088a0:	f04f 3aff 	mov.w	sl, #4294967295
 80088a4:	e02b      	b.n	80088fe <atan+0xce>
 80088a6:	f000 f963 	bl	8008b70 <fabs>
 80088aa:	4bab      	ldr	r3, [pc, #684]	; (8008b58 <atan+0x328>)
 80088ac:	429e      	cmp	r6, r3
 80088ae:	ec55 4b10 	vmov	r4, r5, d0
 80088b2:	f300 80bf 	bgt.w	8008a34 <atan+0x204>
 80088b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80088ba:	429e      	cmp	r6, r3
 80088bc:	f300 80a0 	bgt.w	8008a00 <atan+0x1d0>
 80088c0:	ee10 2a10 	vmov	r2, s0
 80088c4:	ee10 0a10 	vmov	r0, s0
 80088c8:	462b      	mov	r3, r5
 80088ca:	4629      	mov	r1, r5
 80088cc:	f7f7 fcfe 	bl	80002cc <__adddf3>
 80088d0:	4ba0      	ldr	r3, [pc, #640]	; (8008b54 <atan+0x324>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	f7f7 fcf8 	bl	80002c8 <__aeabi_dsub>
 80088d8:	2200      	movs	r2, #0
 80088da:	4606      	mov	r6, r0
 80088dc:	460f      	mov	r7, r1
 80088de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80088e2:	4620      	mov	r0, r4
 80088e4:	4629      	mov	r1, r5
 80088e6:	f7f7 fcf1 	bl	80002cc <__adddf3>
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	4630      	mov	r0, r6
 80088f0:	4639      	mov	r1, r7
 80088f2:	f7f7 ffcb 	bl	800088c <__aeabi_ddiv>
 80088f6:	f04f 0a00 	mov.w	sl, #0
 80088fa:	4604      	mov	r4, r0
 80088fc:	460d      	mov	r5, r1
 80088fe:	4622      	mov	r2, r4
 8008900:	462b      	mov	r3, r5
 8008902:	4620      	mov	r0, r4
 8008904:	4629      	mov	r1, r5
 8008906:	f7f7 fe97 	bl	8000638 <__aeabi_dmul>
 800890a:	4602      	mov	r2, r0
 800890c:	460b      	mov	r3, r1
 800890e:	4680      	mov	r8, r0
 8008910:	4689      	mov	r9, r1
 8008912:	f7f7 fe91 	bl	8000638 <__aeabi_dmul>
 8008916:	a374      	add	r3, pc, #464	; (adr r3, 8008ae8 <atan+0x2b8>)
 8008918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891c:	4606      	mov	r6, r0
 800891e:	460f      	mov	r7, r1
 8008920:	f7f7 fe8a 	bl	8000638 <__aeabi_dmul>
 8008924:	a372      	add	r3, pc, #456	; (adr r3, 8008af0 <atan+0x2c0>)
 8008926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892a:	f7f7 fccf 	bl	80002cc <__adddf3>
 800892e:	4632      	mov	r2, r6
 8008930:	463b      	mov	r3, r7
 8008932:	f7f7 fe81 	bl	8000638 <__aeabi_dmul>
 8008936:	a370      	add	r3, pc, #448	; (adr r3, 8008af8 <atan+0x2c8>)
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	f7f7 fcc6 	bl	80002cc <__adddf3>
 8008940:	4632      	mov	r2, r6
 8008942:	463b      	mov	r3, r7
 8008944:	f7f7 fe78 	bl	8000638 <__aeabi_dmul>
 8008948:	a36d      	add	r3, pc, #436	; (adr r3, 8008b00 <atan+0x2d0>)
 800894a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894e:	f7f7 fcbd 	bl	80002cc <__adddf3>
 8008952:	4632      	mov	r2, r6
 8008954:	463b      	mov	r3, r7
 8008956:	f7f7 fe6f 	bl	8000638 <__aeabi_dmul>
 800895a:	a36b      	add	r3, pc, #428	; (adr r3, 8008b08 <atan+0x2d8>)
 800895c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008960:	f7f7 fcb4 	bl	80002cc <__adddf3>
 8008964:	4632      	mov	r2, r6
 8008966:	463b      	mov	r3, r7
 8008968:	f7f7 fe66 	bl	8000638 <__aeabi_dmul>
 800896c:	a368      	add	r3, pc, #416	; (adr r3, 8008b10 <atan+0x2e0>)
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	f7f7 fcab 	bl	80002cc <__adddf3>
 8008976:	4642      	mov	r2, r8
 8008978:	464b      	mov	r3, r9
 800897a:	f7f7 fe5d 	bl	8000638 <__aeabi_dmul>
 800897e:	a366      	add	r3, pc, #408	; (adr r3, 8008b18 <atan+0x2e8>)
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	4680      	mov	r8, r0
 8008986:	4689      	mov	r9, r1
 8008988:	4630      	mov	r0, r6
 800898a:	4639      	mov	r1, r7
 800898c:	f7f7 fe54 	bl	8000638 <__aeabi_dmul>
 8008990:	a363      	add	r3, pc, #396	; (adr r3, 8008b20 <atan+0x2f0>)
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	f7f7 fc97 	bl	80002c8 <__aeabi_dsub>
 800899a:	4632      	mov	r2, r6
 800899c:	463b      	mov	r3, r7
 800899e:	f7f7 fe4b 	bl	8000638 <__aeabi_dmul>
 80089a2:	a361      	add	r3, pc, #388	; (adr r3, 8008b28 <atan+0x2f8>)
 80089a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a8:	f7f7 fc8e 	bl	80002c8 <__aeabi_dsub>
 80089ac:	4632      	mov	r2, r6
 80089ae:	463b      	mov	r3, r7
 80089b0:	f7f7 fe42 	bl	8000638 <__aeabi_dmul>
 80089b4:	a35e      	add	r3, pc, #376	; (adr r3, 8008b30 <atan+0x300>)
 80089b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ba:	f7f7 fc85 	bl	80002c8 <__aeabi_dsub>
 80089be:	4632      	mov	r2, r6
 80089c0:	463b      	mov	r3, r7
 80089c2:	f7f7 fe39 	bl	8000638 <__aeabi_dmul>
 80089c6:	a35c      	add	r3, pc, #368	; (adr r3, 8008b38 <atan+0x308>)
 80089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089cc:	f7f7 fc7c 	bl	80002c8 <__aeabi_dsub>
 80089d0:	4632      	mov	r2, r6
 80089d2:	463b      	mov	r3, r7
 80089d4:	f7f7 fe30 	bl	8000638 <__aeabi_dmul>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	4640      	mov	r0, r8
 80089de:	4649      	mov	r1, r9
 80089e0:	f7f7 fc74 	bl	80002cc <__adddf3>
 80089e4:	4622      	mov	r2, r4
 80089e6:	462b      	mov	r3, r5
 80089e8:	f7f7 fe26 	bl	8000638 <__aeabi_dmul>
 80089ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80089f0:	4602      	mov	r2, r0
 80089f2:	460b      	mov	r3, r1
 80089f4:	d14b      	bne.n	8008a8e <atan+0x25e>
 80089f6:	4620      	mov	r0, r4
 80089f8:	4629      	mov	r1, r5
 80089fa:	f7f7 fc65 	bl	80002c8 <__aeabi_dsub>
 80089fe:	e72c      	b.n	800885a <atan+0x2a>
 8008a00:	ee10 0a10 	vmov	r0, s0
 8008a04:	4b53      	ldr	r3, [pc, #332]	; (8008b54 <atan+0x324>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	4629      	mov	r1, r5
 8008a0a:	f7f7 fc5d 	bl	80002c8 <__aeabi_dsub>
 8008a0e:	4b51      	ldr	r3, [pc, #324]	; (8008b54 <atan+0x324>)
 8008a10:	4606      	mov	r6, r0
 8008a12:	460f      	mov	r7, r1
 8008a14:	2200      	movs	r2, #0
 8008a16:	4620      	mov	r0, r4
 8008a18:	4629      	mov	r1, r5
 8008a1a:	f7f7 fc57 	bl	80002cc <__adddf3>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	460b      	mov	r3, r1
 8008a22:	4630      	mov	r0, r6
 8008a24:	4639      	mov	r1, r7
 8008a26:	f7f7 ff31 	bl	800088c <__aeabi_ddiv>
 8008a2a:	f04f 0a01 	mov.w	sl, #1
 8008a2e:	4604      	mov	r4, r0
 8008a30:	460d      	mov	r5, r1
 8008a32:	e764      	b.n	80088fe <atan+0xce>
 8008a34:	4b49      	ldr	r3, [pc, #292]	; (8008b5c <atan+0x32c>)
 8008a36:	429e      	cmp	r6, r3
 8008a38:	da1d      	bge.n	8008a76 <atan+0x246>
 8008a3a:	ee10 0a10 	vmov	r0, s0
 8008a3e:	4b48      	ldr	r3, [pc, #288]	; (8008b60 <atan+0x330>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	4629      	mov	r1, r5
 8008a44:	f7f7 fc40 	bl	80002c8 <__aeabi_dsub>
 8008a48:	4b45      	ldr	r3, [pc, #276]	; (8008b60 <atan+0x330>)
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	460f      	mov	r7, r1
 8008a4e:	2200      	movs	r2, #0
 8008a50:	4620      	mov	r0, r4
 8008a52:	4629      	mov	r1, r5
 8008a54:	f7f7 fdf0 	bl	8000638 <__aeabi_dmul>
 8008a58:	4b3e      	ldr	r3, [pc, #248]	; (8008b54 <atan+0x324>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f7f7 fc36 	bl	80002cc <__adddf3>
 8008a60:	4602      	mov	r2, r0
 8008a62:	460b      	mov	r3, r1
 8008a64:	4630      	mov	r0, r6
 8008a66:	4639      	mov	r1, r7
 8008a68:	f7f7 ff10 	bl	800088c <__aeabi_ddiv>
 8008a6c:	f04f 0a02 	mov.w	sl, #2
 8008a70:	4604      	mov	r4, r0
 8008a72:	460d      	mov	r5, r1
 8008a74:	e743      	b.n	80088fe <atan+0xce>
 8008a76:	462b      	mov	r3, r5
 8008a78:	ee10 2a10 	vmov	r2, s0
 8008a7c:	4939      	ldr	r1, [pc, #228]	; (8008b64 <atan+0x334>)
 8008a7e:	2000      	movs	r0, #0
 8008a80:	f7f7 ff04 	bl	800088c <__aeabi_ddiv>
 8008a84:	f04f 0a03 	mov.w	sl, #3
 8008a88:	4604      	mov	r4, r0
 8008a8a:	460d      	mov	r5, r1
 8008a8c:	e737      	b.n	80088fe <atan+0xce>
 8008a8e:	4b36      	ldr	r3, [pc, #216]	; (8008b68 <atan+0x338>)
 8008a90:	4e36      	ldr	r6, [pc, #216]	; (8008b6c <atan+0x33c>)
 8008a92:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008a96:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008a9a:	e9da 2300 	ldrd	r2, r3, [sl]
 8008a9e:	f7f7 fc13 	bl	80002c8 <__aeabi_dsub>
 8008aa2:	4622      	mov	r2, r4
 8008aa4:	462b      	mov	r3, r5
 8008aa6:	f7f7 fc0f 	bl	80002c8 <__aeabi_dsub>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008ab2:	f7f7 fc09 	bl	80002c8 <__aeabi_dsub>
 8008ab6:	f1bb 0f00 	cmp.w	fp, #0
 8008aba:	4604      	mov	r4, r0
 8008abc:	460d      	mov	r5, r1
 8008abe:	f6bf aed6 	bge.w	800886e <atan+0x3e>
 8008ac2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ac6:	461d      	mov	r5, r3
 8008ac8:	e6d1      	b.n	800886e <atan+0x3e>
 8008aca:	a51d      	add	r5, pc, #116	; (adr r5, 8008b40 <atan+0x310>)
 8008acc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008ad0:	e6cd      	b.n	800886e <atan+0x3e>
 8008ad2:	bf00      	nop
 8008ad4:	f3af 8000 	nop.w
 8008ad8:	54442d18 	.word	0x54442d18
 8008adc:	bff921fb 	.word	0xbff921fb
 8008ae0:	8800759c 	.word	0x8800759c
 8008ae4:	7e37e43c 	.word	0x7e37e43c
 8008ae8:	e322da11 	.word	0xe322da11
 8008aec:	3f90ad3a 	.word	0x3f90ad3a
 8008af0:	24760deb 	.word	0x24760deb
 8008af4:	3fa97b4b 	.word	0x3fa97b4b
 8008af8:	a0d03d51 	.word	0xa0d03d51
 8008afc:	3fb10d66 	.word	0x3fb10d66
 8008b00:	c54c206e 	.word	0xc54c206e
 8008b04:	3fb745cd 	.word	0x3fb745cd
 8008b08:	920083ff 	.word	0x920083ff
 8008b0c:	3fc24924 	.word	0x3fc24924
 8008b10:	5555550d 	.word	0x5555550d
 8008b14:	3fd55555 	.word	0x3fd55555
 8008b18:	2c6a6c2f 	.word	0x2c6a6c2f
 8008b1c:	bfa2b444 	.word	0xbfa2b444
 8008b20:	52defd9a 	.word	0x52defd9a
 8008b24:	3fadde2d 	.word	0x3fadde2d
 8008b28:	af749a6d 	.word	0xaf749a6d
 8008b2c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008b30:	fe231671 	.word	0xfe231671
 8008b34:	3fbc71c6 	.word	0x3fbc71c6
 8008b38:	9998ebc4 	.word	0x9998ebc4
 8008b3c:	3fc99999 	.word	0x3fc99999
 8008b40:	54442d18 	.word	0x54442d18
 8008b44:	3ff921fb 	.word	0x3ff921fb
 8008b48:	440fffff 	.word	0x440fffff
 8008b4c:	7ff00000 	.word	0x7ff00000
 8008b50:	3fdbffff 	.word	0x3fdbffff
 8008b54:	3ff00000 	.word	0x3ff00000
 8008b58:	3ff2ffff 	.word	0x3ff2ffff
 8008b5c:	40038000 	.word	0x40038000
 8008b60:	3ff80000 	.word	0x3ff80000
 8008b64:	bff00000 	.word	0xbff00000
 8008b68:	08008ff8 	.word	0x08008ff8
 8008b6c:	08008fd8 	.word	0x08008fd8

08008b70 <fabs>:
 8008b70:	ec51 0b10 	vmov	r0, r1, d0
 8008b74:	ee10 2a10 	vmov	r2, s0
 8008b78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b7c:	ec43 2b10 	vmov	d0, r2, r3
 8008b80:	4770      	bx	lr
	...

08008b84 <_init>:
 8008b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b86:	bf00      	nop
 8008b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b8a:	bc08      	pop	{r3}
 8008b8c:	469e      	mov	lr, r3
 8008b8e:	4770      	bx	lr

08008b90 <_fini>:
 8008b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b92:	bf00      	nop
 8008b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b96:	bc08      	pop	{r3}
 8008b98:	469e      	mov	lr, r3
 8008b9a:	4770      	bx	lr
